{"version":3,"file":"index-0f118a94.js","sources":["../../admin/src/components/Tr/index.js","../../admin/src/components/ComponentList/index.js","../../admin/src/components/ComponentCard/ComponentIcon/ComponentIcon.js","../../admin/src/components/ComponentCard/index.js","../../admin/src/components/DynamicZoneList/index.js","../../admin/src/components/NestedTFooter/index.js","../../admin/src/components/List/BoxWrapper.js","../../admin/src/components/List/index.js","../../admin/src/icons/Curve.js","../../admin/src/components/UpperFirst/index.js","../../admin/src/components/ListRow/BoxWrapper.js","../../admin/src/components/ListRow/DisplayedType.js","../../admin/src/components/ListRow/index.js","../../admin/src/utils/getAttributeDisplayedType.js","../../admin/src/pages/ListView/LinkToCMSettingsView/index.js","../../admin/src/pages/ListView/index.js"],"sourcesContent":["import { pxToRem } from '@strapi/helper-plugin';\nimport styled from 'styled-components';\n\n// Keep component-row for css specificity\nconst Tr = styled.tr`\n  &.component-row,\n  &.dynamiczone-row {\n    position: relative;\n    border-top: none !important;\n\n    table tr:first-child {\n      border-top: none;\n    }\n\n    > td:first-of-type {\n      padding: 0 0 0 ${pxToRem(20)};\n      position: relative;\n\n      &::before {\n        content: '';\n        width: ${pxToRem(4)};\n        height: calc(100% - 40px);\n        position: absolute;\n        top: -7px;\n        left: 1.625rem;\n        border-radius: 4px;\n\n        ${({ isFromDynamicZone, isChildOfDynamicZone, theme }) => {\n          if (isChildOfDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          if (isFromDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          return `background: ${theme.colors.neutral150};`;\n        }}\n      }\n    }\n  }\n\n  &.dynamiczone-row > td:first-of-type {\n    padding: 0;\n  }\n`;\n\nexport default Tr;\n","/**\n *\n * ComponentList\n *\n */\n/* eslint-disable import/no-cycle */\nimport React from 'react';\n\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\n\nimport useDataManager from '../../hooks/useDataManager';\nimport List from '../List';\nimport Tr from '../Tr';\n\nfunction ComponentList({\n  customRowComponent,\n  component,\n  isFromDynamicZone,\n  isNestedInDZComponent,\n  firstLoopComponentUid,\n}) {\n  const { modifiedData } = useDataManager();\n  const {\n    schema: { attributes },\n  } = get(modifiedData, ['components', component], {\n    schema: { attributes: [] },\n  });\n\n  return (\n    <Tr isChildOfDynamicZone={isFromDynamicZone} className=\"component-row\">\n      <td colSpan={12}>\n        <List\n          customRowComponent={customRowComponent}\n          items={attributes}\n          targetUid={component}\n          firstLoopComponentUid={firstLoopComponentUid || component}\n          editTarget=\"components\"\n          isFromDynamicZone={isFromDynamicZone}\n          isNestedInDZComponent={isNestedInDZComponent}\n          isSub\n          secondLoopComponentUid={firstLoopComponentUid ? component : null}\n        />\n      </td>\n    </Tr>\n  );\n}\n\nComponentList.defaultProps = {\n  component: null,\n  customRowComponent: null,\n  firstLoopComponentUid: null,\n  isFromDynamicZone: false,\n  isNestedInDZComponent: false,\n};\n\nComponentList.propTypes = {\n  component: PropTypes.string,\n  customRowComponent: PropTypes.func,\n  firstLoopComponentUid: PropTypes.string,\n  isFromDynamicZone: PropTypes.bool,\n  isNestedInDZComponent: PropTypes.bool,\n};\n\nexport default ComponentList;\n","import React from 'react';\n\nimport { Flex, Icon } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\n\nimport { COMPONENT_ICONS } from '../../IconPicker/constants';\n\nexport function ComponentIcon({ isActive, icon }) {\n  return (\n    <Flex\n      alignItems=\"center\"\n      background={isActive ? 'primary200' : 'neutral200'}\n      justifyContent=\"center\"\n      height={8}\n      width={8}\n      borderRadius=\"50%\"\n    >\n      <Icon as={COMPONENT_ICONS[icon] || COMPONENT_ICONS.cube} height={5} width={5} />\n    </Flex>\n  );\n}\n\nComponentIcon.defaultProps = {\n  isActive: false,\n  icon: 'Cube',\n};\n\nComponentIcon.propTypes = {\n  isActive: PropTypes.bool,\n  icon: PropTypes.string,\n};\n","/**\n *\n * ComponentCard\n *\n */\n\nimport React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { pxToRem } from '@strapi/helper-plugin';\nimport { Cross } from '@strapi/icons';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport useDataManager from '../../hooks/useDataManager';\n\nimport { ComponentIcon } from './ComponentIcon';\n\nconst CloseButton = styled(Box)`\n  position: absolute;\n  display: none;\n  top: 5px;\n  right: ${pxToRem(8)};\n\n  svg {\n    width: ${pxToRem(10)};\n    height: ${pxToRem(10)};\n\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\nconst ComponentBox = styled(Flex)`\n  width: ${pxToRem(140)};\n  height: ${pxToRem(80)};\n  position: relative;\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral100};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  max-width: 100%;\n\n  &.active,\n  &:focus,\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    background: ${({ theme }) => theme.colors.primary100};\n\n    ${CloseButton} {\n      display: block;\n    }\n\n    ${Typography} {\n      color: ${({ theme }) => theme.colors.primary600};\n    }\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nfunction ComponentCard({ component, dzName, index, isActive, isInDevelopmentMode, onClick }) {\n  const { modifiedData, removeComponentFromDynamicZone } = useDataManager();\n  const {\n    schema: { icon, displayName },\n  } = get(modifiedData, ['components', component], { schema: {} });\n\n  const onClose = (e) => {\n    e.stopPropagation();\n    removeComponentFromDynamicZone(dzName, index);\n  };\n\n  return (\n    <ComponentBox\n      alignItems=\"center\"\n      direction=\"column\"\n      className={isActive ? 'active' : ''}\n      borderRadius=\"borderRadius\"\n      justifyContent=\"center\"\n      paddingLeft={4}\n      paddingRight={4}\n      shrink={0}\n      onClick={onClick}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      cursor=\"pointer\"\n      aria-selected={isActive}\n      aria-controls={`dz-${dzName}-panel-${index}`}\n      id={`dz-${dzName}-tab-${index}`}\n    >\n      <ComponentIcon icon={icon} isActive={isActive} />\n\n      <Box marginTop={1} maxWidth=\"100%\">\n        <Typography variant=\"pi\" fontWeight=\"bold\" ellipsis>\n          {displayName}\n        </Typography>\n      </Box>\n\n      {isInDevelopmentMode && (\n        <CloseButton as=\"button\" onClick={onClose}>\n          <Cross />\n        </CloseButton>\n      )}\n    </ComponentBox>\n  );\n}\n\nComponentCard.defaultProps = {\n  component: null,\n  isActive: false,\n  isInDevelopmentMode: false,\n  onClick() {},\n};\n\nComponentCard.propTypes = {\n  component: PropTypes.string,\n  dzName: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  isActive: PropTypes.bool,\n  isInDevelopmentMode: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nexport default ComponentCard;\n","/**\n *\n * DynamicZoneList\n *\n */\n\n/* eslint-disable import/no-cycle */\nimport React, { useState } from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { pxToRem } from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport useDataManager from '../../hooks/useDataManager';\nimport getTrad from '../../utils/getTrad';\nimport ComponentCard from '../ComponentCard';\nimport ComponentList from '../ComponentList';\nimport Tr from '../Tr';\n\nconst StyledAddIcon = styled(Plus)`\n  width: ${pxToRem(32)};\n  height: ${pxToRem(32)};\n  padding: ${pxToRem(9)};\n  border-radius: ${pxToRem(64)};\n  background: ${({ theme }) => theme.colors.primary100};\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nconst FixedBox = styled(Box)`\n  height: ${pxToRem(90)};\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n`;\n\nconst ScrollableStack = styled(Flex)`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst ComponentContentBox = styled(Box)`\n  padding-top: ${pxToRem(90)};\n`;\n\nconst ComponentStack = styled(Flex)`\n  flex-shrink: 0;\n  width: ${pxToRem(140)};\n  height: ${pxToRem(80)};\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction DynamicZoneList({ customRowComponent, components, addComponent, name, targetUid }) {\n  const { isInDevelopmentMode } = useDataManager();\n  const [activeTab, setActiveTab] = useState(0);\n  const { formatMessage } = useIntl();\n\n  const toggle = (tab) => {\n    if (activeTab !== tab) {\n      setActiveTab(tab);\n    }\n  };\n\n  const handleClickAdd = () => {\n    addComponent(name);\n  };\n\n  return (\n    <Tr className=\"dynamiczone-row\" isFromDynamicZone>\n      <td colSpan={12}>\n        <FixedBox paddingLeft={8}>\n          <ScrollableStack gap={2}>\n            {isInDevelopmentMode && (\n              <button type=\"button\" onClick={handleClickAdd}>\n                <ComponentStack direction=\"column\" alignItems=\"stretch\" gap={1}>\n                  <StyledAddIcon />\n                  <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"primary600\">\n                    {formatMessage({\n                      id: getTrad('button.component.add'),\n                      defaultMessage: 'Add a component',\n                    })}\n                  </Typography>\n                </ComponentStack>\n              </button>\n            )}\n            <Flex role=\"tablist\" gap={2}>\n              {components.map((component, index) => {\n                return (\n                  <ComponentCard\n                    key={component}\n                    dzName={name}\n                    index={index}\n                    component={component}\n                    isActive={activeTab === index}\n                    isInDevelopmentMode={isInDevelopmentMode}\n                    onClick={() => toggle(index)}\n                  />\n                );\n              })}\n            </Flex>\n          </ScrollableStack>\n        </FixedBox>\n        <ComponentContentBox>\n          {components.map((component, index) => {\n            const props = {\n              customRowComponent,\n              component,\n            };\n\n            return (\n              <Box\n                id={`dz-${name}-panel-${index}`}\n                role=\"tabpanel\"\n                tabindex={0}\n                aria-labelledby={`dz-${name}-tab-${index}`}\n                key={component}\n                style={{ display: activeTab === index ? 'block' : 'none' }}\n              >\n                <table>\n                  <tbody>\n                    <ComponentList\n                      {...props}\n                      isFromDynamicZone\n                      targetUid={targetUid}\n                      key={component}\n                    />\n                  </tbody>\n                </table>\n              </Box>\n            );\n          })}\n        </ComponentContentBox>\n      </td>\n    </Tr>\n  );\n}\n\nDynamicZoneList.defaultProps = {\n  addComponent() {},\n  components: [],\n  customRowComponent: null,\n  name: null,\n};\n\nDynamicZoneList.propTypes = {\n  addComponent: PropTypes.func,\n  components: PropTypes.instanceOf(Array),\n  customRowComponent: PropTypes.func,\n  name: PropTypes.string,\n  targetUid: PropTypes.string.isRequired,\n};\n\nexport default DynamicZoneList;\n","import React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst IconBox = styled(Box)`\n  height: ${24 / 16}rem;\n  width: ${24 / 16}rem;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    height: ${10 / 16}rem;\n    width: ${10 / 16}rem;\n  }\n\n  svg path {\n    fill: ${({ theme, color }) => theme.colors[`${color}600`]};\n  }\n`;\n\nconst ButtonBox = styled(Box)`\n  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};\n  display: block;\n  width: 100%;\n  border: none;\n  position: relative;\n  left: -0.25rem;\n`;\n\nconst NestedTFooter = ({ children, icon, color, ...props }) => {\n  return (\n    <ButtonBox paddingBottom={4} paddingTop={4} as=\"button\" type=\"button\" {...props}>\n      <Flex>\n        <IconBox color={color} aria-hidden background={`${color}200`}>\n          {icon}\n        </IconBox>\n        <Box paddingLeft={3}>\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\n            {children}\n          </Typography>\n        </Box>\n      </Flex>\n    </ButtonBox>\n  );\n};\n\nNestedTFooter.propTypes = {\n  color: PropTypes.string.isRequired,\n  children: PropTypes.string.isRequired,\n  icon: PropTypes.node.isRequired,\n};\n\nexport default NestedTFooter;\n","/**\n *\n * Wrapper\n *\n */\nimport { Box } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nconst BoxWrapper = styled(Box)`\n  table {\n    width: 100%;\n    white-space: nowrap;\n  }\n\n  thead {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    tr {\n      border-top: 0;\n    }\n  }\n\n  tr {\n    border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    & td,\n    & th {\n      padding: ${({ theme }) => theme.spaces[4]};\n    }\n\n    & td:first-of-type,\n    & th:first-of-type {\n      padding: 0 ${({ theme }) => theme.spaces[1]};\n    }\n  }\n\n  th,\n  td {\n    vertical-align: middle;\n    text-align: left;\n    color: ${({ theme }) => theme.colors.neutral600};\n    outline-offset: -4px;\n  }\n`;\n\nexport default BoxWrapper;\n","/**\n *\n * List\n *\n */\n\n/* eslint-disable import/no-cycle */\nimport React from 'react';\n\nimport { Box, Button, Table, TFooter, Th, Thead, Tr, Typography } from '@strapi/design-system';\nimport { EmptyBodyTable, useTracking } from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useDataManager from '../../hooks/useDataManager';\nimport useFormModalNavigation from '../../hooks/useFormModalNavigation';\nimport getTrad from '../../utils/getTrad';\nimport ComponentList from '../ComponentList';\nimport DynamicZoneList from '../DynamicZoneList';\nimport NestedTFooter from '../NestedTFooter';\n\nimport BoxWrapper from './BoxWrapper';\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\nfunction List({\n  addComponentToDZ,\n  customRowComponent,\n  editTarget,\n  firstLoopComponentUid,\n  isFromDynamicZone,\n  isMain,\n  isNestedInDZComponent,\n  isSub,\n  items,\n  secondLoopComponentUid,\n  targetUid,\n}) {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { isInDevelopmentMode, modifiedData, isInContentTypeView } = useDataManager();\n\n  const { onOpenModalAddField } = useFormModalNavigation();\n  const onClickAddField = () => {\n    trackUsage('hasClickedCTBAddFieldBanner');\n\n    onOpenModalAddField({ forTarget: editTarget, targetUid });\n  };\n\n  if (!targetUid) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <EmptyBodyTable\n          colSpan={2}\n          content={{\n            id: getTrad('table.content.create-first-content-type'),\n            defaultMessage: 'Create your first Collection-Type',\n          }}\n        />\n      </Table>\n    );\n  }\n\n  if (items.length === 0 && isMain) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <EmptyBodyTable\n          action={\n            <Button onClick={onClickAddField} size=\"L\" startIcon={<Plus />} variant=\"secondary\">\n              {formatMessage({\n                id: getTrad('table.button.no-fields'),\n                defaultMessage: 'Add new field',\n              })}\n            </Button>\n          }\n          colSpan={2}\n          content={\n            isInContentTypeView\n              ? {\n                  id: getTrad('table.content.no-fields.collection-type'),\n                  defaultMessage: 'Add your first field to this Collection-Type',\n                }\n              : {\n                  id: getTrad('table.content.no-fields.component'),\n                  defaultMessage: 'Add your first field to this component',\n                }\n          }\n        />\n      </Table>\n    );\n  }\n\n  return (\n    <BoxWrapper>\n      <Box\n        paddingLeft={6}\n        paddingRight={isMain ? 6 : 0}\n        {...(isMain && { style: { overflowX: 'auto' } })}\n      >\n        <table>\n          {isMain && (\n            <thead>\n              <tr>\n                <th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                  </Typography>\n                </th>\n                <th colSpan=\"2\">\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n                  </Typography>\n                </th>\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {items.map((item) => {\n              const { type } = item;\n              const CustomRow = customRowComponent;\n\n              return (\n                <React.Fragment key={item.name}>\n                  <CustomRow\n                    {...item}\n                    isNestedInDZComponent={isNestedInDZComponent}\n                    targetUid={targetUid}\n                    editTarget={editTarget}\n                    firstLoopComponentUid={firstLoopComponentUid}\n                    isFromDynamicZone={isFromDynamicZone}\n                    secondLoopComponentUid={secondLoopComponentUid}\n                  />\n\n                  {type === 'component' && (\n                    <ComponentList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      targetUid={targetUid}\n                      isNestedInDZComponent={isFromDynamicZone}\n                      editTarget={editTarget}\n                      firstLoopComponentUid={firstLoopComponentUid}\n                    />\n                  )}\n\n                  {type === 'dynamiczone' && (\n                    <DynamicZoneList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      addComponent={addComponentToDZ}\n                      targetUid={targetUid}\n                    />\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      </Box>\n\n      {isMain && isInDevelopmentMode && (\n        <TFooter icon={<Plus />} onClick={onClickAddField}>\n          {formatMessage({\n            id: getTrad(\n              `form.button.add.field.to.${\n                modifiedData.contentType\n                  ? modifiedData.contentType.schema.kind\n                  : editTarget || 'collectionType'\n              }`\n            ),\n            defaultMessage: 'Add another field',\n          })}\n        </TFooter>\n      )}\n      {isSub && isInDevelopmentMode && (\n        <NestedTFooter\n          icon={<Plus />}\n          onClick={onClickAddField}\n          color={isFromDynamicZone ? 'primary' : 'neutral'}\n        >\n          {formatMessage({\n            id: getTrad(`form.button.add.field.to.component`),\n            defaultMessage: 'Add another field',\n          })}\n        </NestedTFooter>\n      )}\n    </BoxWrapper>\n  );\n}\n\nList.defaultProps = {\n  addComponentToDZ() {},\n  customRowComponent: null,\n  firstLoopComponentUid: null,\n  isFromDynamicZone: false,\n  isNestedInDZComponent: false,\n  isMain: false,\n  isSub: false,\n  items: [],\n  secondLoopComponentUid: null,\n  targetUid: null,\n};\n\nList.propTypes = {\n  addComponentToDZ: PropTypes.func,\n  customRowComponent: PropTypes.func,\n  editTarget: PropTypes.string.isRequired,\n  firstLoopComponentUid: PropTypes.string,\n  isFromDynamicZone: PropTypes.bool,\n  isNestedInDZComponent: PropTypes.bool,\n  isMain: PropTypes.bool,\n  items: PropTypes.instanceOf(Array),\n  secondLoopComponentUid: PropTypes.string,\n  targetUid: PropTypes.string,\n  isSub: PropTypes.bool,\n};\n\nexport default List;\n","import React from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledBox = styled(Box)`\n  position: absolute;\n  left: -1.125rem;\n  top: 0px;\n\n  &:before {\n    content: '';\n    width: ${4 / 16}rem;\n    height: ${12 / 16}rem;\n    background: ${({ theme, color }) => theme.colors[color]};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, color }) => theme.colors[color]};\n  }\n`;\n\nconst Curve = (props) => (\n  <StyledBox>\n    <Svg\n      width=\"20\"\n      height=\"23\"\n      viewBox=\"0 0 20 23\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n      />\n    </Svg>\n  </StyledBox>\n);\n\nCurve.propTypes = {\n  color: PropTypes.string.isRequired,\n};\n\nexport default Curve;\n","import upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\n\nconst UpperFirst = ({ content }) => upperFirst(content);\n\nUpperFirst.defaultProps = {\n  content: null,\n};\n\nUpperFirst.propTypes = {\n  content: PropTypes.string,\n};\n\nexport default UpperFirst;\n","/**\n *\n * Wrapper\n *\n */\n\nimport { Box } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nconst BoxWrapper = styled(Box)`\n  position: relative;\n`;\n\nexport default BoxWrapper;\n","import React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport getTrad from '../../utils/getTrad';\n\nconst DisplayedType = ({ type, customField, repeatable }) => {\n  const { formatMessage } = useIntl();\n\n  let readableType = type;\n\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\n    readableType = 'number';\n  } else if (['string'].includes(type)) {\n    readableType = 'text';\n  }\n\n  if (customField) {\n    return (\n      <Typography>\n        {formatMessage({\n          id: getTrad('attribute.customField'),\n          defaultMessage: 'Custom field',\n        })}\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography>\n      {formatMessage({\n        id: getTrad(`attribute.${readableType}`),\n        defaultMessage: type,\n      })}\n      &nbsp;\n      {repeatable &&\n        formatMessage({\n          id: getTrad('component.repeatable'),\n          defaultMessage: '(repeatable)',\n        })}\n    </Typography>\n  );\n};\n\nDisplayedType.defaultProps = {\n  customField: null,\n  repeatable: false,\n};\n\nDisplayedType.propTypes = {\n  type: PropTypes.string.isRequired,\n  customField: PropTypes.string,\n  repeatable: PropTypes.bool,\n};\n\nexport default DisplayedType;\n","import React, { memo } from 'react';\n\nimport { Box, Flex, IconButton, Typography } from '@strapi/design-system';\nimport { onRowClick, pxToRem, stopPropagation } from '@strapi/helper-plugin';\nimport { Lock, Pencil, Trash } from '@strapi/icons';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useDataManager from '../../hooks/useDataManager';\nimport Curve from '../../icons/Curve';\nimport getTrad from '../../utils/getTrad';\nimport AttributeIcon from '../AttributeIcon';\nimport UpperFist from '../UpperFirst';\n\nimport BoxWrapper from './BoxWrapper';\nimport DisplayedType from './DisplayedType';\n\nfunction ListRow({\n  configurable,\n  customField,\n  editTarget,\n  firstLoopComponentUid,\n  isFromDynamicZone,\n  name,\n  onClick,\n  relation,\n  repeatable,\n  secondLoopComponentUid,\n  target,\n  targetUid,\n  type,\n}) {\n  const { contentTypes, isInDevelopmentMode, removeAttribute } = useDataManager();\n  const { formatMessage } = useIntl();\n\n  const isMorph = type === 'relation' && relation.includes('morph');\n  const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(type) ? 'number' : type;\n\n  const contentType = get(contentTypes, [target], {});\n  const contentTypeFriendlyName = get(contentType, ['schema', 'displayName'], '');\n  const isPluginContentType = get(contentType, 'plugin');\n\n  const src = target ? 'relation' : ico;\n\n  const handleClick = () => {\n    if (isMorph) {\n      return;\n    }\n\n    if (configurable !== false) {\n      const attrType = type;\n\n      onClick(\n        // Tells where the attribute is located in the main modifiedData object : contentType, component or components\n        editTarget,\n        // main data type uid\n        secondLoopComponentUid || firstLoopComponentUid || targetUid,\n        // Name of the attribute\n        name,\n        // Type of the attribute\n        attrType,\n        customField\n      );\n    }\n  };\n  let loopNumber;\n\n  if (secondLoopComponentUid && firstLoopComponentUid) {\n    loopNumber = 2;\n  } else if (firstLoopComponentUid) {\n    loopNumber = 1;\n  } else {\n    loopNumber = 0;\n  }\n\n  return (\n    <BoxWrapper\n      as=\"tr\"\n      {...onRowClick({\n        fn: handleClick,\n        condition: isInDevelopmentMode && configurable && !isMorph,\n      })}\n    >\n      <td style={{ position: 'relative' }}>\n        {loopNumber !== 0 && <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />}\n        <Flex paddingLeft={2} gap={4}>\n          <AttributeIcon type={src} customField={customField} />\n          <Typography fontWeight=\"bold\">{name}</Typography>\n        </Flex>\n      </td>\n      <td>\n        {target ? (\n          <Typography>\n            {formatMessage({\n              id: getTrad(\n                `modelPage.attribute.${isMorph ? 'relation-polymorphic' : 'relationWith'}`\n              ),\n              defaultMessage: 'Relation with',\n            })}\n            &nbsp;\n            <span style={{ fontStyle: 'italic' }}>\n              <UpperFist content={contentTypeFriendlyName} />\n              &nbsp;\n              {isPluginContentType &&\n                `(${formatMessage({\n                  id: getTrad(`from`),\n                  defaultMessage: 'from',\n                })}: ${isPluginContentType})`}\n            </span>\n          </Typography>\n        ) : (\n          <DisplayedType type={type} customField={customField} repeatable={repeatable} />\n        )}\n      </td>\n      <td>\n        {isInDevelopmentMode ? (\n          <Flex justifyContent=\"flex-end\" {...stopPropagation}>\n            {configurable ? (\n              <Flex gap={1}>\n                {!isMorph && (\n                  <IconButton\n                    onClick={handleClick}\n                    label={`${formatMessage({\n                      id: 'app.utils.edit',\n                      defaultMessage: 'Edit',\n                    })} ${name}`}\n                    noBorder\n                    icon={<Pencil />}\n                  />\n                )}\n                <IconButton\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeAttribute(\n                      editTarget,\n                      name,\n                      secondLoopComponentUid || firstLoopComponentUid || ''\n                    );\n                  }}\n                  label={`${formatMessage({\n                    id: 'global.delete',\n                    defaultMessage: 'Delete',\n                  })} ${name}`}\n                  noBorder\n                  icon={<Trash />}\n                />\n              </Flex>\n            ) : (\n              <Lock />\n            )}\n          </Flex>\n        ) : (\n          /*\n            In production mode the edit icons aren't visible, therefore\n            we need to reserve the same space, otherwise the height of the\n            row might collapse, leading to bad positioned curve icons\n          */\n          <Box height={pxToRem(32)} />\n        )}\n      </td>\n    </BoxWrapper>\n  );\n}\n\nListRow.defaultProps = {\n  configurable: true,\n  customField: null,\n  firstLoopComponentUid: null,\n  isFromDynamicZone: false,\n  onClick() {},\n  relation: '',\n  repeatable: false,\n  secondLoopComponentUid: null,\n  target: null,\n  targetUid: null,\n  type: null,\n};\n\nListRow.propTypes = {\n  configurable: PropTypes.bool,\n  customField: PropTypes.string,\n  editTarget: PropTypes.string.isRequired,\n  firstLoopComponentUid: PropTypes.string,\n  isFromDynamicZone: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  relation: PropTypes.string,\n  repeatable: PropTypes.bool,\n  secondLoopComponentUid: PropTypes.string,\n  target: PropTypes.string,\n  targetUid: PropTypes.string,\n  type: PropTypes.string,\n};\n\nexport default memo(ListRow);\nexport { ListRow };\n","const getAttributeDisplayedType = (type) => {\n  let displayedType;\n\n  switch (type) {\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      displayedType = 'date';\n      break;\n    case 'integer':\n    case 'biginteger':\n    case 'decimal':\n    case 'float':\n      displayedType = 'number';\n      break;\n    case 'string':\n    case 'text':\n      displayedType = 'text';\n      break;\n    case '':\n      displayedType = 'relation';\n      break;\n    default:\n      displayedType = type;\n  }\n\n  return displayedType;\n};\n\nexport default getAttributeDisplayedType;\n","import React, { memo } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { CheckPermissions } from '@strapi/helper-plugin';\nimport { Layer } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nconst cmPermissions = {\n  collectionTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.collection-types.configure-view',\n      subject: null,\n    },\n  ],\n  componentsConfigurations: [\n    {\n      action: 'plugin::content-manager.components.configure-layout',\n      subject: null,\n    },\n  ],\n  singleTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.single-types.configure-view',\n      subject: null,\n    },\n  ],\n};\n\nconst LinkToCMSettingsView = ({\n  disabled,\n  isTemporary,\n  isInContentTypeView,\n  contentTypeKind,\n  targetUid,\n}) => {\n  const { formatMessage } = useIntl();\n  const { push } = useHistory();\n  const { collectionTypesConfigurations, componentsConfigurations, singleTypesConfigurations } =\n    cmPermissions;\n  const label = formatMessage({\n    id: 'content-type-builder.form.button.configure-view',\n    defaultMessage: 'Configure the view',\n  });\n  let permissionsToApply = collectionTypesConfigurations;\n\n  const handleClick = () => {\n    if (isTemporary) {\n      return false;\n    }\n\n    if (isInContentTypeView) {\n      push(`/content-manager/collectionType/${targetUid}/configurations/edit`);\n    } else {\n      push(`/content-manager/components/${targetUid}/configurations/edit`);\n    }\n\n    return false;\n  };\n\n  if (isInContentTypeView && contentTypeKind === 'singleType') {\n    permissionsToApply = singleTypesConfigurations;\n  }\n\n  if (!isInContentTypeView) {\n    permissionsToApply = componentsConfigurations;\n  }\n\n  return (\n    <CheckPermissions permissions={permissionsToApply}>\n      <Button\n        startIcon={<Layer />}\n        variant=\"tertiary\"\n        onClick={handleClick}\n        disabled={isTemporary || disabled}\n      >\n        {label}\n      </Button>\n    </CheckPermissions>\n  );\n};\n\nLinkToCMSettingsView.defaultProps = {\n  contentTypeKind: 'collectionType',\n  isInContentTypeView: true,\n  isTemporary: false,\n  targetUid: '',\n};\n\nLinkToCMSettingsView.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  contentTypeKind: PropTypes.string,\n  isInContentTypeView: PropTypes.bool,\n  isTemporary: PropTypes.bool,\n  targetUid: PropTypes.string,\n};\n\nexport default memo(LinkToCMSettingsView);\n","import React from 'react';\n\nimport { Box, Button, ContentLayout, Flex, HeaderLayout } from '@strapi/design-system';\nimport { Link, useTracking } from '@strapi/helper-plugin';\nimport { ArrowLeft, Check, Pencil, Plus } from '@strapi/icons';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { Prompt, useRouteMatch } from 'react-router-dom';\n\nimport List from '../../components/List';\nimport ListRow from '../../components/ListRow';\nimport useDataManager from '../../hooks/useDataManager';\nimport useFormModalNavigation from '../../hooks/useFormModalNavigation';\nimport getAttributeDisplayedType from '../../utils/getAttributeDisplayedType';\nimport getTrad from '../../utils/getTrad';\n\nimport LinkToCMSettingsView from './LinkToCMSettingsView';\n\n/* eslint-disable indent */\n\nconst ListView = () => {\n  const { initialData, modifiedData, isInDevelopmentMode, isInContentTypeView, submitData } =\n    useDataManager();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const match = useRouteMatch('/plugins/content-type-builder/:kind/:currentUID');\n\n  const {\n    onOpenModalAddComponentsToDZ,\n    onOpenModalAddField,\n    onOpenModalEditField,\n    onOpenModalEditSchema,\n    onOpenModalEditCustomField,\n  } = useFormModalNavigation();\n\n  const firstMainDataPath = isInContentTypeView ? 'contentType' : 'component';\n  const mainDataTypeAttributesPath = [firstMainDataPath, 'schema', 'attributes'];\n  const targetUid = get(modifiedData, [firstMainDataPath, 'uid']);\n  const isTemporary = get(modifiedData, [firstMainDataPath, 'isTemporary'], false);\n  const contentTypeKind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], null);\n\n  const attributes = get(modifiedData, mainDataTypeAttributesPath, []);\n  const isFromPlugin = has(initialData, [firstMainDataPath, 'plugin']);\n  const hasModelBeenModified = !isEqual(modifiedData, initialData);\n\n  const forTarget = isInContentTypeView ? 'contentType' : 'component';\n\n  const handleClickAddComponentToDZ = (dynamicZoneTarget) => {\n    onOpenModalAddComponentsToDZ({ dynamicZoneTarget, targetUid });\n  };\n\n  const handleClickEditField = async (forTarget, targetUid, attributeName, type, customField) => {\n    const attributeType = getAttributeDisplayedType(type);\n    const step = type === 'component' ? '2' : null;\n\n    if (customField) {\n      onOpenModalEditCustomField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        customFieldUid: customField,\n      });\n    } else {\n      onOpenModalEditField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        step,\n      });\n    }\n  };\n\n  let label = get(modifiedData, [firstMainDataPath, 'schema', 'displayName'], '');\n  const kind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], '');\n\n  const isCreatingFirstContentType = match?.params.currentUID === 'create-content-type';\n\n  if (!label && isCreatingFirstContentType) {\n    label = formatMessage({\n      id: getTrad('button.model.create'),\n      defaultMessage: 'Create new collection type',\n    });\n  }\n\n  const onEdit = () => {\n    const contentType = kind || firstMainDataPath;\n\n    if (contentType === 'collectionType') {\n      trackUsage('willEditNameOfContentType');\n    }\n    if (contentType === 'singleType') {\n      trackUsage('willEditNameOfSingleType');\n    }\n\n    onOpenModalEditSchema({\n      modalType: firstMainDataPath,\n      forTarget: firstMainDataPath,\n      targetUid,\n      kind: contentType,\n    });\n  };\n\n  return (\n    <>\n      <Prompt\n        message={(location) =>\n          location.hash === '#back' ? false : formatMessage({ id: getTrad('prompt.unsaved') })\n        }\n        when={hasModelBeenModified}\n      />\n      <HeaderLayout\n        id=\"title\"\n        primaryAction={\n          isInDevelopmentMode && (\n            <Flex gap={2}>\n              {/* DON'T display the add field button when the content type has not been created */}\n              {!isCreatingFirstContentType && (\n                <Button\n                  startIcon={<Plus />}\n                  variant=\"secondary\"\n                  onClick={() => {\n                    onOpenModalAddField({ forTarget, targetUid });\n                  }}\n                >\n                  {formatMessage({\n                    id: getTrad('button.attributes.add.another'),\n                    defaultMessage: 'Add another field',\n                  })}\n                </Button>\n              )}\n              <Button\n                startIcon={<Check />}\n                onClick={() => submitData()}\n                type=\"submit\"\n                disabled={isEqual(modifiedData, initialData)}\n              >\n                {formatMessage({\n                  id: 'global.save',\n                  defaultMessage: 'Save',\n                })}\n              </Button>\n            </Flex>\n          )\n        }\n        secondaryAction={\n          isInDevelopmentMode &&\n          !isFromPlugin &&\n          !isCreatingFirstContentType && (\n            <Button startIcon={<Pencil />} variant=\"tertiary\" onClick={onEdit}>\n              {formatMessage({\n                id: 'app.utils.edit',\n                defaultMessage: 'Edit',\n              })}\n            </Button>\n          )\n        }\n        title={upperFirst(label)}\n        subtitle={formatMessage({\n          id: getTrad('listView.headerLayout.description'),\n          defaultMessage: 'Build the data architecture of your content',\n        })}\n        navigationAction={\n          <Link startIcon={<ArrowLeft />} to=\"/plugins/content-type-builder/\">\n            {formatMessage({\n              id: 'global.back',\n              defaultMessage: 'Back',\n            })}\n          </Link>\n        }\n      />\n      <ContentLayout>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n          <Flex justifyContent=\"flex-end\">\n            <Flex gap={2}>\n              <LinkToCMSettingsView\n                key=\"link-to-cm-settings-view\"\n                targetUid={targetUid}\n                isTemporary={isTemporary}\n                isInContentTypeView={isInContentTypeView}\n                contentTypeKind={contentTypeKind}\n                disabled={isCreatingFirstContentType}\n              />\n            </Flex>\n          </Flex>\n          <Box background=\"neutral0\" shadow=\"filterShadow\" hasRadius>\n            <List\n              items={attributes}\n              customRowComponent={(props) => <ListRow {...props} onClick={handleClickEditField} />}\n              addComponentToDZ={handleClickAddComponentToDZ}\n              targetUid={targetUid}\n              editTarget={forTarget}\n              isMain\n            />\n          </Box>\n        </Flex>\n      </ContentLayout>\n    </>\n  );\n};\n\nexport default ListView;\n"],"names":["styled","pxToRem","useDataManager","get","jsx","PropTypes","Flex","Icon","COMPONENT_ICONS","Box","Typography","index","jsxs","Cross","Plus","useState","useIntl","getTrad","createElement","BoxWrapper","useTracking","useFormModalNavigation","Table","Thead","Tr","Th","EmptyBodyTable","Button","React","TFooter","upperFirst","onRowClick","AttributeIcon","UpperFist","stopPropagation","IconButton","Pencil","Trash","Lock","memo","useHistory","CheckPermissions","Layer","useRouteMatch","has","isEqual","forTarget","targetUid","Fragment","Prompt","HeaderLayout","Check","Link","ArrowLeft","ContentLayout","LinkToCMSettingsView","ListRow"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAM,KAAKA,gBAAO,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAWKC,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,iBAKjBA,aAAAA,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOjB,CAAC,EAAE,mBAAmB,sBAAsB,YAAY;AACxD,MAAI,sBAAsB;AACjB,WAAA,qBAAqB,MAAM,OAAO,UAAU;AAAA,EACrD;AAEA,MAAI,mBAAmB;AACd,WAAA,qBAAqB,MAAM,OAAO,UAAU;AAAA,EACrD;AAEO,SAAA,eAAe,MAAM,OAAO,UAAU;AAC/C,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACtBT,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACK,QAAA,EAAE,iBAAiBC,MAAAA;AACnB,QAAA;AAAA,IACJ,QAAQ,EAAE,WAAW;AAAA,MACnBC,aAAI,QAAA,cAAc,CAAC,cAAc,SAAS,GAAG;AAAA,IAC/C,QAAQ,EAAE,YAAY,GAAG;AAAA,EAAA,CAC1B;AAGC,SAAAC,2BAAA,IAAC,MAAG,sBAAsB,mBAAmB,WAAU,iBACrD,UAAAA,2BAAAA,IAAC,MAAG,EAAA,SAAS,IACX,UAAAA,2BAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA,OAAO;AAAA,MACP,WAAW;AAAA,MACX,uBAAuB,yBAAyB;AAAA,MAChD,YAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA,OAAK;AAAA,MACL,wBAAwB,wBAAwB,YAAY;AAAA,IAAA;AAAA,EAAA,EAEhE,CAAA,EACF,CAAA;AAEJ;AAEA,cAAc,eAAe;AAAA,EAC3B,WAAW;AAAA,EACX,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,uBAAuB;AACzB;AAEA,cAAc,YAAY;AAAA,EACxB,WAAWC,mBAAU,QAAA;AAAA,EACrB,oBAAoBA,mBAAU,QAAA;AAAA,EAC9B,uBAAuBA,mBAAU,QAAA;AAAA,EACjC,mBAAmBA,mBAAU,QAAA;AAAA,EAC7B,uBAAuBA,mBAAU,QAAA;AACnC;ACvDO,SAAS,cAAc,EAAE,UAAU,QAAQ;AAE9C,SAAAD,2BAAA;AAAA,IAACE,aAAA;AAAA,IAAA;AAAA,MACC,YAAW;AAAA,MACX,YAAY,WAAW,eAAe;AAAA,MACtC,gBAAe;AAAA,MACf,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,cAAa;AAAA,MAEb,UAAAF,2BAAAA,IAACG,aAAAA,MAAK,EAAA,IAAIC,MAAgB,gBAAA,IAAI,KAAKA,MAAA,gBAAgB,MAAM,QAAQ,GAAG,OAAO,EAAG,CAAA;AAAA,IAAA;AAAA,EAAA;AAGpF;AAEA,cAAc,eAAe;AAAA,EAC3B,UAAU;AAAA,EACV,MAAM;AACR;AAEA,cAAc,YAAY;AAAA,EACxB,UAAUH,mBAAU,QAAA;AAAA,EACpB,MAAMA,mBAAU,QAAA;AAClB;ACXA,MAAM,cAAcL,gBAAAA,QAAOS,aAAAA,GAAG;AAAA;AAAA;AAAA;AAAA,WAInBR,aAAAA,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,aAGRA,aAAAA,QAAQ,EAAE,CAAC;AAAA,cACVA,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAAA;AAAA,cAGX,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAKpD,MAAM,eAAeD,gBAAAA,QAAOM,aAAAA,IAAI;AAAA,WACrBL,aAAAA,QAAQ,GAAG,CAAC;AAAA,YACXA,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAAA,sBAED,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,gBAC5C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,mBACnC,CAAC,EAAE,YAAY,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAM5B,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,kBAC5C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA,MAElD,WAAW;AAAA;AAAA;AAAA;AAAA,MAIXS,uBAAU;AAAA,eACD,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKjC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA,eAC3C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kBAInC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAOxD,SAAS,cAAc,EAAE,WAAW,QAAA,OAAQC,SAAO,UAAU,qBAAqB,WAAW;AAC3F,QAAM,EAAE,cAAc,+BAA+B,IAAIT,MAAe,eAAA;AAClE,QAAA;AAAA,IACJ,QAAQ,EAAE,MAAM,YAAY;AAAA,EAAA,IAC1BC,aAAI,QAAA,cAAc,CAAC,cAAc,SAAS,GAAG,EAAE,QAAQ,CAAC,EAAA,CAAG;AAEzD,QAAA,UAAU,CAAC,MAAM;AACrB,MAAE,gBAAgB;AAClB,mCAA+B,QAAQQ,OAAK;AAAA,EAAA;AAI5C,SAAAC,2BAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,YAAW;AAAA,MACX,WAAU;AAAA,MACV,WAAW,WAAW,WAAW;AAAA,MACjC,cAAa;AAAA,MACb,gBAAe;AAAA,MACf,aAAa;AAAA,MACb,cAAc;AAAA,MACd,QAAQ;AAAA,MACR;AAAA,MACA,MAAK;AAAA,MACL,UAAU,WAAW,IAAI;AAAA,MACzB,QAAO;AAAA,MACP,iBAAe;AAAA,MACf,iBAAe,MAAM,MAAM,UAAUD,OAAK;AAAA,MAC1C,IAAI,MAAM,MAAM,QAAQA,OAAK;AAAA,MAE7B,UAAA;AAAA,QAACP,2BAAAA,IAAA,eAAA,EAAc,MAAY,SAAoB,CAAA;AAAA,QAE9CA,+BAAAK,aAAAA,KAAA,EAAI,WAAW,GAAG,UAAS,QAC1B,UAAAL,2BAAAA,IAACM,aAAW,YAAA,EAAA,SAAQ,MAAK,YAAW,QAAO,UAAQ,MAChD,sBACH,CAAA,GACF;AAAA,QAEC,sDACE,aAAY,EAAA,IAAG,UAAS,SAAS,SAChC,UAACN,2BAAA,IAAAS,aAAA,CAAA,CAAM,EACT,CAAA;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAIR;AAEA,cAAc,eAAe;AAAA,EAC3B,WAAW;AAAA,EACX,UAAU;AAAA,EACV,qBAAqB;AAAA,EACrB,UAAU;AAAA,EAAC;AACb;AAEA,cAAc,YAAY;AAAA,EACxB,WAAWR,mBAAU,QAAA;AAAA,EACrB,QAAQA,mBAAAA,QAAU,OAAO;AAAA,EACzB,OAAOA,mBAAAA,QAAU,OAAO;AAAA,EACxB,UAAUA,mBAAU,QAAA;AAAA,EACpB,qBAAqBA,mBAAU,QAAA;AAAA,EAC/B,SAASA,mBAAU,QAAA;AACrB;AC9GA,MAAM,gBAAgBL,gBAAAA,QAAOc,MAAAA,IAAI;AAAA,WACtBb,aAAAA,QAAQ,EAAE,CAAC;AAAA,YACVA,aAAAA,QAAQ,EAAE,CAAC;AAAA,aACVA,aAAAA,QAAQ,CAAC,CAAC;AAAA,mBACJA,aAAAA,QAAQ,EAAE,CAAC;AAAA,gBACd,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA,YAE1C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAIlD,MAAM,WAAWD,gBAAAA,QAAOS,aAAAA,GAAG;AAAA,YACfR,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvB,MAAM,kBAAkBD,gBAAAA,QAAOM,aAAAA,IAAI;AAAA;AAAA;AAAA;AAKnC,MAAM,sBAAsBN,gBAAAA,QAAOS,aAAAA,GAAG;AAAA,iBACrBR,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAG5B,MAAM,iBAAiBD,gBAAAA,QAAOM,aAAAA,IAAI;AAAA;AAAA,WAEvBL,aAAAA,QAAQ,GAAG,CAAC;AAAA,YACXA,aAAAA,QAAQ,EAAE,CAAC;AAAA;AAAA;AAAA;AAKvB,SAAS,gBAAgB,EAAE,oBAAoB,YAAY,cAAc,MAAM,aAAa;AACpF,QAAA,EAAE,wBAAwBC,MAAAA;AAChC,QAAM,CAAC,WAAW,YAAY,IAAIa,eAAS,CAAC;AACtC,QAAA,EAAE,kBAAkBC,UAAAA;AAEpB,QAAA,SAAS,CAAC,QAAQ;AACtB,QAAI,cAAc,KAAK;AACrB,mBAAa,GAAG;AAAA,IAClB;AAAA,EAAA;AAGF,QAAM,iBAAiB,MAAM;AAC3B,iBAAa,IAAI;AAAA,EAAA;AAIjB,SAAAZ,2BAAA,IAAC,MAAG,WAAU,mBAAkB,mBAAiB,MAC/C,UAAAQ,2BAAA,KAAC,MAAG,EAAA,SAAS,IACX,UAAA;AAAA,IAAAR,2BAAAA,IAAC,YAAS,aAAa,GACrB,UAACQ,2BAAA,KAAA,iBAAA,EAAgB,KAAK,GACnB,UAAA;AAAA,MAAA,uBACER,2BAAA,IAAA,UAAA,EAAO,MAAK,UAAS,SAAS,gBAC7B,UAACQ,2BAAA,KAAA,gBAAA,EAAe,WAAU,UAAS,YAAW,WAAU,KAAK,GAC3D,UAAA;AAAA,QAAAR,2BAAA,IAAC,eAAc,EAAA;AAAA,QACfA,2BAAAA,IAACM,2BAAW,SAAQ,MAAK,YAAW,QAAO,WAAU,cAClD,UAAc,cAAA;AAAA,UACb,IAAIO,cAAQ,sBAAsB;AAAA,UAClC,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,MAEFb,2BAAAA,IAACE,aAAK,MAAA,EAAA,MAAK,WAAU,KAAK,GACvB,UAAW,WAAA,IAAI,CAAC,WAAWK,WAAU;AAElC,eAAAP,2BAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,QAAQ;AAAA,YACR,OAAAO;AAAA,YACA;AAAA,YACA,UAAU,cAAcA;AAAA,YACxB;AAAA,YACA,SAAS,MAAM,OAAOA,MAAK;AAAA,UAAA;AAAA,UANtB;AAAA,QAAA;AAAA,MASV,CAAA,GACH;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,mCACC,qBACE,EAAA,UAAA,WAAW,IAAI,CAAC,WAAWA,WAAU;AACpC,YAAM,QAAQ;AAAA,QACZ;AAAA,QACA;AAAA,MAAA;AAIA,aAAAP,2BAAA;AAAA,QAACK,aAAA;AAAA,QAAA;AAAA,UACC,IAAI,MAAM,IAAI,UAAUE,MAAK;AAAA,UAC7B,MAAK;AAAA,UACL,UAAU;AAAA,UACV,mBAAiB,MAAM,IAAI,QAAQA,MAAK;AAAA,UAExC,OAAO,EAAE,SAAS,cAAcA,SAAQ,UAAU,OAAO;AAAA,UAEzD,UAAAP,2BAAAA,IAAC,SACC,EAAA,UAAAA,2BAAAA,IAAC,SACC,EAAA,UAAAc,sBAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACE,GAAG;AAAA,cACJ,mBAAiB;AAAA,cACjB;AAAA,cACA,KAAK;AAAA,YAAA;AAAA,aAET,EACF,CAAA;AAAA,QAAA;AAAA,QAZK;AAAA,MAAA;AAAA,IAeV,CAAA,GACH;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AAEA,gBAAgB,eAAe;AAAA,EAC7B,eAAe;AAAA,EAAC;AAAA,EAChB,YAAY,CAAC;AAAA,EACb,oBAAoB;AAAA,EACpB,MAAM;AACR;AAEA,gBAAgB,YAAY;AAAA,EAC1B,cAAcb,mBAAU,QAAA;AAAA,EACxB,YAAYA,mBAAAA,QAAU,WAAW,KAAK;AAAA,EACtC,oBAAoBA,mBAAU,QAAA;AAAA,EAC9B,MAAMA,mBAAU,QAAA;AAAA,EAChB,WAAWA,mBAAAA,QAAU,OAAO;AAC9B;ACtJA,MAAM,UAAUL,gBAAAA,QAAOS,aAAAA,GAAG;AAAA,YACd,KAAK,EAAE;AAAA,WACR,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAOJ,KAAK,EAAE;AAAA,aACR,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA,YAIR,CAAC,EAAE,OAAO,YAAY,MAAM,OAAO,GAAG,KAAK,KAAK,CAAC;AAAA;AAAA;AAI7D,MAAM,YAAYT,gBAAAA,QAAOS,aAAAA,GAAG;AAAA,uBACL,CAAC,EAAE,YAAY,MAAM,YAAY,IAAI,CAAC,EAAE,MAAA,MAAY,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ7F,MAAM,gBAAgB,CAAC,EAAE,UAAU,MAAM,OAAO,GAAG,YAAY;AAC7D,SACGL,2BAAAA,IAAA,WAAA,EAAU,eAAe,GAAG,YAAY,GAAG,IAAG,UAAS,MAAK,UAAU,GAAG,OACxE,0CAACE,aAAAA,MACC,EAAA,UAAA;AAAA,IAACF,2BAAAA,IAAA,SAAA,EAAQ,OAAc,eAAW,MAAC,YAAY,GAAG,KAAK,OACpD,UACH,KAAA,CAAA;AAAA,IACCA,+BAAAK,aAAAA,KAAA,EAAI,aAAa,GAChB,yCAACC,aAAW,YAAA,EAAA,SAAQ,MAAK,YAAW,QAAO,WAAW,GAAG,KAAK,OAC3D,SACH,CAAA,GACF;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AAEA,cAAc,YAAY;AAAA,EACxB,OAAOL,mBAAAA,QAAU,OAAO;AAAA,EACxB,UAAUA,mBAAAA,QAAU,OAAO;AAAA,EAC3B,MAAMA,mBAAAA,QAAU,KAAK;AACvB;AC9CA,MAAMc,eAAanB,gBAAAA,QAAOS,aAAAA,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAOE,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAQzC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,iBAIjD,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,mBAK5B,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAQpC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;ACbnD,SAAS,KAAK;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACK,QAAA,EAAE,kBAAkBO,UAAAA;AACpB,QAAA,EAAE,eAAeI,aAAAA;AACvB,QAAM,EAAE,qBAAqB,cAAc,wBAAwBlB,MAAe,eAAA;AAE5E,QAAA,EAAE,wBAAwBmB,MAAAA;AAChC,QAAM,kBAAkB,MAAM;AAC5B,eAAW,6BAA6B;AAExC,wBAAoB,EAAE,WAAW,YAAY,UAAW,CAAA;AAAA,EAAA;AAG1D,MAAI,CAAC,WAAW;AACd,WACGT,2BAAAA,KAAAU,aAAAA,OAAA,EAAM,UAAU,GAAG,UAAU,GAC5B,UAAA;AAAA,MAAClB,2BAAA,IAAAmB,aAAA,OAAA,EACC,0CAACC,aAAAA,IACC,EAAA,UAAA;AAAA,QAAApB,+BAACqB,aAAAA,IACC,EAAA,UAAArB,2BAAAA,IAACM,aAAAA,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,uCACCe,aAAAA,IACC,EAAA,UAAArB,2BAAAA,IAACM,aAAAA,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,MACAN,2BAAA;AAAA,QAACsB,aAAA;AAAA,QAAA;AAAA,UACC,SAAS;AAAA,UACT,SAAS;AAAA,YACP,IAAIT,cAAQ,yCAAyC;AAAA,YACrD,gBAAgB;AAAA,UAClB;AAAA,QAAA;AAAA,MACF;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEI,MAAA,MAAM,WAAW,KAAK,QAAQ;AAChC,WACGL,2BAAAA,KAAAU,aAAAA,OAAA,EAAM,UAAU,GAAG,UAAU,GAC5B,UAAA;AAAA,MAAClB,2BAAA,IAAAmB,aAAA,OAAA,EACC,0CAACC,aAAAA,IACC,EAAA,UAAA;AAAA,QAAApB,+BAACqB,aAAAA,IACC,EAAA,UAAArB,2BAAAA,IAACM,aAAAA,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,uCACCe,aAAAA,IACC,EAAA,UAAArB,2BAAAA,IAACM,aAAAA,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,MAAA,EAAA,CACF,EACF,CAAA;AAAA,MACAN,2BAAA;AAAA,QAACsB,aAAA;AAAA,QAAA;AAAA,UACC,QACEtB,2BAAA,IAACuB,aAAO,QAAA,EAAA,SAAS,iBAAiB,MAAK,KAAI,WAAYvB,2BAAA,IAAAU,MAAA,MAAA,EAAK,GAAI,SAAQ,aACrE,UAAc,cAAA;AAAA,YACb,IAAIG,cAAQ,wBAAwB;AAAA,YACpC,gBAAgB;AAAA,UACjB,CAAA,GACH;AAAA,UAEF,SAAS;AAAA,UACT,SACE,sBACI;AAAA,YACE,IAAIA,cAAQ,yCAAyC;AAAA,YACrD,gBAAgB;AAAA,UAAA,IAElB;AAAA,YACE,IAAIA,cAAQ,mCAAmC;AAAA,YAC/C,gBAAgB;AAAA,UAClB;AAAA,QAAA;AAAA,MAER;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEA,yCACGE,cACC,EAAA,UAAA;AAAA,IAAAf,2BAAA;AAAA,MAACK,aAAA;AAAA,MAAA;AAAA,QACC,aAAa;AAAA,QACb,cAAc,SAAS,IAAI;AAAA,QAC1B,GAAI,UAAU,EAAE,OAAO,EAAE,WAAW,SAAS;AAAA,QAE9C,0CAAC,SACE,EAAA,UAAA;AAAA,UACC,UAAAL,2BAAA,IAAC,SACC,EAAA,UAAAQ,gCAAC,MACC,EAAA,UAAA;AAAA,YAAAR,+BAAC,MACC,EAAA,UAAAA,2BAAAA,IAACM,aAAAA,YAAW,EAAA,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,2CACC,MAAG,EAAA,SAAQ,KACV,UAACN,+BAAAM,aAAAA,YAAA,EAAW,SAAQ,SAAQ,WAAU,cACnC,UAAA,cAAc,EAAE,IAAI,eAAe,gBAAgB,OAAO,CAAC,EAC9D,CAAA,GACF;AAAA,UAAA,EAAA,CACF,EACF,CAAA;AAAA,UAEDN,2BAAA,IAAA,SAAA,EACE,UAAM,MAAA,IAAI,CAAC,SAAS;AACb,kBAAA,EAAE,KAAS,IAAA;AACjB,kBAAM,YAAY;AAGhB,mBAAAQ,gCAACgB,eAAAA,QAAM,UAAN,EACC,UAAA;AAAA,cAAAxB,2BAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACE,GAAG;AAAA,kBACJ;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBAAA;AAAA,cACF;AAAA,cAEC,SAAS,eACRA,2BAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACE,GAAG;AAAA,kBACJ;AAAA,kBACA;AAAA,kBACA,uBAAuB;AAAA,kBACvB;AAAA,kBACA;AAAA,gBAAA;AAAA,cACF;AAAA,cAGD,SAAS,iBACRA,2BAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACE,GAAG;AAAA,kBACJ;AAAA,kBACA,cAAc;AAAA,kBACd;AAAA,gBAAA;AAAA,cACF;AAAA,YAAA,KA5BiB,KAAK,IA8B1B;AAAA,UAEH,CAAA,GACH;AAAA,QAAA,GACF;AAAA,MAAA;AAAA,IACF;AAAA,IAEC,UAAU,uBACTA,2BAAAA,IAACyB,aAAQ,SAAA,EAAA,qCAAOf,MAAK,MAAA,CAAA,CAAA,GAAI,SAAS,iBAC/B,UAAc,cAAA;AAAA,MACb,IAAIG,MAAA;AAAA,QACF,4BACE,aAAa,cACT,aAAa,YAAY,OAAO,OAChC,cAAc,gBACpB;AAAA,MACF;AAAA,MACA,gBAAgB;AAAA,IACjB,CAAA,GACH;AAAA,IAED,SAAS,uBACRb,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,qCAAOU,MAAK,MAAA,EAAA;AAAA,QACZ,SAAS;AAAA,QACT,OAAO,oBAAoB,YAAY;AAAA,QAEtC,UAAc,cAAA;AAAA,UACb,IAAIG,MAAAA,QAAQ,oCAAoC;AAAA,UAChD,gBAAgB;AAAA,QAAA,CACjB;AAAA,MAAA;AAAA,IACH;AAAA,EAEJ,EAAA,CAAA;AAEJ;AAEA,KAAK,eAAe;AAAA,EAClB,mBAAmB;AAAA,EAAC;AAAA,EACpB,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,uBAAuB;AAAA,EACvB,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,OAAO,CAAC;AAAA,EACR,wBAAwB;AAAA,EACxB,WAAW;AACb;AAEA,KAAK,YAAY;AAAA,EACf,kBAAkBZ,mBAAU,QAAA;AAAA,EAC5B,oBAAoBA,mBAAU,QAAA;AAAA,EAC9B,YAAYA,mBAAAA,QAAU,OAAO;AAAA,EAC7B,uBAAuBA,mBAAU,QAAA;AAAA,EACjC,mBAAmBA,mBAAU,QAAA;AAAA,EAC7B,uBAAuBA,mBAAU,QAAA;AAAA,EACjC,QAAQA,mBAAU,QAAA;AAAA,EAClB,OAAOA,mBAAAA,QAAU,WAAW,KAAK;AAAA,EACjC,wBAAwBA,mBAAU,QAAA;AAAA,EAClC,WAAWA,mBAAU,QAAA;AAAA,EACrB,OAAOA,mBAAU,QAAA;AACnB;AC9OA,MAAM,YAAYL,gBAAAA,QAAOS,aAAAA,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAOf,IAAI,EAAE;AAAA,cACL,KAAK,EAAE;AAAA,kBACH,CAAC,EAAE,OAAO,MAAA,MAAY,MAAM,OAAO,KAAK,CAAC;AAAA;AAAA;AAAA;AAK3D,MAAM,MAAMT,gBAAO,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMP,CAAC,EAAE,OAAO,MAAA,MAAY,MAAM,OAAO,KAAK,CAAC;AAAA;AAAA;AAIrD,MAAM,QAAQ,CAAC,UACbI,2BAAAA,IAAC,WACC,EAAA,UAAAA,2BAAA;AAAA,EAAC;AAAA,EAAA;AAAA,IACC,OAAM;AAAA,IACN,QAAO;AAAA,IACP,SAAQ;AAAA,IACR,MAAK;AAAA,IACL,OAAM;AAAA,IACL,GAAG;AAAA,IAEJ,UAAAA,2BAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,UAAS;AAAA,QACT,UAAS;AAAA,QACT,GAAE;AAAA,MAAA;AAAA,IACJ;AAAA,EAAA;AACF,EACF,CAAA;AAGF,MAAM,YAAY;AAAA,EAChB,OAAOC,mBAAAA,QAAU,OAAO;AAC1B;AChDA,MAAM,aAAa,CAAC,EAAE,QAAQ,MAAMyB,4BAAW,OAAO;AAEtD,WAAW,eAAe;AAAA,EACxB,SAAS;AACX;AAEA,WAAW,YAAY;AAAA,EACrB,SAASzB,mBAAU,QAAA;AACrB;ACFA,MAAM,aAAaL,gBAAAA,QAAOS,aAAAA,GAAG;AAAA;AAAA;ACD7B,MAAM,gBAAgB,CAAC,EAAE,MAAM,aAAa,iBAAiB;AACrD,QAAA,EAAE,kBAAkBO,UAAAA;AAE1B,MAAI,eAAe;AAEf,MAAA,CAAC,WAAW,cAAc,SAAS,SAAS,EAAE,SAAS,IAAI,GAAG;AACjD,mBAAA;AAAA,aACN,CAAC,QAAQ,EAAE,SAAS,IAAI,GAAG;AACrB,mBAAA;AAAA,EACjB;AAEA,MAAI,aAAa;AAEb,WAAAZ,+BAACM,aAAAA,cACE,UAAc,cAAA;AAAA,MACb,IAAIO,cAAQ,uBAAuB;AAAA,MACnC,gBAAgB;AAAA,IACjB,CAAA,EACH,CAAA;AAAA,EAEJ;AAEA,yCACGP,yBACE,EAAA,UAAA;AAAA,IAAc,cAAA;AAAA,MACb,IAAIO,MAAAA,QAAQ,aAAa,YAAY,EAAE;AAAA,MACvC,gBAAgB;AAAA,IAAA,CACjB;AAAA,IAAE;AAAA,IAEF,cACC,cAAc;AAAA,MACZ,IAAIA,cAAQ,sBAAsB;AAAA,MAClC,gBAAgB;AAAA,IAAA,CACjB;AAAA,EACL,EAAA,CAAA;AAEJ;AAEA,cAAc,eAAe;AAAA,EAC3B,aAAa;AAAA,EACb,YAAY;AACd;AAEA,cAAc,YAAY;AAAA,EACxB,MAAMZ,mBAAAA,QAAU,OAAO;AAAA,EACvB,aAAaA,mBAAU,QAAA;AAAA,EACvB,YAAYA,mBAAU,QAAA;AACxB;ACrCA,SAAS,QAAQ;AAAA,EACf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,QAAM,EAAE,cAAc,qBAAqB,oBAAoBH,MAAe,eAAA;AACxE,QAAA,EAAE,kBAAkBc,UAAAA;AAE1B,QAAM,UAAU,SAAS,cAAc,SAAS,SAAS,OAAO;AAC1D,QAAA,MAAM,CAAC,WAAW,cAAc,SAAS,SAAS,EAAE,SAAS,IAAI,IAAI,WAAW;AAEtF,QAAM,cAAcb,aAAAA,QAAI,cAAc,CAAC,MAAM,GAAG,CAAA,CAAE;AAClD,QAAM,0BAA0BA,aAAAA,QAAI,aAAa,CAAC,UAAU,aAAa,GAAG,EAAE;AACxE,QAAA,sBAAsBA,aAAAA,QAAI,aAAa,QAAQ;AAE/C,QAAA,MAAM,SAAS,aAAa;AAElC,QAAM,cAAc,MAAM;AACxB,QAAI,SAAS;AACX;AAAA,IACF;AAEA,QAAI,iBAAiB,OAAO;AAC1B,YAAM,WAAW;AAEjB;AAAA;AAAA,QAEE;AAAA;AAAA,QAEA,0BAA0B,yBAAyB;AAAA;AAAA,QAEnD;AAAA;AAAA,QAEA;AAAA,QACA;AAAA,MAAA;AAAA,IAEJ;AAAA,EAAA;AAEE,MAAA;AAEJ,MAAI,0BAA0B,uBAAuB;AACtC,iBAAA;AAAA,aACJ,uBAAuB;AACnB,iBAAA;AAAA,EAAA,OACR;AACQ,iBAAA;AAAA,EACf;AAGE,SAAAS,2BAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,IAAG;AAAA,MACF,GAAGmB,wBAAW;AAAA,QACb,IAAI;AAAA,QACJ,WAAW,uBAAuB,gBAAgB,CAAC;AAAA,MAAA,CACpD;AAAA,MAED,UAAA;AAAA,QAAAnB,2BAAA,KAAC,MAAG,EAAA,OAAO,EAAE,UAAU,WACpB,GAAA,UAAA;AAAA,UAAA,eAAe,KAAMR,2BAAAA,IAAA,OAAA,EAAM,OAAO,oBAAoB,eAAe,cAAc;AAAA,UACnFQ,2BAAA,KAAAN,aAAA,MAAA,EAAK,aAAa,GAAG,KAAK,GACzB,UAAA;AAAA,YAACF,2BAAAA,IAAA4B,MAAAA,eAAA,EAAc,MAAM,KAAK,YAA0B,CAAA;AAAA,YACnD5B,2BAAA,IAAAM,aAAA,YAAA,EAAW,YAAW,QAAQ,UAAK,MAAA;AAAA,UAAA,GACtC;AAAA,QAAA,GACF;AAAA,QACCN,2BAAA,IAAA,MAAA,EACE,UACC,SAAAQ,gCAACF,aAAAA,YACE,EAAA,UAAA;AAAA,UAAc,cAAA;AAAA,YACb,IAAIO,MAAA;AAAA,cACF,uBAAuB,UAAU,yBAAyB,cAAc;AAAA,YAC1E;AAAA,YACA,gBAAgB;AAAA,UAAA,CACjB;AAAA,UAAE;AAAA,0CAEF,QAAK,EAAA,OAAO,EAAE,WAAW,SACxB,GAAA,UAAA;AAAA,YAACb,2BAAAA,IAAA6B,YAAA,EAAU,SAAS,wBAAyB,CAAA;AAAA,YAAE;AAAA,YAE9C,uBACC,IAAI,cAAc;AAAA,cAChB,IAAIhB,MAAAA,QAAQ,MAAM;AAAA,cAClB,gBAAgB;AAAA,YAAA,CACjB,CAAC,KAAK,mBAAmB;AAAA,UAAA,GAC9B;AAAA,QAAA,GACF,IAECb,2BAAA,IAAA,eAAA,EAAc,MAAY,aAA0B,WAAwB,CAAA,GAEjF;AAAA,QACCA,2BAAA,IAAA,MAAA,EACE,UACC,sBAAAA,+BAACE,aAAAA,MAAK,EAAA,gBAAe,YAAY,GAAG4B,8BACjC,UAAA,eACEtB,2BAAA,KAAAN,aAAA,MAAA,EAAK,KAAK,GACR,UAAA;AAAA,UAAA,CAAC,WACAF,2BAAA;AAAA,YAAC+B,aAAA;AAAA,YAAA;AAAA,cACC,SAAS;AAAA,cACT,OAAO,GAAG,cAAc;AAAA,gBACtB,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB,CAAC,IAAI,IAAI;AAAA,cACV,UAAQ;AAAA,cACR,qCAAOC,MAAO,QAAA,EAAA;AAAA,YAAA;AAAA,UAChB;AAAA,UAEFhC,2BAAA;AAAA,YAAC+B,aAAA;AAAA,YAAA;AAAA,cACC,SAAS,CAAC,MAAM;AACd,kBAAE,gBAAgB;AAClB;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA,0BAA0B,yBAAyB;AAAA,gBAAA;AAAA,cAEvD;AAAA,cACA,OAAO,GAAG,cAAc;AAAA,gBACtB,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB,CAAC,IAAI,IAAI;AAAA,cACV,UAAQ;AAAA,cACR,qCAAOE,MAAM,OAAA,EAAA;AAAA,YAAA;AAAA,UACf;AAAA,QACF,EAAA,CAAA,IAECjC,2BAAA,IAAAkC,YAAA,CAAA,CAAK,EAEV,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOClC,2BAAA,IAAAK,aAAA,KAAA,EAAI,QAAQR,aAAAA,QAAQ,EAAE,EAAG,CAAA;AAAA,WAE9B;AAAA,MAAA;AAAA,IAAA;AAAA,EAAA;AAGN;AAEA,QAAQ,eAAe;AAAA,EACrB,cAAc;AAAA,EACd,aAAa;AAAA,EACb,uBAAuB;AAAA,EACvB,mBAAmB;AAAA,EACnB,UAAU;AAAA,EAAC;AAAA,EACX,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,wBAAwB;AAAA,EACxB,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,MAAM;AACR;AAEA,QAAQ,YAAY;AAAA,EAClB,cAAcI,mBAAU,QAAA;AAAA,EACxB,aAAaA,mBAAU,QAAA;AAAA,EACvB,YAAYA,mBAAAA,QAAU,OAAO;AAAA,EAC7B,uBAAuBA,mBAAU,QAAA;AAAA,EACjC,mBAAmBA,mBAAU,QAAA;AAAA,EAC7B,MAAMA,mBAAAA,QAAU,OAAO;AAAA,EACvB,SAASA,mBAAU,QAAA;AAAA,EACnB,UAAUA,mBAAU,QAAA;AAAA,EACpB,YAAYA,mBAAU,QAAA;AAAA,EACtB,wBAAwBA,mBAAU,QAAA;AAAA,EAClC,QAAQA,mBAAU,QAAA;AAAA,EAClB,WAAWA,mBAAU,QAAA;AAAA,EACrB,MAAMA,mBAAU,QAAA;AAClB;AAEA,MAAekC,YAAAA,MAAAA,KAAK,OAAO;ACnM3B,MAAM,4BAA4B,CAAC,SAAS;AACtC,MAAA;AAEJ,UAAQ,MAAM;AAAA,IACZ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACa,sBAAA;AAChB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACa,sBAAA;AAChB;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AACa,sBAAA;AAChB;AAAA,IACF,KAAK;AACa,sBAAA;AAChB;AAAA,IACF;AACkB,sBAAA;AAAA,EACpB;AAEO,SAAA;AACT;ACnBA,MAAM,gBAAgB;AAAA,EACpB,+BAA+B;AAAA,IAC7B;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,0BAA0B;AAAA,IACxB;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,2BAA2B;AAAA,IACzB;AAAA,MACE,QAAQ;AAAA,MACR,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEA,MAAM,uBAAuB,CAAC;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACE,QAAA,EAAE,kBAAkBvB,UAAAA;AACpB,QAAA,EAAE,SAASwB,eAAAA;AACjB,QAAM,EAAE,+BAA+B,0BAA0B,0BAAA,IAC/D;AACF,QAAM,QAAQ,cAAc;AAAA,IAC1B,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAAA,CACjB;AACD,MAAI,qBAAqB;AAEzB,QAAM,cAAc,MAAM;AACxB,QAAI,aAAa;AACR,aAAA;AAAA,IACT;AAEA,QAAI,qBAAqB;AAClB,WAAA,mCAAmC,SAAS,sBAAsB;AAAA,IAAA,OAClE;AACA,WAAA,+BAA+B,SAAS,sBAAsB;AAAA,IACrE;AAEO,WAAA;AAAA,EAAA;AAGL,MAAA,uBAAuB,oBAAoB,cAAc;AACtC,yBAAA;AAAA,EACvB;AAEA,MAAI,CAAC,qBAAqB;AACH,yBAAA;AAAA,EACvB;AAGE,SAAApC,2BAAAA,IAACqC,aAAAA,kBAAiB,EAAA,aAAa,oBAC7B,UAAArC,2BAAA;AAAA,IAACuB,aAAA;AAAA,IAAA;AAAA,MACC,0CAAYe,MAAM,OAAA,EAAA;AAAA,MAClB,SAAQ;AAAA,MACR,SAAS;AAAA,MACT,UAAU,eAAe;AAAA,MAExB,UAAA;AAAA,IAAA;AAAA,EAEL,EAAA,CAAA;AAEJ;AAEA,qBAAqB,eAAe;AAAA,EAClC,iBAAiB;AAAA,EACjB,qBAAqB;AAAA,EACrB,aAAa;AAAA,EACb,WAAW;AACb;AAEA,qBAAqB,YAAY;AAAA,EAC/B,UAAUrC,mBAAAA,QAAU,KAAK;AAAA,EACzB,iBAAiBA,mBAAU,QAAA;AAAA,EAC3B,qBAAqBA,mBAAU,QAAA;AAAA,EAC/B,aAAaA,mBAAU,QAAA;AAAA,EACvB,WAAWA,mBAAU,QAAA;AACvB;AAEA,MAAekC,yBAAAA,MAAAA,KAAK,oBAAoB;AC3ExC,MAAM,WAAW,MAAM;AACrB,QAAM,EAAE,aAAa,cAAc,qBAAqB,qBAAqB,WAAA,IAC3ErC,MAAAA;AACI,QAAA,EAAE,kBAAkBc,UAAAA;AACpB,QAAA,EAAE,eAAeI,aAAAA;AAEjB,QAAA,QAAQuB,6BAAc,iDAAiD;AAEvE,QAAA;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACEtB,MAAuB,uBAAA;AAErB,QAAA,oBAAoB,sBAAsB,gBAAgB;AAChE,QAAM,6BAA6B,CAAC,mBAAmB,UAAU,YAAY;AAC7E,QAAM,YAAYlB,aAAAA,QAAI,cAAc,CAAC,mBAAmB,KAAK,CAAC;AAC9D,QAAM,cAAcA,aAAAA,QAAI,cAAc,CAAC,mBAAmB,aAAa,GAAG,KAAK;AACzE,QAAA,kBAAkBA,qBAAI,cAAc,CAAC,mBAAmB,UAAU,MAAM,GAAG,IAAI;AAErF,QAAM,aAAaA,aAAA,QAAI,cAAc,4BAA4B,CAAE,CAAA;AACnE,QAAM,eAAeyC,aAAAA,QAAI,aAAa,CAAC,mBAAmB,QAAQ,CAAC;AACnE,QAAM,uBAAuB,CAACC,iBAAAA,QAAQ,cAAc,WAAW;AAEzD,QAAA,YAAY,sBAAsB,gBAAgB;AAElD,QAAA,8BAA8B,CAAC,sBAAsB;AAC5B,iCAAA,EAAE,mBAAmB,UAAA,CAAW;AAAA,EAAA;AAG/D,QAAM,uBAAuB,OAAOC,YAAWC,YAAW,eAAe,MAAM,gBAAgB;AACvF,UAAA,gBAAgB,0BAA0B,IAAI;AAC9C,UAAA,OAAO,SAAS,cAAc,MAAM;AAE1C,QAAI,aAAa;AACY,iCAAA;AAAA,QACzB,WAAAD;AAAAA,QACA,WAAAC;AAAAA,QACA;AAAA,QACA;AAAA,QACA,gBAAgB;AAAA,MAAA,CACjB;AAAA,IAAA,OACI;AACgB,2BAAA;AAAA,QACnB,WAAAD;AAAAA,QACA,WAAAC;AAAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IACH;AAAA,EAAA;AAGE,MAAA,QAAQ5C,qBAAI,cAAc,CAAC,mBAAmB,UAAU,aAAa,GAAG,EAAE;AACxE,QAAA,OAAOA,qBAAI,cAAc,CAAC,mBAAmB,UAAU,MAAM,GAAG,EAAE;AAElE,QAAA,6BAA6B,OAAO,OAAO,eAAe;AAE5D,MAAA,CAAC,SAAS,4BAA4B;AACxC,YAAQ,cAAc;AAAA,MACpB,IAAIc,cAAQ,qBAAqB;AAAA,MACjC,gBAAgB;AAAA,IAAA,CACjB;AAAA,EACH;AAEA,QAAM,SAAS,MAAM;AACnB,UAAM,cAAc,QAAQ;AAE5B,QAAI,gBAAgB,kBAAkB;AACpC,iBAAW,2BAA2B;AAAA,IACxC;AACA,QAAI,gBAAgB,cAAc;AAChC,iBAAW,0BAA0B;AAAA,IACvC;AAEsB,0BAAA;AAAA,MACpB,WAAW;AAAA,MACX,WAAW;AAAA,MACX;AAAA,MACA,MAAM;AAAA,IAAA,CACP;AAAA,EAAA;AAGH,SAEIL,2BAAA,KAAAoC,qBAAA,EAAA,UAAA;AAAA,IAAA5C,2BAAA;AAAA,MAAC6C,eAAA;AAAA,MAAA;AAAA,QACC,SAAS,CAAC,aACR,SAAS,SAAS,UAAU,QAAQ,cAAc,EAAE,IAAIhC,cAAQ,gBAAgB,GAAG;AAAA,QAErF,MAAM;AAAA,MAAA;AAAA,IACR;AAAA,IACAb,2BAAA;AAAA,MAAC8C,aAAA;AAAA,MAAA;AAAA,QACC,IAAG;AAAA,QACH,eACE,uBACGtC,gCAAAN,aAAAA,MAAA,EAAK,KAAK,GAER,UAAA;AAAA,UAAA,CAAC,8BACAF,2BAAA;AAAA,YAACuB,aAAA;AAAA,YAAA;AAAA,cACC,0CAAYb,MAAK,MAAA,EAAA;AAAA,cACjB,SAAQ;AAAA,cACR,SAAS,MAAM;AACO,oCAAA,EAAE,WAAW,UAAA,CAAW;AAAA,cAC9C;AAAA,cAEC,UAAc,cAAA;AAAA,gBACb,IAAIG,cAAQ,+BAA+B;AAAA,gBAC3C,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UACH;AAAA,UAEFb,2BAAA;AAAA,YAACuB,aAAA;AAAA,YAAA;AAAA,cACC,0CAAYwB,MAAM,OAAA,EAAA;AAAA,cAClB,SAAS,MAAM,WAAW;AAAA,cAC1B,MAAK;AAAA,cACL,UAAUN,iBAAAA,QAAQ,cAAc,WAAW;AAAA,cAE1C,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UACH;AAAA,QAAA,GACF;AAAA,QAGJ,iBACE,uBACA,CAAC,gBACD,CAAC,8BACEzC,2BAAA,IAAAuB,aAAA,QAAA,EAAO,WAAWvB,2BAAA,IAACgC,gBAAO,GAAI,SAAQ,YAAW,SAAS,QACxD,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,QAGJ,OAAON,4BAAW,KAAK;AAAA,QACvB,UAAU,cAAc;AAAA,UACtB,IAAIb,cAAQ,mCAAmC;AAAA,UAC/C,gBAAgB;AAAA,QAAA,CACjB;AAAA,QACD,iDACGmC,mBAAK,EAAA,0CAAYC,iBAAU,CAAA,CAAA,GAAI,IAAG,kCAChC,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,MAAA;AAAA,IAEJ;AAAA,IACAjD,2BAAAA,IAACkD,aAAAA,iBACC,UAAC1C,2BAAAA,KAAAN,aAAAA,MAAA,EAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,MAAAF,2BAAAA,IAACE,qBAAK,gBAAe,YACnB,UAACF,+BAAAE,aAAAA,MAAA,EAAK,KAAK,GACT,UAAAF,2BAAA;AAAA,QAACmD;AAAAA,QAAA;AAAA,UAEC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,UAAU;AAAA,QAAA;AAAA,QALN;AAAA,SAOR,EACF,CAAA;AAAA,qCACC9C,aAAAA,KAAI,EAAA,YAAW,YAAW,QAAO,gBAAe,WAAS,MACxD,UAAAL,2BAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,OAAO;AAAA,UACP,oBAAoB,CAAC,UAAUA,+BAACoD,aAAS,GAAG,OAAO,SAAS,sBAAsB;AAAA,UAClF,kBAAkB;AAAA,UAClB;AAAA,UACA,YAAY;AAAA,UACZ,QAAM;AAAA,QAAA;AAAA,MAAA,GAEV;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,EACF,EAAA,CAAA;AAEJ;;"}