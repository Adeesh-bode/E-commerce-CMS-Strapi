{"version":3,"file":"index-c23512da.js","sources":["../../admin/src/pluginId.js","../../admin/src/utils/getTrad.js","../../admin/src/components/CheckboxConfirmation/index.js","../../admin/src/selectors/selectCollectionTypesRelatedPermissions.js","../../admin/src/hooks/useContentTypePermissions/index.js","../../admin/src/selectors/selectI18nLocales.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewCopyLocale/utils/removePasswordAndRelationsFieldFromData.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewCopyLocale/utils/cleanData.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewCopyLocale/utils/generateOptions.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewCopyLocale/index.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewLocalePicker/Bullet.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewLocalePicker/utils/createLocalesOption.js","../../admin/src/components/CMEditViewInjectedComponents/CMEditViewLocalePicker/index.js","../../admin/src/components/CMEditViewInjectedComponents/index.js","../../admin/src/hooks/useHasI18n/index.js","../../admin/src/components/CMListViewInjectedComponents/DeleteModalAdditionalInfos/index.js","../../admin/src/components/CMListViewInjectedComponents/PublishModalAdditionalInfos/index.js","../../admin/src/components/CMListViewInjectedComponents/UnpublishModalAdditionalInfos/index.js","../../admin/src/hooks/constants.js","../../admin/src/hooks/useLocales/index.js","../../admin/src/components/Initializer/index.js","../../admin/src/utils/getLocaleFromQuery.js","../../admin/src/utils/getInitialLocale.js","../../admin/src/components/LocalePicker/index.js","../../admin/src/constants.js","../../admin/src/components/LocaleListCell/LocaleListCell.js","../../admin/src/contentManagerHooks/addColumnToTable.js","../../admin/src/utils/getDefaultLocale.js","../../admin/src/contentManagerHooks/utils/addLocaleToLinksSearch.js","../../admin/src/contentManagerHooks/addLocaleToCollectionTypesLinks.js","../../admin/src/contentManagerHooks/addLocaleToSingleTypesLinks.js","../../admin/src/components/LabelAction/index.js","../../admin/src/contentManagerHooks/mutateEditViewLayout.js","../../admin/src/hooks/reducers.js","../../admin/src/middlewares/addCommonFieldsToInitialDataMiddleware.js","../../admin/src/middlewares/extendCTBAttributeInitialDataMiddleware.js","../../admin/src/middlewares/extendCTBInitialDataMiddleware.js","../../admin/src/middlewares/localePermissionMiddleware.js","../../admin/src/middlewares/index.js","../../admin/src/utils/localizedFields.js","../../admin/src/utils/mutateCTBContentTypeSchema.js","../../admin/src/index.js"],"sourcesContent":["import pluginPkg from '../../package.json';\n\nconst pluginId = pluginPkg.name.replace(/^@strapi\\/plugin-/i, '');\n\nexport default pluginId;\n","import pluginId from '../pluginId';\n\nconst getTrad = (id) => `${pluginId}.${id}`;\n\nexport default getTrad;\n","import React, { useState } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Flex,\n  Typography,\n} from '@strapi/design-system';\nimport { ExclamationMarkCircle } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { getTrad } from '../../utils';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\nconst CheckboxConfirmation = ({ description, isCreating, intlLabel, name, onChange, value }) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleChange = (value) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n    setIsOpen(false);\n  };\n\n  const handleToggle = () => setIsOpen((prev) => !prev);\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <>\n      <Checkbox\n        hint={hint}\n        id={name}\n        name={name}\n        onValueChange={handleChange}\n        value={value}\n        type=\"checkbox\"\n      >\n        {label}\n      </Checkbox>\n      {isOpen && (\n        <Dialog onClose={handleToggle} title=\"Confirmation\" isOpen={isOpen}>\n          <DialogBody icon={<ExclamationMarkCircle />}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex justifyContent=\"center\">\n                <TextAlignTypography id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTrad('CheckboxConfirmation.Modal.content'),\n                    defaultMessage:\n                      'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                  })}\n                </TextAlignTypography>\n              </Flex>\n              <Flex justifyContent=\"center\">\n                <Typography fontWeight=\"semiBold\" id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTrad('CheckboxConfirmation.Modal.body'),\n                    defaultMessage: 'Do you want to disable it?',\n                  })}\n                </Typography>\n              </Flex>\n            </Flex>\n          </DialogBody>\n          <DialogFooter\n            startAction={\n              <Button onClick={handleToggle} variant=\"tertiary\">\n                {formatMessage({\n                  id: 'components.popUpWarning.button.cancel',\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n            }\n            endAction={\n              <Button variant=\"danger-light\" onClick={handleConfirm}>\n                {formatMessage({\n                  id: getTrad('CheckboxConfirmation.Modal.button-confirm'),\n                  defaultMessage: 'Yes, disable',\n                })}\n              </Button>\n            }\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n\nCheckboxConfirmation.defaultProps = {\n  description: null,\n  isCreating: false,\n};\n\nCheckboxConfirmation.propTypes = {\n  description: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }),\n  intlLabel: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n    values: PropTypes.object,\n  }).isRequired,\n  isCreating: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.bool.isRequired,\n};\n\nexport default CheckboxConfirmation;\n","const selectCollectionTypesRelatedPermissions = (state) =>\n  state.rbacProvider.collectionTypesRelatedPermissions;\n\nexport default selectCollectionTypesRelatedPermissions;\n","import { useSelector } from 'react-redux';\n\nimport selectCollectionTypesRelatedPermissions from '../../selectors/selectCollectionTypesRelatedPermissions';\n\nconst useContentTypePermissions = (slug) => {\n  const collectionTypesRelatedPermissions = useSelector(selectCollectionTypesRelatedPermissions);\n\n  const currentCTRelatedPermissions = collectionTypesRelatedPermissions[slug];\n  const readPermissions =\n    currentCTRelatedPermissions['plugin::content-manager.explorer.read'] || [];\n  const createPermissions =\n    currentCTRelatedPermissions['plugin::content-manager.explorer.create'] || [];\n\n  return { createPermissions, readPermissions };\n};\n\nexport default useContentTypePermissions;\n","const selectI18NLocales = (state) => state.i18n_locales.locales;\n\nexport default selectI18NLocales;\n","import { getOtherInfos, getType } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\n\nconst removePasswordAndRelationsFieldFromData = (data, contentTypeSchema, componentSchema) => {\n  const recursiveCleanData = (data, schema) => {\n    return Object.keys(data).reduce((acc, current) => {\n      const attrType = getType(schema, current);\n      const value = get(data, current);\n      const component = getOtherInfos(schema, [current, 'component']);\n      const isRepeatable = getOtherInfos(schema, [current, 'repeatable']);\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map((componentValue) => {\n          const subCleanedData = recursiveCleanData(\n            componentValue,\n            componentSchema[componentValue.__component]\n          );\n\n          return subCleanedData;\n        });\n\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          /* eslint-disable indent */\n          acc[current] = value\n            ? value.map((compoData) => {\n                const subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n\n                return subCleanedData;\n              })\n            : value;\n          /* eslint-enable indent */\n        } else {\n          acc[current] = value ? recursiveCleanData(value, componentSchema[component]) : value;\n        }\n\n        return acc;\n      }\n\n      if (attrType !== 'password' && attrType !== 'relation') {\n        acc[current] = value;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nexport default removePasswordAndRelationsFieldFromData;\n","import {\n  contentManagementUtilRemoveFieldsFromData,\n  formatContentTypeData,\n} from '@strapi/helper-plugin';\n\nimport removePasswordAndRelationsFieldFromData from './removePasswordAndRelationsFieldFromData';\n\nconst cleanData = (data, { contentType, components }, initialLocalizations) => {\n  const dataWithoutPasswordsAndRelations = removePasswordAndRelationsFieldFromData(\n    data,\n    contentType,\n    components\n  );\n\n  dataWithoutPasswordsAndRelations.localizations = initialLocalizations;\n\n  const fieldsToRemove = ['createdBy', 'updatedBy', 'publishedAt', 'id', 'updatedAt', 'createdAt'];\n\n  const cleanedClonedData = contentManagementUtilRemoveFieldsFromData(\n    dataWithoutPasswordsAndRelations,\n    contentType,\n    components,\n    fieldsToRemove\n  );\n\n  return formatContentTypeData(cleanedClonedData, contentType, components);\n};\n\nexport default cleanData;\n","import get from 'lodash/get';\n\nconst generateOptions = (appLocales, currentLocale, localizations, permissions) => {\n  return appLocales\n    .filter(({ code }) => {\n      return (\n        code !== currentLocale &&\n        (localizations || []).findIndex(({ locale }) => locale === code) !== -1\n      );\n    })\n    .filter(({ code }) => {\n      return permissions.some(({ properties }) => get(properties, 'locales', []).includes(code));\n    })\n    .map((locale) => {\n      return {\n        label: locale.name,\n        value: localizations.find((loc) => locale.code === loc.locale).id,\n      };\n    });\n};\n\nexport default generateOptions;\n","import React, { useState } from 'react';\n\nimport {\n  Box,\n  Button,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Flex,\n  Option,\n  Select,\n  Typography,\n} from '@strapi/design-system';\nimport { useCMEditViewDataManager, useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { Duplicate, ExclamationMarkCircle } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { getTrad } from '../../../utils';\n\nimport { cleanData, generateOptions } from './utils';\n\nconst StyledTypography = styled(Typography)`\n  svg {\n    margin-right: ${({ theme }) => theme.spaces[2]};\n    fill: none;\n    > g,\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\nconst CenteredTypography = styled(Typography)`\n  text-align: center;\n`;\n\nconst CMEditViewCopyLocale = (props) => {\n  if (!props.localizations.length) {\n    return null;\n  }\n\n  return <Content {...props} />;\n};\n\nconst Content = ({ appLocales, currentLocale, localizations, readPermissions }) => {\n  const options = generateOptions(appLocales, currentLocale, localizations, readPermissions);\n\n  const toggleNotification = useNotification();\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const { allLayoutData, initialData, slug } = useCMEditViewDataManager();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [value, setValue] = useState(options[0]?.value || '');\n  const { get } = useFetchClient();\n\n  const handleConfirmCopyLocale = async () => {\n    if (!value) {\n      handleToggle();\n\n      return;\n    }\n\n    const requestURL = `/content-manager/collection-types/${slug}/${value}`;\n\n    setIsLoading(true);\n    try {\n      const { data: response } = await get(requestURL);\n\n      const cleanedData = cleanData(response, allLayoutData, localizations);\n      ['createdBy', 'updatedBy', 'publishedAt', 'id', 'createdAt'].forEach((key) => {\n        if (!initialData[key]) return;\n        cleanedData[key] = initialData[key];\n      });\n\n      dispatch({\n        type: 'ContentManager/CrudReducer/GET_DATA_SUCCEEDED',\n        data: cleanedData,\n        setModifiedDataOnly: true,\n      });\n\n      toggleNotification({\n        type: 'success',\n        message: {\n          id: getTrad('CMEditViewCopyLocale.copy-success'),\n          defaultMessage: 'Locale copied!',\n        },\n      });\n    } catch (err) {\n      console.error(err);\n\n      toggleNotification({\n        type: 'warning',\n        message: {\n          id: getTrad('CMEditViewCopyLocale.copy-failure'),\n          defaultMessage: 'Failed to copy locale',\n        },\n      });\n    } finally {\n      setIsLoading(false);\n      handleToggle();\n    }\n  };\n\n  const handleChange = (value) => {\n    setValue(value);\n  };\n\n  const handleToggle = () => {\n    setIsOpen((prev) => !prev);\n  };\n\n  return (\n    <>\n      <StyledTypography\n        fontSize={2}\n        textColor=\"primary600\"\n        as=\"button\"\n        type=\"button\"\n        onClick={handleToggle}\n      >\n        <Flex>\n          <Duplicate width=\"12px\" height=\"12px\" />\n          {formatMessage({\n            id: getTrad('CMEditViewCopyLocale.copy-text'),\n            defaultMessage: 'Fill in from another locale',\n          })}\n        </Flex>\n      </StyledTypography>\n      {isOpen && (\n        <Dialog onClose={handleToggle} title=\"Confirmation\" isOpen={isOpen}>\n          <DialogBody icon={<ExclamationMarkCircle />}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex justifyContent=\"center\">\n                <CenteredTypography id=\"confirm-description\">\n                  {formatMessage({\n                    id: getTrad('CMEditViewCopyLocale.ModalConfirm.content'),\n                    defaultMessage:\n                      'Your current content will be erased and filled by the content of the selected locale:',\n                  })}\n                </CenteredTypography>\n              </Flex>\n              <Box>\n                <Select\n                  label={formatMessage({\n                    id: getTrad('Settings.locales.modal.locales.label'),\n                  })}\n                  onChange={handleChange}\n                  value={value}\n                >\n                  {options.map(({ label, value }) => {\n                    return (\n                      <Option key={value} value={value}>\n                        {label}\n                      </Option>\n                    );\n                  })}\n                </Select>\n              </Box>\n            </Flex>\n          </DialogBody>\n          <DialogFooter\n            startAction={\n              <Button onClick={handleToggle} variant=\"tertiary\">\n                {formatMessage({\n                  id: 'popUpWarning.button.cancel',\n                  defaultMessage: 'No, cancel',\n                })}\n              </Button>\n            }\n            endAction={\n              <Button variant=\"success\" onClick={handleConfirmCopyLocale} loading={isLoading}>\n                {formatMessage({\n                  id: getTrad('CMEditViewCopyLocale.submit-text'),\n                  defaultMessage: 'Yes, fill in',\n                })}\n              </Button>\n            }\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n\nCMEditViewCopyLocale.propTypes = {\n  localizations: PropTypes.array.isRequired,\n};\n\nContent.propTypes = {\n  appLocales: PropTypes.arrayOf(\n    PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  localizations: PropTypes.array.isRequired,\n  readPermissions: PropTypes.array.isRequired,\n};\n\nexport default CMEditViewCopyLocale;\n","import React from 'react';\n\nimport { pxToRem } from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { getTrad } from '../../../utils';\n\nconst statusMap = {\n  'did-not-create-locale': {\n    backgroundColor: 'neutral0',\n    borderColor: 'neutral500',\n  },\n  draft: {\n    backgroundColor: 'secondary700',\n  },\n  published: {\n    backgroundColor: 'success700',\n  },\n};\n\nconst statusToTitleMap = {\n  draft: 'content-manager.components.Select.draft-info-title',\n  published: 'content-manager.components.Select.publish-info-title',\n  'did-not-create-locale': getTrad('components.Select.locales.not-available'),\n};\n\nconst StyledBullet = styled.div`\n  width: ${pxToRem(6)};\n  height: ${pxToRem(6)};\n  border: ${({ theme, status }) => `1px solid ${theme.colors[statusMap[status].borderColor]}`};\n  background: ${({ theme, status }) => theme.colors[statusMap[status].backgroundColor]};\n  border-radius: 50%;\n  cursor: pointer;\n`;\n\nconst Bullet = ({ status }) => {\n  const { formatMessage } = useIntl();\n\n  return <StyledBullet status={status} title={formatMessage({ id: statusToTitleMap[status] })} />;\n};\n\nBullet.propTypes = {\n  status: PropTypes.oneOf(['draft', 'published', 'did-not-create-locale']).isRequired,\n};\n\nexport default Bullet;\n","const createLocalesOption = (localesToDisplay, localesFromData) => {\n  return localesToDisplay.map(({ name, code }) => {\n    const matchingLocaleInData = localesFromData.find(({ locale }) => locale === code);\n\n    let status = 'did-not-create-locale';\n\n    if (matchingLocaleInData) {\n      status = matchingLocaleInData.publishedAt === null ? 'draft' : 'published';\n    }\n\n    return {\n      id: matchingLocaleInData ? matchingLocaleInData.id : null,\n      label: name,\n      value: code,\n      status,\n    };\n  });\n};\n\nexport default createLocalesOption;\n","import React from 'react';\n\nimport { Box, Divider, Flex, Option, Select, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nimport { getTrad } from '../../../utils';\nimport CMEditViewCopyLocale from '../CMEditViewCopyLocale';\n\nimport Bullet from './Bullet';\nimport { createLocalesOption } from './utils';\n\nconst CMEditViewLocalePicker = ({\n  appLocales,\n  createPermissions,\n  currentEntityId,\n  currentLocaleStatus,\n  hasDraftAndPublishEnabled,\n  isSingleType,\n  localizations,\n  query,\n  readPermissions,\n  setQuery,\n  slug,\n}) => {\n  const { formatMessage } = useIntl();\n\n  const currentLocale = get(query, 'plugins.i18n.locale', false);\n\n  const { push } = useHistory();\n\n  const handleChange = (value) => {\n    if (value === currentLocale) {\n      return;\n    }\n\n    const nextLocale = options.find((option) => {\n      return option.value === value;\n    });\n\n    const { status, id } = nextLocale;\n\n    let defaultParams = {\n      plugins: {\n        ...query.plugins,\n        i18n: { ...query.plugins.i18n, locale: value },\n      },\n    };\n\n    if (currentEntityId) {\n      defaultParams.plugins.i18n.relatedEntityId = currentEntityId;\n    }\n\n    if (isSingleType) {\n      setQuery(defaultParams);\n\n      return;\n    }\n\n    if (status === 'did-not-create-locale') {\n      push({\n        pathname: `/content-manager/collectionType/${slug}/create`,\n        search: stringify(defaultParams, { encode: false }),\n      });\n\n      return;\n    }\n\n    push({\n      pathname: `/content-manager/collectionType/${slug}/${id}`,\n      search: stringify(defaultParams, { encode: false }),\n    });\n  };\n\n  const options = createLocalesOption(appLocales, localizations).filter(({ status, value }) => {\n    if (status === 'did-not-create-locale') {\n      return createPermissions.find(({ properties }) =>\n        get(properties, 'locales', []).includes(value)\n      );\n    }\n\n    return readPermissions.find(({ properties }) => get(properties, 'locales', []).includes(value));\n  });\n\n  const filteredOptions = options.filter(({ value }) => value !== currentLocale);\n  const currentLocaleObject = appLocales.find(({ code }) => code === currentLocale);\n\n  const value = options.find(({ value }) => {\n    return value === currentLocale;\n  }) || { value: currentLocaleObject.code, label: currentLocaleObject.name };\n\n  if (!currentLocale) {\n    return null;\n  }\n\n  return (\n    <Box paddingTop={6}>\n      <Typography variant=\"sigma\" textColor=\"neutral600\">\n        {formatMessage({ id: getTrad('plugin.name'), defaultMessage: 'Internationalization' })}\n      </Typography>\n      <Divider unsetMargin={false} marginTop={2} marginBottom={6} />\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n        <Select\n          label={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.label'),\n          })}\n          onChange={handleChange}\n          value={value?.value}\n        >\n          <Option\n            value={value?.value}\n            disabled\n            startIcon={hasDraftAndPublishEnabled ? <Bullet status={currentLocaleStatus} /> : null}\n          >\n            {value?.label}\n          </Option>\n          {filteredOptions.map((option) => {\n            return (\n              <Option\n                key={option.value}\n                value={option.value}\n                startIcon={hasDraftAndPublishEnabled ? <Bullet status={option.status} /> : null}\n              >\n                {option.label}\n              </Option>\n            );\n          })}\n        </Select>\n        <CMEditViewCopyLocale\n          appLocales={appLocales}\n          currentLocale={currentLocale}\n          localizations={localizations}\n          readPermissions={readPermissions}\n        />\n      </Flex>\n    </Box>\n  );\n};\n\nCMEditViewLocalePicker.defaultProps = {\n  createPermissions: [],\n  currentEntityId: null,\n  currentLocaleStatus: 'did-not-create-locale',\n  isSingleType: false,\n  localizations: [],\n  query: {},\n  readPermissions: [],\n};\n\nCMEditViewLocalePicker.propTypes = {\n  appLocales: PropTypes.array.isRequired,\n  createPermissions: PropTypes.array,\n  currentEntityId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  currentLocaleStatus: PropTypes.string,\n  hasDraftAndPublishEnabled: PropTypes.bool.isRequired,\n  isSingleType: PropTypes.bool,\n  localizations: PropTypes.array,\n  query: PropTypes.object,\n  readPermissions: PropTypes.array,\n  setQuery: PropTypes.func.isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nexport default CMEditViewLocalePicker;\n","import React, { useMemo } from 'react';\n\nimport { useCMEditViewDataManager, useQueryParams } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport useContentTypePermissions from '../../hooks/useContentTypePermissions';\nimport selectI18NLocales from '../../selectors/selectI18nLocales';\n\nimport CMEditViewLocalePicker from './CMEditViewLocalePicker';\n\nconst CMEditViewInjectedComponents = () => {\n  const { layout, modifiedData, initialData, slug, isSingleType } = useCMEditViewDataManager();\n  const { createPermissions, readPermissions } = useContentTypePermissions(slug);\n  const locales = useSelector(selectI18NLocales);\n  const params = useParams();\n  const [{ query }, setQuery] = useQueryParams();\n\n  const id = get(params, 'id', null);\n  const currentEntityId = id;\n  const defaultLocale = locales.find((loc) => loc.isDefault);\n  const currentLocale = get(query, 'plugins.i18n.locale', defaultLocale.code);\n  const hasI18nEnabled = get(layout, ['pluginOptions', 'i18n', 'localized'], false);\n  const hasDraftAndPublishEnabled = get(layout, ['options', 'draftAndPublish'], false);\n\n  const defaultQuery = useMemo(() => {\n    if (!query) {\n      return { plugins: { i18n: { locale: currentLocale } } };\n    }\n\n    return query;\n  }, [query, currentLocale]);\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  if (!currentLocale) {\n    return null;\n  }\n\n  const localizations = get(modifiedData, 'localizations', []);\n  let currentLocaleStatus = 'did-not-create-locale';\n\n  if (has(initialData, 'publishedAt')) {\n    currentLocaleStatus = initialData.publishedAt ? 'published' : 'draft';\n  }\n\n  return (\n    <CMEditViewLocalePicker\n      appLocales={locales}\n      currentEntityId={currentEntityId}\n      createPermissions={createPermissions}\n      currentLocaleStatus={currentLocaleStatus}\n      hasDraftAndPublishEnabled={hasDraftAndPublishEnabled}\n      localizations={localizations}\n      isSingleType={isSingleType}\n      query={defaultQuery}\n      readPermissions={readPermissions}\n      setQuery={setQuery}\n      slug={slug}\n    />\n  );\n};\n\nexport default CMEditViewInjectedComponents;\n","import get from 'lodash/get';\nimport { useSelector } from 'react-redux';\n\nconst selectContentManagerListViewPluginOptions = (state) =>\n  state['content-manager_listView'].contentType.pluginOptions;\n\nconst useHasI18n = () => {\n  const pluginOptions = useSelector(selectContentManagerListViewPluginOptions);\n\n  return get(pluginOptions, 'i18n.localized', false);\n};\n\nexport default useHasI18n;\n","import React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport useHasI18n from '../../../hooks/useHasI18n';\nimport { getTrad } from '../../../utils';\n\nconst Emphasis = (chunks) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst DeleteModalAdditionalInfos = () => {\n  const hasI18nEnabled = useHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTrad('Settings.list.actions.deleteAdditionalInfos'),\n          defaultMessage:\n            'This will delete the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport default DeleteModalAdditionalInfos;\n","import React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport useHasI18n from '../../../hooks/useHasI18n';\nimport { getTrad } from '../../../utils';\n\nconst Emphasis = (chunks) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst PublishModalAdditionalInfos = () => {\n  const hasI18nEnabled = useHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTrad('Settings.list.actions.publishAdditionalInfos'),\n          defaultMessage:\n            'This will publish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport default PublishModalAdditionalInfos;\n","import React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport useHasI18n from '../../../hooks/useHasI18n';\nimport { getTrad } from '../../../utils';\n\nconst Emphasis = (chunks) => {\n  return (\n    <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n      {chunks}\n    </Typography>\n  );\n};\n\nconst UnpublishModalAdditionalInfos = () => {\n  const hasI18nEnabled = useHasI18n();\n  const { formatMessage } = useIntl();\n\n  if (!hasI18nEnabled) {\n    return null;\n  }\n\n  return (\n    <Typography textColor=\"danger500\">\n      {formatMessage(\n        {\n          id: getTrad('Settings.list.actions.unpublishAdditionalInfos'),\n          defaultMessage:\n            'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n        },\n        {\n          em: Emphasis,\n        }\n      )}\n    </Typography>\n  );\n};\n\nexport default UnpublishModalAdditionalInfos;\n","import pluginId from '../pluginId';\n\nexport const RESOLVE_LOCALES = `${pluginId}/locales/resolve-locales`;\nexport const ADD_LOCALE = `${pluginId}/locales/add`;\nexport const DELETE_LOCALE = `${pluginId}/locales/delete`;\nexport const UPDATE_LOCALE = `${pluginId}/locales/update`;\n","import { useEffect } from 'react';\n\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RESOLVE_LOCALES } from '../constants';\n\nconst useLocales = () => {\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const locales = useSelector((state) => state.i18n_locales.locales);\n  const isLoading = useSelector((state) => state.i18n_locales.isLoading);\n\n  const { get } = useFetchClient();\n\n  useEffect(() => {\n    get('/i18n/locales')\n      .then(({ data }) => dispatch({ type: RESOLVE_LOCALES, locales: data }))\n      .catch((err) => {\n        /**\n         * TODO: this should be refactored.\n         *\n         * In fact it should be refactored to use react-query?\n         */\n        if ('code' in err && err?.code === 'ERR_CANCELED') {\n          return;\n        }\n\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      });\n  }, [dispatch, get, toggleNotification]);\n\n  return { locales, isLoading };\n};\n\nexport default useLocales;\n","/**\n *\n * Initializer\n *\n */\n\nimport { useEffect, useRef } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport useLocales from '../../hooks/useLocales';\nimport pluginId from '../../pluginId';\n\nconst Initializer = ({ setPlugin }) => {\n  const { isLoading, locales } = useLocales();\n  const ref = useRef();\n\n  ref.current = setPlugin;\n\n  useEffect(() => {\n    if (!isLoading && locales.length > 0) {\n      ref.current(pluginId);\n    }\n  }, [isLoading, locales]);\n\n  return null;\n};\n\nInitializer.propTypes = {\n  setPlugin: PropTypes.func.isRequired,\n};\n\nexport default Initializer;\n","import get from 'lodash/get';\n\nconst getLocaleFromQuery = (query) => {\n  return get(query, 'plugins.i18n.locale', undefined);\n};\n\nexport default getLocaleFromQuery;\n","import getLocaleFromQuery from './getLocaleFromQuery';\n\nconst getInitialLocale = (query, locales = []) => {\n  const localeFromQuery = getLocaleFromQuery(query);\n\n  if (localeFromQuery) {\n    return locales.find((locale) => locale.code === localeFromQuery);\n  }\n\n  // Returns the default locale when nothing is in the query\n  return locales.find((locale) => locale.isDefault);\n};\n\nexport default getInitialLocale;\n","import React, { useState } from 'react';\n\nimport { Option, Select } from '@strapi/design-system';\nimport { useQueryParams } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouteMatch } from 'react-router-dom';\n\nimport useContentTypePermissions from '../../hooks/useContentTypePermissions';\nimport useHasI18n from '../../hooks/useHasI18n';\nimport selectI18NLocales from '../../selectors/selectI18nLocales';\nimport getInitialLocale from '../../utils/getInitialLocale';\nimport getTrad from '../../utils/getTrad';\n\nconst LocalePicker = () => {\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const locales = useSelector(selectI18NLocales);\n  const [{ query }, setQuery] = useQueryParams();\n  const {\n    params: { slug },\n  } = useRouteMatch('/content-manager/collectionType/:slug');\n  const isFieldLocalized = useHasI18n();\n  const { createPermissions, readPermissions } = useContentTypePermissions(slug);\n\n  const initialLocale = getInitialLocale(query, locales);\n  const [selected, setSelected] = useState(initialLocale?.code || '');\n\n  if (!isFieldLocalized) {\n    return null;\n  }\n\n  if (!locales || locales.length === 0) {\n    return null;\n  }\n\n  const displayedLocales = locales.filter((locale) => {\n    const canCreate = createPermissions.find(({ properties }) => {\n      return get(properties, 'locales', []).includes(locale.code);\n    });\n    const canRead = readPermissions.find(({ properties }) =>\n      get(properties, 'locales', []).includes(locale.code)\n    );\n\n    return canCreate || canRead;\n  });\n\n  const handleClick = (code) => {\n    if (code === selected) {\n      return;\n    }\n\n    setSelected(code);\n\n    /**\n     * if the selected value is set at the same time as the dispatcher\n     * is run, react might not have enough time to re-render the Select\n     * component, which leads to the `source` ref, which is passed to\n     * Popout, not being defined.\n     *\n     * By pushing the dispatcher to the end of the current execution\n     * context, we can guarantee the rendering can finish before.\n     */\n    setTimeout(() => {\n      dispatch({ type: 'ContentManager/RBACManager/RESET_PERMISSIONS' });\n      setQuery({\n        page: 1,\n        plugins: { ...query.plugins, i18n: { locale: code } },\n      });\n    });\n  };\n\n  return (\n    <Select\n      size=\"S\"\n      aria-label={formatMessage({ id: getTrad('actions.select-locale'), defaultMessage: '' })}\n      value={selected}\n      onChange={handleClick}\n    >\n      {displayedLocales.map((locale) => (\n        <Option key={locale.id} id={`menu-item${locale.name || locale.code}`} value={locale.code}>\n          {locale.name}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default LocalePicker;\n","export const PERMISSIONS = {\n  accessMain: [{ action: 'plugin::i18n.locale.read', subject: null }],\n  create: [{ action: 'plugin::i18n.locale.create', subject: null }],\n  delete: [{ action: 'plugin::i18n.locale.delete', subject: null }],\n  update: [{ action: 'plugin::i18n.locale.update', subject: null }],\n  read: [{ action: 'plugin::i18n.locale.read', subject: null }],\n};\n","import React, { useRef, useState } from 'react';\n\nimport { Box, Flex, Popover, Tooltip, Typography } from '@strapi/design-system';\nimport { SortIcon, stopPropagation } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport selectI18NLocales from '../../selectors/selectI18nLocales';\nimport { getTrad } from '../../utils';\n\nconst Button = styled.button`\n  svg {\n    > g,\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n  &:hover {\n    svg {\n      > g,\n      path {\n        fill: ${({ theme }) => theme.colors.neutral600};\n      }\n    }\n  }\n  &:active {\n    svg {\n      > g,\n      path {\n        fill: ${({ theme }) => theme.colors.neutral400};\n      }\n    }\n  }\n`;\n\nconst ActionWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${32 / 16}rem;\n  width: ${32 / 16}rem;\n  svg {\n    height: ${4 / 16}rem;\n  }\n`;\n\nconst mapToLocaleName = (locales, localeCode) =>\n  get(\n    locales.find(({ code }) => code === localeCode),\n    'name',\n    localeCode\n  );\n\nconst LocaleListCell = ({ localizations, locale: currentLocaleCode, id }) => {\n  const locales = useSelector(selectI18NLocales);\n  const allLocalizations = [{ locale: currentLocaleCode }, ...localizations];\n  const localizationNames = allLocalizations.map((locale) => locale.locale);\n  const defaultLocale = locales.find((locale) => locale.isDefault);\n  const hasDefaultLocale = localizationNames.includes(defaultLocale.code);\n  const [visible, setVisible] = useState(false);\n  const buttonRef = useRef();\n  const { formatMessage } = useIntl();\n\n  let localesArray = [];\n\n  if (hasDefaultLocale) {\n    const ctLocalesWithoutDefault = localizationNames.filter(\n      (locale) => locale !== defaultLocale.code\n    );\n    const ctLocalesNamesWithoutDefault = ctLocalesWithoutDefault.map((locale) =>\n      mapToLocaleName(locales, locale)\n    );\n\n    ctLocalesNamesWithoutDefault.sort();\n\n    const ctLocalesNamesWithDefault = [\n      `${defaultLocale.name} (default)`,\n      ...ctLocalesNamesWithoutDefault,\n    ];\n\n    localesArray = ctLocalesNamesWithDefault;\n  } else {\n    const ctLocales = localizationNames.map((locale) => mapToLocaleName(locales, locale));\n    ctLocales.sort();\n\n    localesArray = ctLocales;\n  }\n\n  const handleTogglePopover = () => setVisible((prev) => !prev);\n\n  const elId = `entry-${id}__locale`;\n  const localesNames = localesArray.join(', ');\n\n  return (\n    <Flex {...stopPropagation}>\n      <Tooltip\n        label={formatMessage({\n          id: getTrad('CMListView.popover.display-locales.label'),\n          defaultMessage: 'Display translated locales',\n        })}\n      >\n        <Button type=\"button\" onClick={handleTogglePopover} ref={buttonRef}>\n          <Flex>\n            <Typography\n              style={{ maxWidth: '252px', cursor: 'pointer' }}\n              data-for={elId}\n              data-tip={localesNames}\n              textColor=\"neutral800\"\n              ellipsis\n            >\n              {localesNames}\n            </Typography>\n            <ActionWrapper>\n              <SortIcon />\n\n              {visible && (\n                <Popover onDismiss={handleTogglePopover} source={buttonRef} spacing={16} centered>\n                  <ul>\n                    {localesArray.map((name) => (\n                      <Box key={name} padding={3} as=\"li\">\n                        <Typography>{name}</Typography>\n                      </Box>\n                    ))}\n                  </ul>\n                </Popover>\n              )}\n            </ActionWrapper>\n          </Flex>\n        </Button>\n      </Tooltip>\n    </Flex>\n  );\n};\n\nLocaleListCell.propTypes = {\n  id: PropTypes.number.isRequired,\n  localizations: PropTypes.arrayOf(\n    PropTypes.shape({\n      locale: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  locale: PropTypes.string.isRequired,\n};\n\nexport default LocaleListCell;\n","import React from 'react';\n\nimport get from 'lodash/get';\n\nimport LocaleListCell from '../components/LocaleListCell/LocaleListCell';\n\nconst addColumnToTableHook = ({ displayedHeaders, layout }) => {\n  const isFieldLocalized = get(layout, 'contentType.pluginOptions.i18n.localized', false);\n\n  if (!isFieldLocalized) {\n    return { displayedHeaders, layout };\n  }\n\n  return {\n    displayedHeaders: [\n      ...displayedHeaders,\n      {\n        key: '__locale_key__',\n        fieldSchema: { type: 'string' },\n        metadatas: { label: 'Content available in', searchable: false, sortable: false },\n        name: 'locales',\n        cellFormatter: (props) => <LocaleListCell {...props} />,\n      },\n    ],\n    layout,\n  };\n};\n\nexport default addColumnToTableHook;\n","import get from 'lodash/get';\n\nconst hasLocalePermission = (permissions, localeCode) => {\n  if (permissions) {\n    const hasPermission = permissions.some((permission) =>\n      get(permission, 'properties.locales', []).includes(localeCode)\n    );\n\n    if (hasPermission) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst getFirstLocale = (permissions) => {\n  if (permissions && permissions.length > 0) {\n    const firstAuthorizedNonDefaultLocale = get(permissions, [0, 'properties', 'locales', 0], null);\n\n    if (firstAuthorizedNonDefaultLocale) {\n      return firstAuthorizedNonDefaultLocale;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Entry point of the module\n */\nconst getDefaultLocale = (ctPermissions, locales = []) => {\n  const defaultLocale = locales.find((locale) => locale.isDefault);\n\n  if (!defaultLocale) {\n    return null;\n  }\n\n  const readPermissions = ctPermissions['plugin::content-manager.explorer.read'];\n  const createPermissions = ctPermissions['plugin::content-manager.explorer.create'];\n\n  if (hasLocalePermission(readPermissions, defaultLocale.code)) {\n    return defaultLocale.code;\n  }\n\n  if (hasLocalePermission(createPermissions, defaultLocale.code)) {\n    return defaultLocale.code;\n  }\n\n  // When the default locale is not authorized, we return the first authorized locale\n  const firstAuthorizedForReadNonDefaultLocale = getFirstLocale(readPermissions);\n\n  if (firstAuthorizedForReadNonDefaultLocale) {\n    return firstAuthorizedForReadNonDefaultLocale;\n  }\n\n  return getFirstLocale(createPermissions);\n};\n\nexport default getDefaultLocale;\n","import get from 'lodash/get';\nimport { parse, stringify } from 'qs';\n\nimport getDefaultLocale from '../../utils/getDefaultLocale';\n\nconst addLocaleToLinksSearch = (links, kind, contentTypeSchemas, locales, permissions) => {\n  return links.map((link) => {\n    const contentTypeUID = link.to.split(`/${kind}/`)[1];\n\n    const contentTypeSchema = contentTypeSchemas.find(({ uid }) => uid === contentTypeUID);\n\n    const hasI18nEnabled = get(contentTypeSchema, 'pluginOptions.i18n.localized', false);\n\n    if (!hasI18nEnabled) {\n      return link;\n    }\n\n    const contentTypePermissions = permissions[contentTypeUID];\n    const requiredPermissionsToViewALink =\n      kind === 'collectionType'\n        ? ['plugin::content-manager.explorer.read', 'plugin::content-manager.explorer.create']\n        : ['plugin::content-manager.explorer.read'];\n\n    const contentTypeNeededPermissions = Object.keys(contentTypePermissions).reduce(\n      (acc, current) => {\n        if (requiredPermissionsToViewALink.includes(current)) {\n          acc[current] = contentTypePermissions[current];\n\n          return acc;\n        }\n\n        acc[current] = [];\n\n        return acc;\n      },\n      {}\n    );\n\n    const defaultLocale = getDefaultLocale(contentTypeNeededPermissions, locales);\n\n    if (!defaultLocale) {\n      return { ...link, isDisplayed: false };\n    }\n\n    const linkParams = link.search ? parse(link.search) : {};\n\n    const params = linkParams\n      ? { ...linkParams, plugins: { ...linkParams.plugins, i18n: { locale: defaultLocale } } }\n      : { plugins: { i18n: { locale: defaultLocale } } };\n\n    const search = stringify(params, { encode: false });\n\n    return { ...link, search };\n  });\n};\n\nexport default addLocaleToLinksSearch;\n","import addLocaleToLinksSearch from './utils/addLocaleToLinksSearch';\n\nconst addLocaleToCollectionTypesLinksHook = ({ ctLinks, models }, store) => {\n  if (!ctLinks.length) {\n    return { ctLinks, models };\n  }\n\n  const storeState = store.getState();\n  const { locales } = storeState.i18n_locales;\n  const { collectionTypesRelatedPermissions } = storeState.rbacProvider;\n\n  const mutatedLinks = addLocaleToLinksSearch(\n    ctLinks,\n    'collectionType',\n    models,\n    locales,\n    collectionTypesRelatedPermissions\n  );\n\n  return { ctLinks: mutatedLinks, models };\n};\n\nexport default addLocaleToCollectionTypesLinksHook;\n","import addLocaleToLinksSearch from './utils/addLocaleToLinksSearch';\n\nconst addLocaleToSingleTypesLinks = ({ stLinks, models }, store) => {\n  if (!stLinks.length) {\n    return { stLinks, models };\n  }\n\n  const storeState = store.getState();\n  const { locales } = storeState.i18n_locales;\n  const { collectionTypesRelatedPermissions } = storeState.rbacProvider;\n\n  const mutatedLinks = addLocaleToLinksSearch(\n    stLinks,\n    'singleType',\n    models,\n    locales,\n    collectionTypesRelatedPermissions\n  );\n\n  return { stLinks: mutatedLinks, models };\n};\n\nexport default addLocaleToSingleTypesLinks;\n","import React from 'react';\n\nimport { Tooltip } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  border: none;\n  padding: 0;\n  background: transparent;\n  svg {\n    width: 12px;\n    height: 12px;\n    fill: ${({ theme }) => theme.colors.neutral500};\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\nconst LabelAction = ({ title, icon }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tooltip description={formatMessage(title)}>\n      <Button aria-label={formatMessage(title)} type=\"button\">\n        {icon}\n      </Button>\n    </Tooltip>\n  );\n};\n\nLabelAction.propTypes = {\n  icon: PropTypes.element.isRequired,\n  title: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    defaultMessage: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default LabelAction;\n","import React from 'react';\n\nimport { Earth as I18N, EarthStriked as StrikedWorld } from '@strapi/icons';\nimport get from 'lodash/get';\n\nimport LabelAction from '../components/LabelAction';\nimport { getTrad } from '../utils';\n\nconst getRelationFieldQueryInfos = (field, currentLocale) => ({\n  queryInfos: {\n    ...field.queryInfos,\n    defaultParams: { ...field.queryInfos.defaultParams, locale: currentLocale },\n    paramsToKeep: ['plugins.i18n.locale'],\n  },\n});\n\nconst shouldLocalizeRelationField = (field) =>\n  field?.fieldSchema?.type === 'relation' && field?.targetModelPluginOptions?.i18n?.localized;\n\nconst enhanceEditLayout = (layout, currentLocale) =>\n  layout.map((row) => {\n    const enhancedRow = row.reduce((acc, field) => {\n      const type = field?.fieldSchema?.type ?? null;\n      // uid and relation fields are always localized\n      const hasI18nEnabled =\n        field?.fieldSchema?.pluginOptions?.i18n?.localized ?? ['uid', 'relation'].includes(type);\n      const labelActionProps = {\n        title: {\n          id: hasI18nEnabled ? getTrad('Field.localized') : getTrad('Field.not-localized'),\n          defaultMessage: hasI18nEnabled\n            ? 'This value is unique for the selected locale'\n            : 'This value is common to all locales',\n        },\n        icon: hasI18nEnabled ? <I18N aria-hidden /> : <StrikedWorld aria-hidden />,\n      };\n      const labelAction = <LabelAction {...labelActionProps} />;\n\n      if (shouldLocalizeRelationField(field)) {\n        acc.push({\n          ...field,\n          labelAction,\n          ...getRelationFieldQueryInfos(field, currentLocale),\n        });\n\n        return acc;\n      }\n\n      acc.push({ ...field, labelAction });\n\n      return acc;\n    }, []);\n\n    return enhancedRow;\n  });\n\nconst enhanceComponentsLayout = (components, locale) => {\n  return Object.keys(components).reduce((acc, current) => {\n    const currentComponentLayout = components[current];\n\n    const enhancedEditLayout = enhanceComponentLayoutForRelations(\n      currentComponentLayout.layouts.edit,\n      locale\n    );\n\n    acc[current] = {\n      ...currentComponentLayout,\n      layouts: { ...currentComponentLayout.layouts, edit: enhancedEditLayout },\n    };\n\n    return acc;\n  }, {});\n};\n\nconst enhanceComponentLayoutForRelations = (layout, locale) =>\n  layout.map((row) => {\n    const enhancedRow = row.reduce((acc, field) => {\n      if (shouldLocalizeRelationField(field)) {\n        acc.push({ ...field, ...getRelationFieldQueryInfos(field, locale) });\n\n        return acc;\n      }\n\n      acc.push(field);\n\n      return acc;\n    }, []);\n\n    return enhancedRow;\n  });\n\nconst getPathToContentType = (pathArray) => ['contentType', ...pathArray];\n\nconst mutateEditViewLayoutHook = ({ layout, query }) => {\n  const hasI18nEnabled = get(\n    layout,\n    getPathToContentType(['pluginOptions', 'i18n', 'localized']),\n    false\n  );\n\n  if (!hasI18nEnabled) {\n    return { layout, query };\n  }\n\n  const currentLocale = get(query, ['plugins', 'i18n', 'locale'], null);\n\n  // This might break the cm, has the user might be redirected to the homepage\n  if (!currentLocale) {\n    return { layout, query };\n  }\n\n  const editLayoutPath = getPathToContentType(['layouts', 'edit']);\n  const editLayout = get(layout, editLayoutPath);\n  const nextEditLayout = enhanceEditLayout(editLayout, currentLocale);\n\n  const enhancedLayouts = {\n    ...layout.contentType.layouts,\n    edit: nextEditLayout,\n  };\n\n  const components = enhanceComponentsLayout(layout.components, currentLocale);\n\n  const enhancedData = {\n    query,\n    layout: {\n      ...layout,\n      contentType: {\n        ...layout.contentType,\n        layouts: enhancedLayouts,\n      },\n      components,\n    },\n  };\n\n  return enhancedData;\n};\n\nexport default mutateEditViewLayoutHook;\nexport { enhanceComponentLayoutForRelations, enhanceComponentsLayout, enhanceEditLayout };\n","import produce from 'immer';\nimport set from 'lodash/set';\n\nimport pluginId from '../pluginId';\n\nimport { ADD_LOCALE, DELETE_LOCALE, RESOLVE_LOCALES, UPDATE_LOCALE } from './constants';\n\nexport const initialState = {\n  isLoading: true,\n  locales: [],\n};\n\nconst localeReducer = produce((draftState = initialState, action = {}) => {\n  switch (action.type) {\n    case RESOLVE_LOCALES: {\n      draftState.isLoading = false;\n      draftState.locales = action.locales;\n      break;\n    }\n\n    case ADD_LOCALE: {\n      if (action.newLocale.isDefault) {\n        draftState.locales.forEach((locale) => {\n          locale.isDefault = false;\n        });\n      }\n\n      draftState.locales.push(action.newLocale);\n      break;\n    }\n\n    case DELETE_LOCALE: {\n      const locales = draftState.locales.filter((locale) => locale.id !== action.id);\n\n      set(draftState, 'locales', locales);\n      break;\n    }\n\n    case UPDATE_LOCALE: {\n      if (action.editedLocale.isDefault) {\n        draftState.locales.forEach((locale) => {\n          locale.isDefault = false;\n        });\n      }\n\n      const indexToEdit = draftState.locales.findIndex(\n        (locale) => locale.id === action.editedLocale.id\n      );\n\n      set(draftState.locales, indexToEdit, action.editedLocale);\n      break;\n    }\n\n    default:\n      return draftState;\n  }\n\n  return draftState;\n});\n\nconst reducers = {\n  [`${pluginId}_locales`]: localeReducer,\n};\n\nexport default reducers;\n","import {\n  contentManagementUtilRemoveFieldsFromData,\n  formatContentTypeData,\n  getFetchClient,\n} from '@strapi/helper-plugin';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport merge from 'lodash/merge';\nimport { parse } from 'qs';\n\nimport pluginId from '../pluginId';\n\nconst addCommonFieldsToInitialDataMiddleware =\n  () =>\n  ({ getState, dispatch }) =>\n  (next) =>\n  (action) => {\n    if (action.type !== 'ContentManager/CrudReducer/INIT_FORM') {\n      return next(action);\n    }\n\n    if (!action.rawQuery) {\n      return next(action);\n    }\n\n    const search = action.rawQuery.substring(1);\n    const query = parse(search);\n    const relatedEntityId = get(query, 'plugins.i18n.relatedEntityId', null);\n    const locale = get(query, 'plugins.i18n.locale', null);\n    const isSingleType = action.isSingleType;\n\n    if (!relatedEntityId && !isSingleType) {\n      return next(action);\n    }\n\n    const store = getState();\n    const cmDataStore = store['content-manager_editViewCrudReducer'];\n    const cmLayoutStore = store['content-manager_editViewLayoutManager'];\n    const { contentTypeDataStructure } = cmDataStore;\n    const { currentLayout } = cmLayoutStore;\n\n    const getData = async () => {\n      // Show a loader\n      dispatch({ type: 'ContentManager/CrudReducer/GET_DATA' });\n      const defaultDataStructure = cloneDeep(contentTypeDataStructure);\n\n      try {\n        const { data } = await getFetchClient().post(\n          `/${pluginId}/content-manager/actions/get-non-localized-fields`,\n          { model: currentLayout.contentType.uid, id: relatedEntityId, locale }\n        );\n\n        const { nonLocalizedFields, localizations } = data;\n\n        const merged = merge(defaultDataStructure, nonLocalizedFields);\n\n        const fieldsToRemove = [\n          'createdBy',\n          'updatedBy',\n          'publishedAt',\n          'id',\n          '_id',\n          'updatedAt',\n          'createdAt',\n        ];\n        const cleanedMerged = contentManagementUtilRemoveFieldsFromData(\n          merged,\n          currentLayout.contentType,\n          currentLayout.components,\n          fieldsToRemove\n        );\n        cleanedMerged.localizations = localizations;\n\n        action.data = formatContentTypeData(\n          cleanedMerged,\n          currentLayout.contentType,\n          currentLayout.components\n        );\n      } catch (err) {\n        // Silent\n      }\n\n      return next(action);\n    };\n\n    return getData();\n  };\n\nexport default addCommonFieldsToInitialDataMiddleware;\n","import get from 'lodash/get';\n\nconst extendCTBAttributeInitialDataMiddleware = () => {\n  return ({ getState }) =>\n    (next) =>\n    (action) => {\n      const enhanceAction = () => {\n        // the block here is to catch the error when trying to access the state\n        // of the ctb when the plugin is not mounted\n        try {\n          const store = getState();\n\n          const hasi18nEnabled = get(\n            store,\n            [\n              'content-type-builder_dataManagerProvider',\n              'modifiedData',\n              'contentType',\n              'schema',\n              'pluginOptions',\n              'i18n',\n              'localized',\n            ],\n            false\n          );\n\n          if (hasi18nEnabled) {\n            const pluginOptions = action.options\n              ? { ...action.options.pluginOptions, i18n: { localized: true } }\n              : { i18n: { localized: true } };\n\n            return next({\n              ...action,\n              options: {\n                pluginOptions,\n              },\n            });\n          }\n\n          return next(action);\n        } catch (err) {\n          return next(action);\n        }\n      };\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !['relation', 'component'].includes(action.attributeType) &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        action.type === 'ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA' &&\n        action.forTarget === 'contentType' &&\n        !action.isEditing\n      ) {\n        return enhanceAction();\n      }\n\n      if (\n        (action.type ===\n          'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO' ||\n          action.type === 'ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA') &&\n        action.forTarget === 'contentType'\n      ) {\n        return enhanceAction();\n      }\n\n      return next(action);\n    };\n};\n\nexport default extendCTBAttributeInitialDataMiddleware;\n","const extendCTBInitialDataMiddleware = () => {\n  return () => (next) => (action) => {\n    if (\n      action.type === 'ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT' &&\n      action.modalType === 'contentType'\n    ) {\n      const i18n = { localized: false };\n\n      const pluginOptions = action.data.pluginOptions\n        ? { ...action.data.pluginOptions, i18n }\n        : { i18n };\n\n      const data = { ...action.data, pluginOptions };\n\n      if (action.actionType === 'create') {\n        return next({ ...action, data });\n      }\n\n      // Override the action if the pluginOption config does not contain i18n\n      // In this case we need to set the proper initialData shape\n      if (!action.data.pluginOptions?.i18n?.localized) {\n        return next({ ...action, data });\n      }\n    }\n\n    // action is not the one we want to override\n    return next(action);\n  };\n};\n\nexport default extendCTBInitialDataMiddleware;\n","import get from 'lodash/get';\n\nconst filterPermissionWithLocale = (locale) => (permission) =>\n  get(permission, 'properties.locales', []).indexOf(locale) !== -1;\n\nconst localePermissionMiddleware = () => () => (next) => (action) => {\n  if (action.type !== 'ContentManager/RBACManager/SET_PERMISSIONS') {\n    return next(action);\n  }\n\n  const containerName = get(action, '__meta__.containerName', null);\n\n  if (!['editView', 'listView'].includes(containerName)) {\n    return next(action);\n  }\n\n  const locale = get(action, '__meta__.plugins.i18n.locale', null);\n\n  if (!locale) {\n    return next(action);\n  }\n\n  const permissions = action.permissions;\n\n  const nextPermissions = Object.keys(permissions).reduce((acc, key) => {\n    const currentPermission = permissions[key];\n    const filteredPermissions = currentPermission.filter(filterPermissionWithLocale(locale));\n\n    if (filteredPermissions.length) {\n      acc[key] = filteredPermissions;\n    }\n\n    return acc;\n  }, {});\n\n  return next({ ...action, permissions: nextPermissions });\n};\n\nexport default localePermissionMiddleware;\n","import addCommonFieldsToInitialDataMiddleware from './addCommonFieldsToInitialDataMiddleware';\nimport extendCTBAttributeInitialDataMiddleware from './extendCTBAttributeInitialDataMiddleware';\nimport extendCTBInitialDataMiddleware from './extendCTBInitialDataMiddleware';\nimport localePermissionMiddleware from './localePermissionMiddleware';\n\nconst middlewares = [\n  addCommonFieldsToInitialDataMiddleware,\n  extendCTBInitialDataMiddleware,\n  extendCTBAttributeInitialDataMiddleware,\n  localePermissionMiddleware,\n];\n\nexport default middlewares;\n","const LOCALIZED_FIELDS = [\n  'biginteger',\n  'boolean',\n  'component',\n  'date',\n  'datetime',\n  'decimal',\n  'dynamiczone',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'media',\n  'number',\n  'password',\n  'richtext',\n  'blocks',\n  'string',\n  'text',\n  'time',\n];\n\nexport default LOCALIZED_FIELDS;\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport omit from 'lodash/omit';\n\nimport LOCALIZED_FIELDS from './localizedFields';\n\nconst localizedPath = ['pluginOptions', 'i18n', 'localized'];\n\nconst addLocalisationToFields = (attributes) =>\n  Object.keys(attributes).reduce((acc, current) => {\n    const currentAttribute = attributes[current];\n\n    if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {\n      const i18n = { localized: true };\n\n      const pluginOptions = currentAttribute.pluginOptions\n        ? { ...currentAttribute.pluginOptions, i18n }\n        : { i18n };\n\n      acc[current] = { ...currentAttribute, pluginOptions };\n\n      return acc;\n    }\n\n    acc[current] = currentAttribute;\n\n    return acc;\n  }, {});\n\nconst disableAttributesLocalisation = (attributes) =>\n  Object.keys(attributes).reduce((acc, current) => {\n    acc[current] = omit(attributes[current], 'pluginOptions.i18n');\n\n    return acc;\n  }, {});\n\nconst mutateCTBContentTypeSchema = (nextSchema, prevSchema) => {\n  // Don't perform mutations components\n  if (!has(nextSchema, localizedPath)) {\n    return nextSchema;\n  }\n\n  const isNextSchemaLocalized = get(nextSchema, localizedPath, false);\n  const isPrevSchemaLocalized = get(prevSchema, ['schema', ...localizedPath], false);\n\n  // No need to perform modification on the schema, if the i18n feature was not changed\n  // at the ct level\n  if (isNextSchemaLocalized && isPrevSchemaLocalized) {\n    return nextSchema;\n  }\n\n  if (isNextSchemaLocalized) {\n    const attributes = addLocalisationToFields(nextSchema.attributes);\n\n    return { ...nextSchema, attributes };\n  }\n\n  // Remove the i18n object from the pluginOptions\n  if (!isNextSchemaLocalized) {\n    const pluginOptions = omit(nextSchema.pluginOptions, 'i18n');\n    const attributes = disableAttributesLocalisation(nextSchema.attributes);\n\n    return { ...nextSchema, pluginOptions, attributes };\n  }\n\n  return nextSchema;\n};\nexport default mutateCTBContentTypeSchema;\nexport { addLocalisationToFields, disableAttributesLocalisation };\n","import { prefixPluginTranslations } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport * as yup from 'yup';\n\nimport pluginPkg from '../../package.json';\n\nimport CheckboxConfirmation from './components/CheckboxConfirmation';\nimport CMEditViewInjectedComponents from './components/CMEditViewInjectedComponents';\nimport DeleteModalAdditionalInfos from './components/CMListViewInjectedComponents/DeleteModalAdditionalInfos';\nimport PublishModalAdditionalInfos from './components/CMListViewInjectedComponents/PublishModalAdditionalInfos';\nimport UnpublishModalAdditionalInfos from './components/CMListViewInjectedComponents/UnpublishModalAdditionalInfos';\nimport Initializer from './components/Initializer';\nimport LocalePicker from './components/LocalePicker';\nimport { PERMISSIONS } from './constants';\nimport addColumnToTableHook from './contentManagerHooks/addColumnToTable';\nimport addLocaleToCollectionTypesLinksHook from './contentManagerHooks/addLocaleToCollectionTypesLinks';\nimport addLocaleToSingleTypesLinksHook from './contentManagerHooks/addLocaleToSingleTypesLinks';\nimport mutateEditViewLayoutHook from './contentManagerHooks/mutateEditViewLayout';\nimport i18nReducers from './hooks/reducers';\nimport middlewares from './middlewares';\nimport pluginId from './pluginId';\nimport { getTrad } from './utils';\nimport LOCALIZED_FIELDS from './utils/localizedFields';\nimport mutateCTBContentTypeSchema from './utils/mutateCTBContentTypeSchema';\n\nconst name = pluginPkg.strapi.name;\n\nexport default {\n  register(app) {\n    app.addMiddlewares(middlewares);\n\n    app.addReducers(i18nReducers);\n\n    app.registerPlugin({\n      id: pluginId,\n      initializer: Initializer,\n      isReady: false,\n      name,\n    });\n  },\n  bootstrap(app) {\n    // Hooks that mutate the collection types links in order to add the locale filter\n    app.registerHook(\n      'Admin/CM/pages/App/mutate-collection-types-links',\n      addLocaleToCollectionTypesLinksHook\n    );\n    app.registerHook(\n      'Admin/CM/pages/App/mutate-single-types-links',\n      addLocaleToSingleTypesLinksHook\n    );\n    // Hook that adds a column into the CM's LV table\n    app.registerHook('Admin/CM/pages/ListView/inject-column-in-table', addColumnToTableHook);\n    // Hooks that mutates the edit view layout\n    app.registerHook('Admin/CM/pages/EditView/mutate-edit-view-layout', mutateEditViewLayoutHook);\n    // Add the settings link\n    app.addSettingsLink('global', {\n      intlLabel: {\n        id: getTrad('plugin.name'),\n        defaultMessage: 'Internationalization',\n      },\n      id: 'internationalization',\n      to: '/settings/internationalization',\n\n      async Component() {\n        const component = await import('./pages/SettingsPage');\n\n        return component;\n      },\n      permissions: PERMISSIONS.accessMain,\n    });\n\n    app.injectContentManagerComponent('editView', 'informations', {\n      name: 'i18n-locale-filter-edit-view',\n      Component: CMEditViewInjectedComponents,\n    });\n\n    app.injectContentManagerComponent('listView', 'actions', {\n      name: 'i18n-locale-filter',\n      Component: LocalePicker,\n    });\n\n    app.injectContentManagerComponent('listView', 'deleteModalAdditionalInfos', {\n      name: 'i18n-delete-bullets-in-modal',\n      Component: DeleteModalAdditionalInfos,\n    });\n\n    app.injectContentManagerComponent('listView', 'publishModalAdditionalInfos', {\n      name: 'i18n-publish-bullets-in-modal',\n      Component: PublishModalAdditionalInfos,\n    });\n\n    app.injectContentManagerComponent('listView', 'unpublishModalAdditionalInfos', {\n      name: 'i18n-unpublish-bullets-in-modal',\n      Component: UnpublishModalAdditionalInfos,\n    });\n\n    const ctbPlugin = app.getPlugin('content-type-builder');\n\n    if (ctbPlugin) {\n      const ctbFormsAPI = ctbPlugin.apis.forms;\n      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);\n      ctbFormsAPI.components.add({ id: 'checkboxConfirmation', component: CheckboxConfirmation });\n\n      ctbFormsAPI.extendContentType({\n        validator: () => ({\n          i18n: yup.object().shape({\n            localized: yup.bool(),\n          }),\n        }),\n        form: {\n          advanced() {\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTrad('plugin.schema.i18n.localized.description-content-type'),\n                  defaultMessage: 'Allows translating an entry into different languages',\n                },\n                type: 'checkboxConfirmation',\n                intlLabel: {\n                  id: getTrad('plugin.schema.i18n.localized.label-content-type'),\n                  defaultMessage: 'Localization',\n                },\n              },\n            ];\n          },\n        },\n      });\n\n      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {\n        validator: (args) => ({\n          i18n: yup.object().shape({\n            localized: yup.bool().test({\n              name: 'ensure-unique-localization',\n              message: getTrad('plugin.schema.i18n.ensure-unique-localization'),\n              test(value) {\n                if (value === undefined || value) {\n                  return true;\n                }\n\n                const unique = get(args, ['3', 'modifiedData', 'unique'], null);\n\n                // Unique fields must be localized\n                if (unique && !value) {\n                  return false;\n                }\n\n                return true;\n              },\n            }),\n          }),\n        }),\n        form: {\n          advanced({ contentTypeSchema, forTarget, type, step }) {\n            if (forTarget !== 'contentType') {\n              return [];\n            }\n\n            const hasI18nEnabled = get(\n              contentTypeSchema,\n              ['schema', 'pluginOptions', 'i18n', 'localized'],\n              false\n            );\n\n            if (!hasI18nEnabled) {\n              return [];\n            }\n\n            if (type === 'component' && step === '1') {\n              return [];\n            }\n\n            return [\n              {\n                name: 'pluginOptions.i18n.localized',\n                description: {\n                  id: getTrad('plugin.schema.i18n.localized.description-field'),\n                  defaultMessage: 'The field can have different values in each locale',\n                },\n                type: 'checkbox',\n                intlLabel: {\n                  id: getTrad('plugin.schema.i18n.localized.label-field'),\n                  defaultMessage: 'Enable localization for this field',\n                },\n              },\n            ];\n          },\n        },\n      });\n    }\n  },\n  async registerTrads({ locales }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["styled","Typography","description","name","useIntl","useState","value","jsxs","Fragment","jsx","Checkbox","Dialog","DialogBody","ExclamationMarkCircle","Flex","DialogFooter","Button","PropTypes","useSelector","data","getType","get","getOtherInfos","contentManagementUtilRemoveFieldsFromData","formatContentTypeData","useNotification","useDispatch","useCMEditViewDataManager","useFetchClient","Duplicate","Box","Select","Option","pxToRem","useHistory","stringify","Divider","useParams","useQueryParams","useMemo","has","Emphasis","useEffect","useRef","useRouteMatch","stopPropagation","Tooltip","SortIcon","Popover","parse","I18N","StrikedWorld","produce","set","cloneDeep","getFetchClient","merge","omit","i18nReducers","addLocaleToSingleTypesLinksHook","yup","prefixPluginTranslations"],"mappings":"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"}