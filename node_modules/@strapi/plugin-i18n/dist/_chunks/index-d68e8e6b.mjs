import { getType, getOtherInfos, contentManagementUtilRemoveFieldsFromData, formatContentTypeData, useNotification, useCMEditViewDataManager, useFetchClient, pxToRem, useQueryParams, stopPropagation, SortIcon, getFetchClient, prefixPluginTranslations } from "@strapi/helper-plugin";
import get from "lodash/get";
import * as yup from "yup";
import { jsxs, Fragment, jsx } from "react/jsx-runtime";
import { useState, useMemo, useEffect, useRef } from "react";
import { Typography, Checkbox, Dialog, DialogBody, Flex, DialogFooter, Button as Button$2, Box, Select, Option, Divider, Tooltip, Popover } from "@strapi/design-system";
import { ExclamationMarkCircle, Duplicate, Earth, EarthStriked } from "@strapi/icons";
import PropTypes from "prop-types";
import { useIntl } from "react-intl";
import styled from "styled-components";
import has from "lodash/has";
import { useSelector, useDispatch } from "react-redux";
import { useHistory, useParams, useRouteMatch } from "react-router-dom";
import { stringify, parse } from "qs";
import produce from "immer";
import set from "lodash/set";
import cloneDeep from "lodash/cloneDeep";
import merge from "lodash/merge";
import omit from "lodash/omit";
const __variableDynamicImportRuntimeHelper = (glob, path) => {
  const v = glob[path];
  if (v) {
    return typeof v === "function" ? v() : Promise.resolve(v);
  }
  return new Promise((_, reject) => {
    (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(reject.bind(null, new Error("Unknown variable dynamic import: " + path)));
  });
};
const name$1 = "@strapi/plugin-i18n";
const version = "4.16.2";
const description = "This plugin enables to create, to read and to update content in different languages, both from the Admin Panel and from the API";
const repository = {
  type: "git",
  url: "https://github.com/strapi/strapi.git",
  directory: "packages/plugins/i18n"
};
const license = "SEE LICENSE IN LICENSE";
const author = {
  name: "Strapi Solutions SAS",
  email: "hi@strapi.io",
  url: "https://strapi.io"
};
const maintainers = [
  {
    name: "Strapi Solutions SAS",
    email: "hi@strapi.io",
    url: "https://strapi.io"
  }
];
const exports = {
  "./strapi-admin": {
    source: "./admin/src/index.js",
    "import": "./dist/admin/index.mjs",
    require: "./dist/admin/index.js",
    "default": "./dist/admin/index.js"
  },
  "./strapi-server": {
    source: "./strapi-server.js",
    require: "./strapi-server.js",
    "default": "./strapi-server.js"
  },
  "./package.json": "./package.json"
};
const scripts = {
  build: "pack-up build",
  clean: "run -T rimraf dist",
  lint: "run -T eslint .",
  prepublishOnly: "yarn clean && yarn build",
  "test:front": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js",
  "test:front:ce": "run -T cross-env IS_EE=false jest --config ./jest.config.front.js",
  "test:front:watch": "run -T cross-env IS_EE=true jest --config ./jest.config.front.js --watchAll",
  "test:front:watch:ce": "run -T cross-env IS_EE=false jest --config ./jest.config.front.js --watchAll",
  "test:unit": "run -T jest",
  "test:unit:watch": "run -T jest --watch",
  watch: "pack-up watch"
};
const dependencies = {
  "@reduxjs/toolkit": "1.9.7",
  "@strapi/design-system": "1.13.1",
  "@strapi/helper-plugin": "4.16.2",
  "@strapi/icons": "1.13.0",
  "@strapi/utils": "4.16.2",
  formik: "2.4.0",
  immer: "9.0.19",
  lodash: "4.17.21",
  "prop-types": "^15.8.1",
  qs: "6.11.1",
  "react-intl": "6.4.1",
  "react-query": "3.39.3",
  "react-redux": "8.1.1",
  yup: "0.32.9"
};
const devDependencies = {
  "@strapi/pack-up": "4.16.2",
  "@strapi/strapi": "4.16.2",
  "@testing-library/react": "14.0.0",
  msw: "1.3.0",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "react-router-dom": "5.3.4",
  "styled-components": "5.3.3"
};
const peerDependencies = {
  "@strapi/strapi": "^4.0.0",
  react: "^17.0.0 || ^18.0.0",
  "react-dom": "^17.0.0 || ^18.0.0",
  "react-router-dom": "^5.2.0",
  "styled-components": "^5.2.1"
};
const engines = {
  node: ">=18.0.0 <=20.x.x",
  npm: ">=6.0.0"
};
const strapi = {
  displayName: "Internationalization",
  name: "i18n",
  description: "This plugin enables to create, to read and to update content in different languages, both from the Admin Panel and from the API.",
  required: false,
  kind: "plugin"
};
const gitHead = "b887f1aa475e6e924999198e2b645bec323ba29a";
const pluginPkg = {
  name: name$1,
  version,
  description,
  repository,
  license,
  author,
  maintainers,
  exports,
  scripts,
  dependencies,
  devDependencies,
  peerDependencies,
  engines,
  strapi,
  gitHead
};
const pluginId = pluginPkg.name.replace(/^@strapi\/plugin-/i, "");
const getTrad = (id) => `${pluginId}.${id}`;
const TextAlignTypography = styled(Typography)`
  text-align: center;
`;
const CheckboxConfirmation = ({ description: description2, isCreating, intlLabel, name: name2, onChange, value }) => {
  const { formatMessage } = useIntl();
  const [isOpen, setIsOpen] = useState(false);
  const handleChange = (value2) => {
    if (isCreating || value2) {
      return onChange({ target: { name: name2, value: value2, type: "checkbox" } });
    }
    if (!value2) {
      return setIsOpen(true);
    }
    return null;
  };
  const handleConfirm = () => {
    onChange({ target: { name: name2, value: false, type: "checkbox" } });
    setIsOpen(false);
  };
  const handleToggle = () => setIsOpen((prev) => !prev);
  const label = intlLabel.id ? formatMessage(
    { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },
    { ...intlLabel.values }
  ) : name2;
  const hint = description2 ? formatMessage(
    { id: description2.id, defaultMessage: description2.defaultMessage },
    { ...description2.values }
  ) : "";
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Checkbox,
      {
        hint,
        id: name2,
        name: name2,
        onValueChange: handleChange,
        value,
        type: "checkbox",
        children: label
      }
    ),
    isOpen && /* @__PURE__ */ jsxs(Dialog, { onClose: handleToggle, title: "Confirmation", isOpen, children: [
      /* @__PURE__ */ jsx(DialogBody, { icon: /* @__PURE__ */ jsx(ExclamationMarkCircle, {}), children: /* @__PURE__ */ jsxs(Flex, { direction: "column", alignItems: "stretch", gap: 2, children: [
        /* @__PURE__ */ jsx(Flex, { justifyContent: "center", children: /* @__PURE__ */ jsx(TextAlignTypography, { id: "confirm-description", children: formatMessage({
          id: getTrad("CheckboxConfirmation.Modal.content"),
          defaultMessage: "Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing)."
        }) }) }),
        /* @__PURE__ */ jsx(Flex, { justifyContent: "center", children: /* @__PURE__ */ jsx(Typography, { fontWeight: "semiBold", id: "confirm-description", children: formatMessage({
          id: getTrad("CheckboxConfirmation.Modal.body"),
          defaultMessage: "Do you want to disable it?"
        }) }) })
      ] }) }),
      /* @__PURE__ */ jsx(
        DialogFooter,
        {
          startAction: /* @__PURE__ */ jsx(Button$2, { onClick: handleToggle, variant: "tertiary", children: formatMessage({
            id: "components.popUpWarning.button.cancel",
            defaultMessage: "No, cancel"
          }) }),
          endAction: /* @__PURE__ */ jsx(Button$2, { variant: "danger-light", onClick: handleConfirm, children: formatMessage({
            id: getTrad("CheckboxConfirmation.Modal.button-confirm"),
            defaultMessage: "Yes, disable"
          }) })
        }
      )
    ] })
  ] });
};
CheckboxConfirmation.defaultProps = {
  description: null,
  isCreating: false
};
CheckboxConfirmation.propTypes = {
  description: PropTypes.shape({
    id: PropTypes.string.isRequired,
    defaultMessage: PropTypes.string.isRequired,
    values: PropTypes.object
  }),
  intlLabel: PropTypes.shape({
    id: PropTypes.string.isRequired,
    defaultMessage: PropTypes.string.isRequired,
    values: PropTypes.object
  }).isRequired,
  isCreating: PropTypes.bool,
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  value: PropTypes.bool.isRequired
};
const selectCollectionTypesRelatedPermissions = (state) => state.rbacProvider.collectionTypesRelatedPermissions;
const useContentTypePermissions = (slug) => {
  const collectionTypesRelatedPermissions = useSelector(selectCollectionTypesRelatedPermissions);
  const currentCTRelatedPermissions = collectionTypesRelatedPermissions[slug];
  const readPermissions = currentCTRelatedPermissions["plugin::content-manager.explorer.read"] || [];
  const createPermissions = currentCTRelatedPermissions["plugin::content-manager.explorer.create"] || [];
  return { createPermissions, readPermissions };
};
const selectI18NLocales = (state) => state.i18n_locales.locales;
const removePasswordAndRelationsFieldFromData = (data, contentTypeSchema, componentSchema) => {
  const recursiveCleanData = (data2, schema) => {
    return Object.keys(data2).reduce((acc, current) => {
      const attrType = getType(schema, current);
      const value = get(data2, current);
      const component = getOtherInfos(schema, [current, "component"]);
      const isRepeatable = getOtherInfos(schema, [current, "repeatable"]);
      if (attrType === "dynamiczone") {
        acc[current] = value.map((componentValue) => {
          const subCleanedData = recursiveCleanData(
            componentValue,
            componentSchema[componentValue.__component]
          );
          return subCleanedData;
        });
        return acc;
      }
      if (attrType === "component") {
        if (isRepeatable) {
          acc[current] = value ? value.map((compoData) => {
            const subCleanedData = recursiveCleanData(compoData, componentSchema[component]);
            return subCleanedData;
          }) : value;
        } else {
          acc[current] = value ? recursiveCleanData(value, componentSchema[component]) : value;
        }
        return acc;
      }
      if (attrType !== "password" && attrType !== "relation") {
        acc[current] = value;
      }
      return acc;
    }, {});
  };
  return recursiveCleanData(data, contentTypeSchema);
};
const cleanData = (data, { contentType, components }, initialLocalizations) => {
  const dataWithoutPasswordsAndRelations = removePasswordAndRelationsFieldFromData(
    data,
    contentType,
    components
  );
  dataWithoutPasswordsAndRelations.localizations = initialLocalizations;
  const fieldsToRemove = ["createdBy", "updatedBy", "publishedAt", "id", "updatedAt", "createdAt"];
  const cleanedClonedData = contentManagementUtilRemoveFieldsFromData(
    dataWithoutPasswordsAndRelations,
    contentType,
    components,
    fieldsToRemove
  );
  return formatContentTypeData(cleanedClonedData, contentType, components);
};
const generateOptions = (appLocales, currentLocale, localizations, permissions) => {
  return appLocales.filter(({ code }) => {
    return code !== currentLocale && (localizations || []).findIndex(({ locale }) => locale === code) !== -1;
  }).filter(({ code }) => {
    return permissions.some(({ properties }) => get(properties, "locales", []).includes(code));
  }).map((locale) => {
    return {
      label: locale.name,
      value: localizations.find((loc) => locale.code === loc.locale).id
    };
  });
};
const StyledTypography = styled(Typography)`
  svg {
    margin-right: ${({ theme }) => theme.spaces[2]};
    fill: none;
    > g,
    path {
      fill: ${({ theme }) => theme.colors.primary600};
    }
  }
`;
const CenteredTypography = styled(Typography)`
  text-align: center;
`;
const CMEditViewCopyLocale = (props) => {
  if (!props.localizations.length) {
    return null;
  }
  return /* @__PURE__ */ jsx(Content, { ...props });
};
const Content = ({ appLocales, currentLocale, localizations, readPermissions }) => {
  const options = generateOptions(appLocales, currentLocale, localizations, readPermissions);
  const toggleNotification = useNotification();
  const { formatMessage } = useIntl();
  const dispatch = useDispatch();
  const { allLayoutData, initialData, slug } = useCMEditViewDataManager();
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [value, setValue] = useState(options[0]?.value || "");
  const { get: get2 } = useFetchClient();
  const handleConfirmCopyLocale = async () => {
    if (!value) {
      handleToggle();
      return;
    }
    const requestURL = `/content-manager/collection-types/${slug}/${value}`;
    setIsLoading(true);
    try {
      const { data: response } = await get2(requestURL);
      const cleanedData = cleanData(response, allLayoutData, localizations);
      ["createdBy", "updatedBy", "publishedAt", "id", "createdAt"].forEach((key) => {
        if (!initialData[key])
          return;
        cleanedData[key] = initialData[key];
      });
      dispatch({
        type: "ContentManager/CrudReducer/GET_DATA_SUCCEEDED",
        data: cleanedData,
        setModifiedDataOnly: true
      });
      toggleNotification({
        type: "success",
        message: {
          id: getTrad("CMEditViewCopyLocale.copy-success"),
          defaultMessage: "Locale copied!"
        }
      });
    } catch (err) {
      console.error(err);
      toggleNotification({
        type: "warning",
        message: {
          id: getTrad("CMEditViewCopyLocale.copy-failure"),
          defaultMessage: "Failed to copy locale"
        }
      });
    } finally {
      setIsLoading(false);
      handleToggle();
    }
  };
  const handleChange = (value2) => {
    setValue(value2);
  };
  const handleToggle = () => {
    setIsOpen((prev) => !prev);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      StyledTypography,
      {
        fontSize: 2,
        textColor: "primary600",
        as: "button",
        type: "button",
        onClick: handleToggle,
        children: /* @__PURE__ */ jsxs(Flex, { children: [
          /* @__PURE__ */ jsx(Duplicate, { width: "12px", height: "12px" }),
          formatMessage({
            id: getTrad("CMEditViewCopyLocale.copy-text"),
            defaultMessage: "Fill in from another locale"
          })
        ] })
      }
    ),
    isOpen && /* @__PURE__ */ jsxs(Dialog, { onClose: handleToggle, title: "Confirmation", isOpen, children: [
      /* @__PURE__ */ jsx(DialogBody, { icon: /* @__PURE__ */ jsx(ExclamationMarkCircle, {}), children: /* @__PURE__ */ jsxs(Flex, { direction: "column", alignItems: "stretch", gap: 2, children: [
        /* @__PURE__ */ jsx(Flex, { justifyContent: "center", children: /* @__PURE__ */ jsx(CenteredTypography, { id: "confirm-description", children: formatMessage({
          id: getTrad("CMEditViewCopyLocale.ModalConfirm.content"),
          defaultMessage: "Your current content will be erased and filled by the content of the selected locale:"
        }) }) }),
        /* @__PURE__ */ jsx(Box, { children: /* @__PURE__ */ jsx(
          Select,
          {
            label: formatMessage({
              id: getTrad("Settings.locales.modal.locales.label")
            }),
            onChange: handleChange,
            value,
            children: options.map(({ label, value: value2 }) => {
              return /* @__PURE__ */ jsx(Option, { value: value2, children: label }, value2);
            })
          }
        ) })
      ] }) }),
      /* @__PURE__ */ jsx(
        DialogFooter,
        {
          startAction: /* @__PURE__ */ jsx(Button$2, { onClick: handleToggle, variant: "tertiary", children: formatMessage({
            id: "popUpWarning.button.cancel",
            defaultMessage: "No, cancel"
          }) }),
          endAction: /* @__PURE__ */ jsx(Button$2, { variant: "success", onClick: handleConfirmCopyLocale, loading: isLoading, children: formatMessage({
            id: getTrad("CMEditViewCopyLocale.submit-text"),
            defaultMessage: "Yes, fill in"
          }) })
        }
      )
    ] })
  ] });
};
CMEditViewCopyLocale.propTypes = {
  localizations: PropTypes.array.isRequired
};
Content.propTypes = {
  appLocales: PropTypes.arrayOf(
    PropTypes.shape({
      code: PropTypes.string.isRequired,
      name: PropTypes.string
    })
  ).isRequired,
  currentLocale: PropTypes.string.isRequired,
  localizations: PropTypes.array.isRequired,
  readPermissions: PropTypes.array.isRequired
};
const statusMap = {
  "did-not-create-locale": {
    backgroundColor: "neutral0",
    borderColor: "neutral500"
  },
  draft: {
    backgroundColor: "secondary700"
  },
  published: {
    backgroundColor: "success700"
  }
};
const statusToTitleMap = {
  draft: "content-manager.components.Select.draft-info-title",
  published: "content-manager.components.Select.publish-info-title",
  "did-not-create-locale": getTrad("components.Select.locales.not-available")
};
const StyledBullet = styled.div`
  width: ${pxToRem(6)};
  height: ${pxToRem(6)};
  border: ${({ theme, status }) => `1px solid ${theme.colors[statusMap[status].borderColor]}`};
  background: ${({ theme, status }) => theme.colors[statusMap[status].backgroundColor]};
  border-radius: 50%;
  cursor: pointer;
`;
const Bullet = ({ status }) => {
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsx(StyledBullet, { status, title: formatMessage({ id: statusToTitleMap[status] }) });
};
Bullet.propTypes = {
  status: PropTypes.oneOf(["draft", "published", "did-not-create-locale"]).isRequired
};
const createLocalesOption = (localesToDisplay, localesFromData) => {
  return localesToDisplay.map(({ name: name2, code }) => {
    const matchingLocaleInData = localesFromData.find(({ locale }) => locale === code);
    let status = "did-not-create-locale";
    if (matchingLocaleInData) {
      status = matchingLocaleInData.publishedAt === null ? "draft" : "published";
    }
    return {
      id: matchingLocaleInData ? matchingLocaleInData.id : null,
      label: name2,
      value: code,
      status
    };
  });
};
const CMEditViewLocalePicker = ({
  appLocales,
  createPermissions,
  currentEntityId,
  currentLocaleStatus,
  hasDraftAndPublishEnabled,
  isSingleType,
  localizations,
  query,
  readPermissions,
  setQuery,
  slug
}) => {
  const { formatMessage } = useIntl();
  const currentLocale = get(query, "plugins.i18n.locale", false);
  const { push } = useHistory();
  const handleChange = (value2) => {
    if (value2 === currentLocale) {
      return;
    }
    const nextLocale = options.find((option) => {
      return option.value === value2;
    });
    const { status, id } = nextLocale;
    let defaultParams = {
      plugins: {
        ...query.plugins,
        i18n: { ...query.plugins.i18n, locale: value2 }
      }
    };
    if (currentEntityId) {
      defaultParams.plugins.i18n.relatedEntityId = currentEntityId;
    }
    if (isSingleType) {
      setQuery(defaultParams);
      return;
    }
    if (status === "did-not-create-locale") {
      push({
        pathname: `/content-manager/collectionType/${slug}/create`,
        search: stringify(defaultParams, { encode: false })
      });
      return;
    }
    push({
      pathname: `/content-manager/collectionType/${slug}/${id}`,
      search: stringify(defaultParams, { encode: false })
    });
  };
  const options = createLocalesOption(appLocales, localizations).filter(({ status, value: value2 }) => {
    if (status === "did-not-create-locale") {
      return createPermissions.find(
        ({ properties }) => get(properties, "locales", []).includes(value2)
      );
    }
    return readPermissions.find(({ properties }) => get(properties, "locales", []).includes(value2));
  });
  const filteredOptions = options.filter(({ value: value2 }) => value2 !== currentLocale);
  const currentLocaleObject = appLocales.find(({ code }) => code === currentLocale);
  const value = options.find(({ value: value2 }) => {
    return value2 === currentLocale;
  }) || { value: currentLocaleObject.code, label: currentLocaleObject.name };
  if (!currentLocale) {
    return null;
  }
  return /* @__PURE__ */ jsxs(Box, { paddingTop: 6, children: [
    /* @__PURE__ */ jsx(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: getTrad("plugin.name"), defaultMessage: "Internationalization" }) }),
    /* @__PURE__ */ jsx(Divider, { unsetMargin: false, marginTop: 2, marginBottom: 6 }),
    /* @__PURE__ */ jsxs(Flex, { direction: "column", alignItems: "stretch", gap: 2, children: [
      /* @__PURE__ */ jsxs(
        Select,
        {
          label: formatMessage({
            id: getTrad("Settings.locales.modal.locales.label")
          }),
          onChange: handleChange,
          value: value?.value,
          children: [
            /* @__PURE__ */ jsx(
              Option,
              {
                value: value?.value,
                disabled: true,
                startIcon: hasDraftAndPublishEnabled ? /* @__PURE__ */ jsx(Bullet, { status: currentLocaleStatus }) : null,
                children: value?.label
              }
            ),
            filteredOptions.map((option) => {
              return /* @__PURE__ */ jsx(
                Option,
                {
                  value: option.value,
                  startIcon: hasDraftAndPublishEnabled ? /* @__PURE__ */ jsx(Bullet, { status: option.status }) : null,
                  children: option.label
                },
                option.value
              );
            })
          ]
        }
      ),
      /* @__PURE__ */ jsx(
        CMEditViewCopyLocale,
        {
          appLocales,
          currentLocale,
          localizations,
          readPermissions
        }
      )
    ] })
  ] });
};
CMEditViewLocalePicker.defaultProps = {
  createPermissions: [],
  currentEntityId: null,
  currentLocaleStatus: "did-not-create-locale",
  isSingleType: false,
  localizations: [],
  query: {},
  readPermissions: []
};
CMEditViewLocalePicker.propTypes = {
  appLocales: PropTypes.array.isRequired,
  createPermissions: PropTypes.array,
  currentEntityId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  currentLocaleStatus: PropTypes.string,
  hasDraftAndPublishEnabled: PropTypes.bool.isRequired,
  isSingleType: PropTypes.bool,
  localizations: PropTypes.array,
  query: PropTypes.object,
  readPermissions: PropTypes.array,
  setQuery: PropTypes.func.isRequired,
  slug: PropTypes.string.isRequired
};
const CMEditViewInjectedComponents = () => {
  const { layout, modifiedData, initialData, slug, isSingleType } = useCMEditViewDataManager();
  const { createPermissions, readPermissions } = useContentTypePermissions(slug);
  const locales = useSelector(selectI18NLocales);
  const params = useParams();
  const [{ query }, setQuery] = useQueryParams();
  const id = get(params, "id", null);
  const currentEntityId = id;
  const defaultLocale = locales.find((loc) => loc.isDefault);
  const currentLocale = get(query, "plugins.i18n.locale", defaultLocale.code);
  const hasI18nEnabled = get(layout, ["pluginOptions", "i18n", "localized"], false);
  const hasDraftAndPublishEnabled = get(layout, ["options", "draftAndPublish"], false);
  const defaultQuery = useMemo(() => {
    if (!query) {
      return { plugins: { i18n: { locale: currentLocale } } };
    }
    return query;
  }, [query, currentLocale]);
  if (!hasI18nEnabled) {
    return null;
  }
  if (!currentLocale) {
    return null;
  }
  const localizations = get(modifiedData, "localizations", []);
  let currentLocaleStatus = "did-not-create-locale";
  if (has(initialData, "publishedAt")) {
    currentLocaleStatus = initialData.publishedAt ? "published" : "draft";
  }
  return /* @__PURE__ */ jsx(
    CMEditViewLocalePicker,
    {
      appLocales: locales,
      currentEntityId,
      createPermissions,
      currentLocaleStatus,
      hasDraftAndPublishEnabled,
      localizations,
      isSingleType,
      query: defaultQuery,
      readPermissions,
      setQuery,
      slug
    }
  );
};
const selectContentManagerListViewPluginOptions = (state) => state["content-manager_listView"].contentType.pluginOptions;
const useHasI18n = () => {
  const pluginOptions = useSelector(selectContentManagerListViewPluginOptions);
  return get(pluginOptions, "i18n.localized", false);
};
const Emphasis$2 = (chunks) => {
  return /* @__PURE__ */ jsx(Typography, { fontWeight: "semiBold", textColor: "danger500", children: chunks });
};
const DeleteModalAdditionalInfos = () => {
  const hasI18nEnabled = useHasI18n();
  const { formatMessage } = useIntl();
  if (!hasI18nEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsx(Typography, { textColor: "danger500", children: formatMessage(
    {
      id: getTrad("Settings.list.actions.deleteAdditionalInfos"),
      defaultMessage: "This will delete the active locale versions <em>(from Internationalization)</em>"
    },
    {
      em: Emphasis$2
    }
  ) });
};
const Emphasis$1 = (chunks) => {
  return /* @__PURE__ */ jsx(Typography, { fontWeight: "semiBold", textColor: "danger500", children: chunks });
};
const PublishModalAdditionalInfos = () => {
  const hasI18nEnabled = useHasI18n();
  const { formatMessage } = useIntl();
  if (!hasI18nEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsx(Typography, { textColor: "danger500", children: formatMessage(
    {
      id: getTrad("Settings.list.actions.publishAdditionalInfos"),
      defaultMessage: "This will publish the active locale versions <em>(from Internationalization)</em>"
    },
    {
      em: Emphasis$1
    }
  ) });
};
const Emphasis = (chunks) => {
  return /* @__PURE__ */ jsx(Typography, { fontWeight: "semiBold", textColor: "danger500", children: chunks });
};
const UnpublishModalAdditionalInfos = () => {
  const hasI18nEnabled = useHasI18n();
  const { formatMessage } = useIntl();
  if (!hasI18nEnabled) {
    return null;
  }
  return /* @__PURE__ */ jsx(Typography, { textColor: "danger500", children: formatMessage(
    {
      id: getTrad("Settings.list.actions.unpublishAdditionalInfos"),
      defaultMessage: "This will unpublish the active locale versions <em>(from Internationalization)</em>"
    },
    {
      em: Emphasis
    }
  ) });
};
const RESOLVE_LOCALES = `${pluginId}/locales/resolve-locales`;
const ADD_LOCALE = `${pluginId}/locales/add`;
const DELETE_LOCALE = `${pluginId}/locales/delete`;
const UPDATE_LOCALE = `${pluginId}/locales/update`;
const useLocales = () => {
  const dispatch = useDispatch();
  const toggleNotification = useNotification();
  const locales = useSelector((state) => state.i18n_locales.locales);
  const isLoading = useSelector((state) => state.i18n_locales.isLoading);
  const { get: get2 } = useFetchClient();
  useEffect(() => {
    get2("/i18n/locales").then(({ data }) => dispatch({ type: RESOLVE_LOCALES, locales: data })).catch((err) => {
      if ("code" in err && err?.code === "ERR_CANCELED") {
        return;
      }
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
    });
  }, [dispatch, get2, toggleNotification]);
  return { locales, isLoading };
};
const Initializer = ({ setPlugin }) => {
  const { isLoading, locales } = useLocales();
  const ref = useRef();
  ref.current = setPlugin;
  useEffect(() => {
    if (!isLoading && locales.length > 0) {
      ref.current(pluginId);
    }
  }, [isLoading, locales]);
  return null;
};
Initializer.propTypes = {
  setPlugin: PropTypes.func.isRequired
};
const getLocaleFromQuery = (query) => {
  return get(query, "plugins.i18n.locale", void 0);
};
const getInitialLocale = (query, locales = []) => {
  const localeFromQuery = getLocaleFromQuery(query);
  if (localeFromQuery) {
    return locales.find((locale) => locale.code === localeFromQuery);
  }
  return locales.find((locale) => locale.isDefault);
};
const LocalePicker = () => {
  const { formatMessage } = useIntl();
  const dispatch = useDispatch();
  const locales = useSelector(selectI18NLocales);
  const [{ query }, setQuery] = useQueryParams();
  const {
    params: { slug }
  } = useRouteMatch("/content-manager/collectionType/:slug");
  const isFieldLocalized = useHasI18n();
  const { createPermissions, readPermissions } = useContentTypePermissions(slug);
  const initialLocale = getInitialLocale(query, locales);
  const [selected, setSelected] = useState(initialLocale?.code || "");
  if (!isFieldLocalized) {
    return null;
  }
  if (!locales || locales.length === 0) {
    return null;
  }
  const displayedLocales = locales.filter((locale) => {
    const canCreate = createPermissions.find(({ properties }) => {
      return get(properties, "locales", []).includes(locale.code);
    });
    const canRead = readPermissions.find(
      ({ properties }) => get(properties, "locales", []).includes(locale.code)
    );
    return canCreate || canRead;
  });
  const handleClick = (code) => {
    if (code === selected) {
      return;
    }
    setSelected(code);
    setTimeout(() => {
      dispatch({ type: "ContentManager/RBACManager/RESET_PERMISSIONS" });
      setQuery({
        page: 1,
        plugins: { ...query.plugins, i18n: { locale: code } }
      });
    });
  };
  return /* @__PURE__ */ jsx(
    Select,
    {
      size: "S",
      "aria-label": formatMessage({ id: getTrad("actions.select-locale"), defaultMessage: "" }),
      value: selected,
      onChange: handleClick,
      children: displayedLocales.map((locale) => /* @__PURE__ */ jsx(Option, { id: `menu-item${locale.name || locale.code}`, value: locale.code, children: locale.name }, locale.id))
    }
  );
};
const PERMISSIONS = {
  accessMain: [{ action: "plugin::i18n.locale.read", subject: null }],
  create: [{ action: "plugin::i18n.locale.create", subject: null }],
  delete: [{ action: "plugin::i18n.locale.delete", subject: null }],
  update: [{ action: "plugin::i18n.locale.update", subject: null }],
  read: [{ action: "plugin::i18n.locale.read", subject: null }]
};
const Button$1 = styled.button`
  svg {
    > g,
    path {
      fill: ${({ theme }) => theme.colors.neutral500};
    }
  }
  &:hover {
    svg {
      > g,
      path {
        fill: ${({ theme }) => theme.colors.neutral600};
      }
    }
  }
  &:active {
    svg {
      > g,
      path {
        fill: ${({ theme }) => theme.colors.neutral400};
      }
    }
  }
`;
const ActionWrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  height: ${32 / 16}rem;
  width: ${32 / 16}rem;
  svg {
    height: ${4 / 16}rem;
  }
`;
const mapToLocaleName = (locales, localeCode) => get(
  locales.find(({ code }) => code === localeCode),
  "name",
  localeCode
);
const LocaleListCell = ({ localizations, locale: currentLocaleCode, id }) => {
  const locales = useSelector(selectI18NLocales);
  const allLocalizations = [{ locale: currentLocaleCode }, ...localizations];
  const localizationNames = allLocalizations.map((locale) => locale.locale);
  const defaultLocale = locales.find((locale) => locale.isDefault);
  const hasDefaultLocale = localizationNames.includes(defaultLocale.code);
  const [visible, setVisible] = useState(false);
  const buttonRef = useRef();
  const { formatMessage } = useIntl();
  let localesArray = [];
  if (hasDefaultLocale) {
    const ctLocalesWithoutDefault = localizationNames.filter(
      (locale) => locale !== defaultLocale.code
    );
    const ctLocalesNamesWithoutDefault = ctLocalesWithoutDefault.map(
      (locale) => mapToLocaleName(locales, locale)
    );
    ctLocalesNamesWithoutDefault.sort();
    const ctLocalesNamesWithDefault = [
      `${defaultLocale.name} (default)`,
      ...ctLocalesNamesWithoutDefault
    ];
    localesArray = ctLocalesNamesWithDefault;
  } else {
    const ctLocales = localizationNames.map((locale) => mapToLocaleName(locales, locale));
    ctLocales.sort();
    localesArray = ctLocales;
  }
  const handleTogglePopover = () => setVisible((prev) => !prev);
  const elId = `entry-${id}__locale`;
  const localesNames = localesArray.join(", ");
  return /* @__PURE__ */ jsx(Flex, { ...stopPropagation, children: /* @__PURE__ */ jsx(
    Tooltip,
    {
      label: formatMessage({
        id: getTrad("CMListView.popover.display-locales.label"),
        defaultMessage: "Display translated locales"
      }),
      children: /* @__PURE__ */ jsx(Button$1, { type: "button", onClick: handleTogglePopover, ref: buttonRef, children: /* @__PURE__ */ jsxs(Flex, { children: [
        /* @__PURE__ */ jsx(
          Typography,
          {
            style: { maxWidth: "252px", cursor: "pointer" },
            "data-for": elId,
            "data-tip": localesNames,
            textColor: "neutral800",
            ellipsis: true,
            children: localesNames
          }
        ),
        /* @__PURE__ */ jsxs(ActionWrapper, { children: [
          /* @__PURE__ */ jsx(SortIcon, {}),
          visible && /* @__PURE__ */ jsx(Popover, { onDismiss: handleTogglePopover, source: buttonRef, spacing: 16, centered: true, children: /* @__PURE__ */ jsx("ul", { children: localesArray.map((name2) => /* @__PURE__ */ jsx(Box, { padding: 3, as: "li", children: /* @__PURE__ */ jsx(Typography, { children: name2 }) }, name2)) }) })
        ] })
      ] }) })
    }
  ) });
};
LocaleListCell.propTypes = {
  id: PropTypes.number.isRequired,
  localizations: PropTypes.arrayOf(
    PropTypes.shape({
      locale: PropTypes.string.isRequired
    })
  ).isRequired,
  locale: PropTypes.string.isRequired
};
const addColumnToTableHook = ({ displayedHeaders, layout }) => {
  const isFieldLocalized = get(layout, "contentType.pluginOptions.i18n.localized", false);
  if (!isFieldLocalized) {
    return { displayedHeaders, layout };
  }
  return {
    displayedHeaders: [
      ...displayedHeaders,
      {
        key: "__locale_key__",
        fieldSchema: { type: "string" },
        metadatas: { label: "Content available in", searchable: false, sortable: false },
        name: "locales",
        cellFormatter: (props) => /* @__PURE__ */ jsx(LocaleListCell, { ...props })
      }
    ],
    layout
  };
};
const hasLocalePermission = (permissions, localeCode) => {
  if (permissions) {
    const hasPermission = permissions.some(
      (permission) => get(permission, "properties.locales", []).includes(localeCode)
    );
    if (hasPermission) {
      return true;
    }
  }
  return false;
};
const getFirstLocale = (permissions) => {
  if (permissions && permissions.length > 0) {
    const firstAuthorizedNonDefaultLocale = get(permissions, [0, "properties", "locales", 0], null);
    if (firstAuthorizedNonDefaultLocale) {
      return firstAuthorizedNonDefaultLocale;
    }
  }
  return null;
};
const getDefaultLocale = (ctPermissions, locales = []) => {
  const defaultLocale = locales.find((locale) => locale.isDefault);
  if (!defaultLocale) {
    return null;
  }
  const readPermissions = ctPermissions["plugin::content-manager.explorer.read"];
  const createPermissions = ctPermissions["plugin::content-manager.explorer.create"];
  if (hasLocalePermission(readPermissions, defaultLocale.code)) {
    return defaultLocale.code;
  }
  if (hasLocalePermission(createPermissions, defaultLocale.code)) {
    return defaultLocale.code;
  }
  const firstAuthorizedForReadNonDefaultLocale = getFirstLocale(readPermissions);
  if (firstAuthorizedForReadNonDefaultLocale) {
    return firstAuthorizedForReadNonDefaultLocale;
  }
  return getFirstLocale(createPermissions);
};
const addLocaleToLinksSearch = (links, kind, contentTypeSchemas, locales, permissions) => {
  return links.map((link) => {
    const contentTypeUID = link.to.split(`/${kind}/`)[1];
    const contentTypeSchema = contentTypeSchemas.find(({ uid }) => uid === contentTypeUID);
    const hasI18nEnabled = get(contentTypeSchema, "pluginOptions.i18n.localized", false);
    if (!hasI18nEnabled) {
      return link;
    }
    const contentTypePermissions = permissions[contentTypeUID];
    const requiredPermissionsToViewALink = kind === "collectionType" ? ["plugin::content-manager.explorer.read", "plugin::content-manager.explorer.create"] : ["plugin::content-manager.explorer.read"];
    const contentTypeNeededPermissions = Object.keys(contentTypePermissions).reduce(
      (acc, current) => {
        if (requiredPermissionsToViewALink.includes(current)) {
          acc[current] = contentTypePermissions[current];
          return acc;
        }
        acc[current] = [];
        return acc;
      },
      {}
    );
    const defaultLocale = getDefaultLocale(contentTypeNeededPermissions, locales);
    if (!defaultLocale) {
      return { ...link, isDisplayed: false };
    }
    const linkParams = link.search ? parse(link.search) : {};
    const params = linkParams ? { ...linkParams, plugins: { ...linkParams.plugins, i18n: { locale: defaultLocale } } } : { plugins: { i18n: { locale: defaultLocale } } };
    const search = stringify(params, { encode: false });
    return { ...link, search };
  });
};
const addLocaleToCollectionTypesLinksHook = ({ ctLinks, models }, store) => {
  if (!ctLinks.length) {
    return { ctLinks, models };
  }
  const storeState = store.getState();
  const { locales } = storeState.i18n_locales;
  const { collectionTypesRelatedPermissions } = storeState.rbacProvider;
  const mutatedLinks = addLocaleToLinksSearch(
    ctLinks,
    "collectionType",
    models,
    locales,
    collectionTypesRelatedPermissions
  );
  return { ctLinks: mutatedLinks, models };
};
const addLocaleToSingleTypesLinks = ({ stLinks, models }, store) => {
  if (!stLinks.length) {
    return { stLinks, models };
  }
  const storeState = store.getState();
  const { locales } = storeState.i18n_locales;
  const { collectionTypesRelatedPermissions } = storeState.rbacProvider;
  const mutatedLinks = addLocaleToLinksSearch(
    stLinks,
    "singleType",
    models,
    locales,
    collectionTypesRelatedPermissions
  );
  return { stLinks: mutatedLinks, models };
};
const Button = styled.button`
  border: none;
  padding: 0;
  background: transparent;
  svg {
    width: 12px;
    height: 12px;
    fill: ${({ theme }) => theme.colors.neutral500};
    path {
      fill: ${({ theme }) => theme.colors.neutral500};
    }
  }
`;
const LabelAction = ({ title, icon }) => {
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsx(Tooltip, { description: formatMessage(title), children: /* @__PURE__ */ jsx(Button, { "aria-label": formatMessage(title), type: "button", children: icon }) });
};
LabelAction.propTypes = {
  icon: PropTypes.element.isRequired,
  title: PropTypes.shape({
    id: PropTypes.string.isRequired,
    defaultMessage: PropTypes.string.isRequired
  }).isRequired
};
const getRelationFieldQueryInfos = (field, currentLocale) => ({
  queryInfos: {
    ...field.queryInfos,
    defaultParams: { ...field.queryInfos.defaultParams, locale: currentLocale },
    paramsToKeep: ["plugins.i18n.locale"]
  }
});
const shouldLocalizeRelationField = (field) => field?.fieldSchema?.type === "relation" && field?.targetModelPluginOptions?.i18n?.localized;
const enhanceEditLayout = (layout, currentLocale) => layout.map((row) => {
  const enhancedRow = row.reduce((acc, field) => {
    const type = field?.fieldSchema?.type ?? null;
    const hasI18nEnabled = field?.fieldSchema?.pluginOptions?.i18n?.localized ?? ["uid", "relation"].includes(type);
    const labelActionProps = {
      title: {
        id: hasI18nEnabled ? getTrad("Field.localized") : getTrad("Field.not-localized"),
        defaultMessage: hasI18nEnabled ? "This value is unique for the selected locale" : "This value is common to all locales"
      },
      icon: hasI18nEnabled ? /* @__PURE__ */ jsx(Earth, { "aria-hidden": true }) : /* @__PURE__ */ jsx(EarthStriked, { "aria-hidden": true })
    };
    const labelAction = /* @__PURE__ */ jsx(LabelAction, { ...labelActionProps });
    if (shouldLocalizeRelationField(field)) {
      acc.push({
        ...field,
        labelAction,
        ...getRelationFieldQueryInfos(field, currentLocale)
      });
      return acc;
    }
    acc.push({ ...field, labelAction });
    return acc;
  }, []);
  return enhancedRow;
});
const enhanceComponentsLayout = (components, locale) => {
  return Object.keys(components).reduce((acc, current) => {
    const currentComponentLayout = components[current];
    const enhancedEditLayout = enhanceComponentLayoutForRelations(
      currentComponentLayout.layouts.edit,
      locale
    );
    acc[current] = {
      ...currentComponentLayout,
      layouts: { ...currentComponentLayout.layouts, edit: enhancedEditLayout }
    };
    return acc;
  }, {});
};
const enhanceComponentLayoutForRelations = (layout, locale) => layout.map((row) => {
  const enhancedRow = row.reduce((acc, field) => {
    if (shouldLocalizeRelationField(field)) {
      acc.push({ ...field, ...getRelationFieldQueryInfos(field, locale) });
      return acc;
    }
    acc.push(field);
    return acc;
  }, []);
  return enhancedRow;
});
const getPathToContentType = (pathArray) => ["contentType", ...pathArray];
const mutateEditViewLayoutHook = ({ layout, query }) => {
  const hasI18nEnabled = get(
    layout,
    getPathToContentType(["pluginOptions", "i18n", "localized"]),
    false
  );
  if (!hasI18nEnabled) {
    return { layout, query };
  }
  const currentLocale = get(query, ["plugins", "i18n", "locale"], null);
  if (!currentLocale) {
    return { layout, query };
  }
  const editLayoutPath = getPathToContentType(["layouts", "edit"]);
  const editLayout = get(layout, editLayoutPath);
  const nextEditLayout = enhanceEditLayout(editLayout, currentLocale);
  const enhancedLayouts = {
    ...layout.contentType.layouts,
    edit: nextEditLayout
  };
  const components = enhanceComponentsLayout(layout.components, currentLocale);
  const enhancedData = {
    query,
    layout: {
      ...layout,
      contentType: {
        ...layout.contentType,
        layouts: enhancedLayouts
      },
      components
    }
  };
  return enhancedData;
};
const initialState = {
  isLoading: true,
  locales: []
};
const localeReducer = produce((draftState = initialState, action = {}) => {
  switch (action.type) {
    case RESOLVE_LOCALES: {
      draftState.isLoading = false;
      draftState.locales = action.locales;
      break;
    }
    case ADD_LOCALE: {
      if (action.newLocale.isDefault) {
        draftState.locales.forEach((locale) => {
          locale.isDefault = false;
        });
      }
      draftState.locales.push(action.newLocale);
      break;
    }
    case DELETE_LOCALE: {
      const locales = draftState.locales.filter((locale) => locale.id !== action.id);
      set(draftState, "locales", locales);
      break;
    }
    case UPDATE_LOCALE: {
      if (action.editedLocale.isDefault) {
        draftState.locales.forEach((locale) => {
          locale.isDefault = false;
        });
      }
      const indexToEdit = draftState.locales.findIndex(
        (locale) => locale.id === action.editedLocale.id
      );
      set(draftState.locales, indexToEdit, action.editedLocale);
      break;
    }
    default:
      return draftState;
  }
  return draftState;
});
const reducers = {
  [`${pluginId}_locales`]: localeReducer
};
const addCommonFieldsToInitialDataMiddleware = () => ({ getState, dispatch }) => (next) => (action) => {
  if (action.type !== "ContentManager/CrudReducer/INIT_FORM") {
    return next(action);
  }
  if (!action.rawQuery) {
    return next(action);
  }
  const search = action.rawQuery.substring(1);
  const query = parse(search);
  const relatedEntityId = get(query, "plugins.i18n.relatedEntityId", null);
  const locale = get(query, "plugins.i18n.locale", null);
  const isSingleType = action.isSingleType;
  if (!relatedEntityId && !isSingleType) {
    return next(action);
  }
  const store = getState();
  const cmDataStore = store["content-manager_editViewCrudReducer"];
  const cmLayoutStore = store["content-manager_editViewLayoutManager"];
  const { contentTypeDataStructure } = cmDataStore;
  const { currentLayout } = cmLayoutStore;
  const getData = async () => {
    dispatch({ type: "ContentManager/CrudReducer/GET_DATA" });
    const defaultDataStructure = cloneDeep(contentTypeDataStructure);
    try {
      const { data } = await getFetchClient().post(
        `/${pluginId}/content-manager/actions/get-non-localized-fields`,
        { model: currentLayout.contentType.uid, id: relatedEntityId, locale }
      );
      const { nonLocalizedFields, localizations } = data;
      const merged = merge(defaultDataStructure, nonLocalizedFields);
      const fieldsToRemove = [
        "createdBy",
        "updatedBy",
        "publishedAt",
        "id",
        "_id",
        "updatedAt",
        "createdAt"
      ];
      const cleanedMerged = contentManagementUtilRemoveFieldsFromData(
        merged,
        currentLayout.contentType,
        currentLayout.components,
        fieldsToRemove
      );
      cleanedMerged.localizations = localizations;
      action.data = formatContentTypeData(
        cleanedMerged,
        currentLayout.contentType,
        currentLayout.components
      );
    } catch (err) {
    }
    return next(action);
  };
  return getData();
};
const extendCTBAttributeInitialDataMiddleware = () => {
  return ({ getState }) => (next) => (action) => {
    const enhanceAction = () => {
      try {
        const store = getState();
        const hasi18nEnabled = get(
          store,
          [
            "content-type-builder_dataManagerProvider",
            "modifiedData",
            "contentType",
            "schema",
            "pluginOptions",
            "i18n",
            "localized"
          ],
          false
        );
        if (hasi18nEnabled) {
          const pluginOptions = action.options ? { ...action.options.pluginOptions, i18n: { localized: true } } : { i18n: { localized: true } };
          return next({
            ...action,
            options: {
              pluginOptions
            }
          });
        }
        return next(action);
      } catch (err) {
        return next(action);
      }
    };
    if (action.type === "ContentTypeBuilder/FormModal/SET_ATTRIBUTE_DATA_SCHEMA" && action.forTarget === "contentType" && !["relation", "component"].includes(action.attributeType) && !action.isEditing) {
      return enhanceAction();
    }
    if (action.type === "ContentTypeBuilder/FormModal/SET_CUSTOM_FIELD_DATA_SCHEMA" && action.forTarget === "contentType" && !action.isEditing) {
      return enhanceAction();
    }
    if ((action.type === "ContentTypeBuilder/FormModal/RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO" || action.type === "ContentTypeBuilder/FormModal/RESET_PROPS_AND_SAVE_CURRENT_DATA") && action.forTarget === "contentType") {
      return enhanceAction();
    }
    return next(action);
  };
};
const extendCTBInitialDataMiddleware = () => {
  return () => (next) => (action) => {
    if (action.type === "ContentTypeBuilder/FormModal/SET_DATA_TO_EDIT" && action.modalType === "contentType") {
      const i18n = { localized: false };
      const pluginOptions = action.data.pluginOptions ? { ...action.data.pluginOptions, i18n } : { i18n };
      const data = { ...action.data, pluginOptions };
      if (action.actionType === "create") {
        return next({ ...action, data });
      }
      if (!action.data.pluginOptions?.i18n?.localized) {
        return next({ ...action, data });
      }
    }
    return next(action);
  };
};
const filterPermissionWithLocale = (locale) => (permission) => get(permission, "properties.locales", []).indexOf(locale) !== -1;
const localePermissionMiddleware = () => () => (next) => (action) => {
  if (action.type !== "ContentManager/RBACManager/SET_PERMISSIONS") {
    return next(action);
  }
  const containerName = get(action, "__meta__.containerName", null);
  if (!["editView", "listView"].includes(containerName)) {
    return next(action);
  }
  const locale = get(action, "__meta__.plugins.i18n.locale", null);
  if (!locale) {
    return next(action);
  }
  const permissions = action.permissions;
  const nextPermissions = Object.keys(permissions).reduce((acc, key) => {
    const currentPermission = permissions[key];
    const filteredPermissions = currentPermission.filter(filterPermissionWithLocale(locale));
    if (filteredPermissions.length) {
      acc[key] = filteredPermissions;
    }
    return acc;
  }, {});
  return next({ ...action, permissions: nextPermissions });
};
const middlewares = [
  addCommonFieldsToInitialDataMiddleware,
  extendCTBInitialDataMiddleware,
  extendCTBAttributeInitialDataMiddleware,
  localePermissionMiddleware
];
const LOCALIZED_FIELDS = [
  "biginteger",
  "boolean",
  "component",
  "date",
  "datetime",
  "decimal",
  "dynamiczone",
  "email",
  "enumeration",
  "float",
  "integer",
  "json",
  "media",
  "number",
  "password",
  "richtext",
  "blocks",
  "string",
  "text",
  "time"
];
const localizedPath = ["pluginOptions", "i18n", "localized"];
const addLocalisationToFields = (attributes) => Object.keys(attributes).reduce((acc, current) => {
  const currentAttribute = attributes[current];
  if (LOCALIZED_FIELDS.includes(currentAttribute.type)) {
    const i18n = { localized: true };
    const pluginOptions = currentAttribute.pluginOptions ? { ...currentAttribute.pluginOptions, i18n } : { i18n };
    acc[current] = { ...currentAttribute, pluginOptions };
    return acc;
  }
  acc[current] = currentAttribute;
  return acc;
}, {});
const disableAttributesLocalisation = (attributes) => Object.keys(attributes).reduce((acc, current) => {
  acc[current] = omit(attributes[current], "pluginOptions.i18n");
  return acc;
}, {});
const mutateCTBContentTypeSchema = (nextSchema, prevSchema) => {
  if (!has(nextSchema, localizedPath)) {
    return nextSchema;
  }
  const isNextSchemaLocalized = get(nextSchema, localizedPath, false);
  const isPrevSchemaLocalized = get(prevSchema, ["schema", ...localizedPath], false);
  if (isNextSchemaLocalized && isPrevSchemaLocalized) {
    return nextSchema;
  }
  if (isNextSchemaLocalized) {
    const attributes = addLocalisationToFields(nextSchema.attributes);
    return { ...nextSchema, attributes };
  }
  if (!isNextSchemaLocalized) {
    const pluginOptions = omit(nextSchema.pluginOptions, "i18n");
    const attributes = disableAttributesLocalisation(nextSchema.attributes);
    return { ...nextSchema, pluginOptions, attributes };
  }
  return nextSchema;
};
const name = pluginPkg.strapi.name;
const index = {
  register(app) {
    app.addMiddlewares(middlewares);
    app.addReducers(reducers);
    app.registerPlugin({
      id: pluginId,
      initializer: Initializer,
      isReady: false,
      name
    });
  },
  bootstrap(app) {
    app.registerHook(
      "Admin/CM/pages/App/mutate-collection-types-links",
      addLocaleToCollectionTypesLinksHook
    );
    app.registerHook(
      "Admin/CM/pages/App/mutate-single-types-links",
      addLocaleToSingleTypesLinks
    );
    app.registerHook("Admin/CM/pages/ListView/inject-column-in-table", addColumnToTableHook);
    app.registerHook("Admin/CM/pages/EditView/mutate-edit-view-layout", mutateEditViewLayoutHook);
    app.addSettingsLink("global", {
      intlLabel: {
        id: getTrad("plugin.name"),
        defaultMessage: "Internationalization"
      },
      id: "internationalization",
      to: "/settings/internationalization",
      async Component() {
        const component = await import("./index-dd3fe292.mjs");
        return component;
      },
      permissions: PERMISSIONS.accessMain
    });
    app.injectContentManagerComponent("editView", "informations", {
      name: "i18n-locale-filter-edit-view",
      Component: CMEditViewInjectedComponents
    });
    app.injectContentManagerComponent("listView", "actions", {
      name: "i18n-locale-filter",
      Component: LocalePicker
    });
    app.injectContentManagerComponent("listView", "deleteModalAdditionalInfos", {
      name: "i18n-delete-bullets-in-modal",
      Component: DeleteModalAdditionalInfos
    });
    app.injectContentManagerComponent("listView", "publishModalAdditionalInfos", {
      name: "i18n-publish-bullets-in-modal",
      Component: PublishModalAdditionalInfos
    });
    app.injectContentManagerComponent("listView", "unpublishModalAdditionalInfos", {
      name: "i18n-unpublish-bullets-in-modal",
      Component: UnpublishModalAdditionalInfos
    });
    const ctbPlugin = app.getPlugin("content-type-builder");
    if (ctbPlugin) {
      const ctbFormsAPI = ctbPlugin.apis.forms;
      ctbFormsAPI.addContentTypeSchemaMutation(mutateCTBContentTypeSchema);
      ctbFormsAPI.components.add({ id: "checkboxConfirmation", component: CheckboxConfirmation });
      ctbFormsAPI.extendContentType({
        validator: () => ({
          i18n: yup.object().shape({
            localized: yup.bool()
          })
        }),
        form: {
          advanced() {
            return [
              {
                name: "pluginOptions.i18n.localized",
                description: {
                  id: getTrad("plugin.schema.i18n.localized.description-content-type"),
                  defaultMessage: "Allows translating an entry into different languages"
                },
                type: "checkboxConfirmation",
                intlLabel: {
                  id: getTrad("plugin.schema.i18n.localized.label-content-type"),
                  defaultMessage: "Localization"
                }
              }
            ];
          }
        }
      });
      ctbFormsAPI.extendFields(LOCALIZED_FIELDS, {
        validator: (args) => ({
          i18n: yup.object().shape({
            localized: yup.bool().test({
              name: "ensure-unique-localization",
              message: getTrad("plugin.schema.i18n.ensure-unique-localization"),
              test(value) {
                if (value === void 0 || value) {
                  return true;
                }
                const unique = get(args, ["3", "modifiedData", "unique"], null);
                if (unique && !value) {
                  return false;
                }
                return true;
              }
            })
          })
        }),
        form: {
          advanced({ contentTypeSchema, forTarget, type, step }) {
            if (forTarget !== "contentType") {
              return [];
            }
            const hasI18nEnabled = get(
              contentTypeSchema,
              ["schema", "pluginOptions", "i18n", "localized"],
              false
            );
            if (!hasI18nEnabled) {
              return [];
            }
            if (type === "component" && step === "1") {
              return [];
            }
            return [
              {
                name: "pluginOptions.i18n.localized",
                description: {
                  id: getTrad("plugin.schema.i18n.localized.description-field"),
                  defaultMessage: "The field can have different values in each locale"
                },
                type: "checkbox",
                intlLabel: {
                  id: getTrad("plugin.schema.i18n.localized.label-field"),
                  defaultMessage: "Enable localization for this field"
                }
              }
            ];
          }
        }
      });
    }
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "./translations/de.json": () => import("./de-69cc32ef.mjs"), "./translations/dk.json": () => import("./dk-2db8954e.mjs"), "./translations/en.json": () => import("./en-4364b792.mjs"), "./translations/es.json": () => import("./es-de0bd8b9.mjs"), "./translations/fr.json": () => import("./fr-83186589.mjs"), "./translations/ko.json": () => import("./ko-f7a8555f.mjs"), "./translations/pl.json": () => import("./pl-51b1a117.mjs"), "./translations/ru.json": () => import("./ru-936d7d35.mjs"), "./translations/tr.json": () => import("./tr-ed2c4614.mjs"), "./translations/zh-Hans.json": () => import("./zh-Hans-5f3e882e.mjs"), "./translations/zh.json": () => import("./zh-188e99a9.mjs") }), `./translations/${locale}.json`).then(({ default: data }) => {
          return {
            data: prefixPluginTranslations(data, pluginId),
            locale
          };
        }).catch(() => {
          return {
            data: {},
            locale
          };
        });
      })
    );
    return Promise.resolve(importedTrads);
  }
};
export {
  ADD_LOCALE as A,
  DELETE_LOCALE as D,
  PERMISSIONS as P,
  UPDATE_LOCALE as U,
  getTrad as g,
  index as i,
  useLocales as u
};
//# sourceMappingURL=index-d68e8e6b.mjs.map
