{"version":3,"file":"index-dd3fe292.mjs","sources":["../../admin/src/hooks/useAddLocale/index.js","../../admin/src/schemas.js","../../admin/src/components/ModalCreate/AdvancedForm.js","../../admin/src/hooks/useDefaultLocales/index.js","../../admin/src/components/LocaleSelect/index.js","../../admin/src/components/ModalCreate/BaseForm.js","../../admin/src/components/ModalCreate/index.js","../../admin/src/hooks/useDeleteLocale/index.js","../../admin/src/components/ModalDelete/index.js","../../admin/src/hooks/useEditLocale/index.js","../../admin/src/components/ModalEdit/AdvancedForm.js","../../admin/src/components/ModalEdit/BaseForm.js","../../admin/src/components/ModalEdit/index.js","../../admin/src/components/LocaleList/LocaleTable.js","../../admin/src/components/LocaleList/index.js","../../admin/src/pages/SettingsPage/LocaleSettingsPage.js","../../admin/src/pages/SettingsPage/index.js"],"sourcesContent":["import { useState } from 'react';\n\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport get from 'lodash/get';\nimport { useDispatch } from 'react-redux';\n\nimport { getTrad } from '../../utils';\nimport { ADD_LOCALE } from '../constants';\n\nconst useAddLocale = () => {\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const { post } = useFetchClient();\n\n  const persistLocale = async (locale) => {\n    setLoading(true);\n\n    try {\n      const { data } = await post('/i18n/locales', locale);\n\n      toggleNotification({\n        type: 'success',\n        message: { id: getTrad('Settings.locales.modal.create.success') },\n      });\n\n      dispatch({ type: ADD_LOCALE, newLocale: data });\n    } catch (e) {\n      const message = get(e, 'response.payload.message', null);\n\n      if (message && message.includes('already exists')) {\n        toggleNotification({\n          type: 'warning',\n          message: { id: getTrad('Settings.locales.modal.create.alreadyExist') },\n        });\n      } else {\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      }\n\n      throw e;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isAdding: isLoading, addLocale: persistLocale };\n};\n\nexport default useAddLocale;\n","import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';\nimport { object, string } from 'yup';\n\nconst localeFormSchema = object().shape({\n  code: string().required(),\n  displayName: string()\n    .max(50, 'Settings.locales.modal.locales.displayName.error')\n    .required(errorsTrads.required),\n});\n\nexport default localeFormSchema;\n","import React from 'react';\n\nimport { Checkbox } from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\n\nconst AdvancedForm = () => {\n  const { values, setFieldValue } = useFormikContext();\n  const { formatMessage } = useIntl();\n\n  return (\n    <Checkbox\n      hint={formatMessage({\n        id: getTrad('Settings.locales.modal.advanced.setAsDefault.hint'),\n        defaultMessage: 'One default locale is required, change it by selecting another one',\n      })}\n      onChange={() => setFieldValue('isDefault', !values.isDefault)}\n      value={values.isDefault}\n    >\n      {formatMessage({\n        id: getTrad('Settings.locales.modal.advanced.setAsDefault'),\n        defaultMessage: 'Set as default locale',\n      })}\n    </Checkbox>\n  );\n};\n\nexport default AdvancedForm;\n","import { useNotifyAT } from '@strapi/design-system';\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useQuery } from 'react-query';\n\nimport { getTrad } from '../../utils';\n\nconst useDefaultLocales = () => {\n  const { formatMessage } = useIntl();\n  const { notifyStatus } = useNotifyAT();\n  const toggleNotification = useNotification();\n  const { get } = useFetchClient();\n  const { isLoading, data } = useQuery(['plugin-i18n', 'locales'], async () => {\n    try {\n      const { data } = await get('/i18n/iso-locales');\n\n      notifyStatus(\n        formatMessage({\n          id: getTrad('Settings.locales.modal.locales.loaded'),\n          defaultMessage: 'The locales have been successfully loaded.',\n        })\n      );\n\n      return data;\n    } catch (e) {\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n\n      return [];\n    }\n  });\n\n  return { defaultLocales: data, isLoading };\n};\n\nexport default useDefaultLocales;\n","/* eslint-disable react/jsx-indent */\nimport React from 'react';\n\nimport { Combobox, ComboboxOption } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useDefaultLocales from '../../hooks/useDefaultLocales';\nimport useLocales from '../../hooks/useLocales';\nimport { getTrad } from '../../utils';\n\n/**\n * The component is memoized and needs a useCallback over the onLocaleChange and\n * onClear props to prevent the Select from re-rendering N times when typing on a specific\n * key in a formik form\n */\nconst LocaleSelect = React.memo(({ value, onClear, onLocaleChange, error }) => {\n  const { formatMessage } = useIntl();\n  const { defaultLocales, isLoading } = useDefaultLocales();\n  const { locales } = useLocales();\n\n  const options = (defaultLocales || [])\n    .map((locale) => ({\n      label: locale.name,\n      value: locale.code,\n    }))\n    .filter(({ value: v }) => {\n      const foundLocale = locales.find(({ code }) => code === v);\n\n      return !foundLocale || foundLocale.code === value;\n    });\n\n  const computedValue = value || '';\n\n  return (\n    <Combobox\n      aria-busy={isLoading}\n      error={error}\n      label={formatMessage({\n        id: getTrad('Settings.locales.modal.locales.label'),\n        defaultMessage: 'Locales',\n      })}\n      value={computedValue}\n      onClear={value ? onClear : undefined}\n      onChange={(selectedLocaleKey) => {\n        const selectedLocale = options.find((locale) => locale.value === selectedLocaleKey);\n\n        if (selectedLocale) {\n          onLocaleChange({ code: selectedLocale.value, displayName: selectedLocale.label });\n        }\n      }}\n      placeholder={formatMessage({\n        id: 'components.placeholder.select',\n        defaultMessage: 'Select',\n      })}\n    >\n      {options.map((option) => (\n        <ComboboxOption value={option.value} key={option.value}>\n          {option.label}\n        </ComboboxOption>\n      ))}\n    </Combobox>\n  );\n});\n\nLocaleSelect.defaultProps = {\n  error: undefined,\n  value: undefined,\n  onClear() {},\n  onLocaleChange: () => undefined,\n};\n\nLocaleSelect.propTypes = {\n  error: PropTypes.string,\n  onClear: PropTypes.func,\n  onLocaleChange: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default LocaleSelect;\n","import React, { useCallback } from 'react';\n\nimport { Grid, GridItem, TextInput } from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\nimport LocaleSelect from '../LocaleSelect';\n\nconst BaseForm = () => {\n  const { formatMessage } = useIntl();\n  const { values, handleChange, setFieldValue, errors } = useFormikContext();\n\n  /**\n   * This is needed because the LocaleSelect component is a memoized component\n   * since it renders ~500 locales and that formik would trigger a re-render on it without\n   * it\n   */\n  const handleLocaleChange = useCallback(\n    (nextLocale) => {\n      setFieldValue('displayName', nextLocale.displayName);\n      setFieldValue('code', nextLocale.code);\n    },\n    [setFieldValue]\n  );\n\n  /**\n   * This is needed because the LocaleSelect component is a memoized component\n   * since it renders ~500 locales and that formik would trigger a re-render on it without\n   * it\n   */\n  const handleClear = useCallback(() => {\n    setFieldValue('displayName', '');\n    setFieldValue('code', '');\n  }, [setFieldValue]);\n\n  return (\n    <Grid gap={4}>\n      <GridItem col={6}>\n        <LocaleSelect\n          error={errors.code}\n          value={values.code}\n          onLocaleChange={handleLocaleChange}\n          onClear={handleClear}\n        />\n      </GridItem>\n\n      <GridItem col={6}>\n        <TextInput\n          name=\"displayName\"\n          label={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.displayName'),\n            defaultMessage: 'Locale display name',\n          })}\n          hint={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.displayName.description'),\n            defaultMessage: 'Locale will be displayed under that name in the administration panel',\n          })}\n          error={\n            errors.displayName\n              ? formatMessage({\n                  id: getTrad('Settings.locales.modal.locales.displayName.error'),\n                  defaultMessage: 'The locale display name can only be less than 50 characters.',\n                })\n              : undefined\n          }\n          value={values.displayName}\n          onChange={handleChange}\n        />\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default BaseForm;\n","import React from 'react';\n\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Tab,\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Typography,\n} from '@strapi/design-system';\nimport { Form, useRBACProvider } from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useAddLocale from '../../hooks/useAddLocale';\nimport localeFormSchema from '../../schemas';\nimport { getTrad } from '../../utils';\n\nimport AdvancedForm from './AdvancedForm';\nimport BaseForm from './BaseForm';\n\nconst initialFormValues = {\n  code: '',\n  displayName: '',\n  isDefault: false,\n};\n\nconst ModalCreate = ({ onClose }) => {\n  const { isAdding, addLocale } = useAddLocale();\n  const { formatMessage } = useIntl();\n  const { refetchPermissions } = useRBACProvider();\n\n  /**\n   * No need to explicitly call the onClose prop here\n   * since the all tree (from the root of the page) is destroyed and re-mounted\n   * because of the RBAC refreshing and the potential move of the default locale\n   */\n  const handleLocaleAdd = async (values) => {\n    await addLocale({\n      code: values.code,\n      name: values.displayName,\n      isDefault: values.isDefault,\n    });\n\n    await refetchPermissions();\n  };\n\n  return (\n    <ModalLayout onClose={onClose} labelledBy=\"add-locale-title\">\n      <Formik\n        initialValues={initialFormValues}\n        onSubmit={handleLocaleAdd}\n        validationSchema={localeFormSchema}\n        validateOnChange={false}\n      >\n        <Form>\n          <ModalHeader>\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"add-locale-title\">\n              {formatMessage({\n                id: getTrad('Settings.list.actions.add'),\n                defaultMessage: 'Add new locale',\n              })}\n            </Typography>\n          </ModalHeader>\n          <ModalBody>\n            <TabGroup\n              label={formatMessage({\n                id: getTrad('Settings.locales.modal.title'),\n                defaultMessage: 'Configurations',\n              })}\n              id=\"tabs\"\n              variant=\"simple\"\n            >\n              <Flex justifyContent=\"space-between\">\n                <Typography as=\"h2\" variant=\"beta\">\n                  {formatMessage({\n                    id: getTrad('Settings.locales.modal.title'),\n                    defaultMessage: 'Configurations',\n                  })}\n                </Typography>\n                <Tabs>\n                  <Tab>\n                    {formatMessage({\n                      id: getTrad('Settings.locales.modal.base'),\n                      defaultMessage: 'Basic settings',\n                    })}\n                  </Tab>\n                  <Tab>\n                    {formatMessage({\n                      id: getTrad('Settings.locales.modal.advanced'),\n                      defaultMessage: 'Advanced settings',\n                    })}\n                  </Tab>\n                </Tabs>\n              </Flex>\n\n              <Divider />\n\n              <Box paddingTop={7} paddingBottom={7}>\n                <TabPanels>\n                  <TabPanel>\n                    <BaseForm />\n                  </TabPanel>\n                  <TabPanel>\n                    <AdvancedForm />\n                  </TabPanel>\n                </TabPanels>\n              </Box>\n            </TabGroup>\n          </ModalBody>\n          <ModalFooter\n            startActions={\n              <Button variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n            }\n            endActions={\n              <Button type=\"submit\" startIcon={<Check />} disabled={isAdding}>\n                {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n              </Button>\n            }\n          />\n        </Form>\n      </Formik>\n    </ModalLayout>\n  );\n};\n\nModalCreate.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalCreate;\n","import { useState } from 'react';\n\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { useDispatch } from 'react-redux';\n\nimport { getTrad } from '../../utils';\nimport { DELETE_LOCALE } from '../constants';\n\nconst useDeleteLocale = () => {\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n\n  const { del } = useFetchClient();\n\n  const removeLocale = async (id) => {\n    try {\n      setLoading(true);\n\n      await del(`/i18n/locales/${id}`);\n\n      toggleNotification({\n        type: 'success',\n        message: { id: getTrad('Settings.locales.modal.delete.success') },\n      });\n\n      dispatch({ type: DELETE_LOCALE, id });\n    } catch {\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isDeleting: isLoading, deleteLocale: removeLocale };\n};\n\nexport default useDeleteLocale;\n","import React from 'react';\n\nimport { ConfirmDialog } from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\n\nimport useDeleteLocale from '../../hooks/useDeleteLocale';\n\nconst ModalDelete = ({ localeToDelete, onClose }) => {\n  const { isDeleting, deleteLocale } = useDeleteLocale();\n  const isOpened = Boolean(localeToDelete);\n\n  const handleDelete = () => deleteLocale(localeToDelete.id).then(onClose);\n\n  return (\n    <ConfirmDialog\n      isConfirmButtonLoading={isDeleting}\n      onConfirm={handleDelete}\n      onToggleDialog={onClose}\n      isOpen={isOpened}\n    />\n  );\n};\n\nModalDelete.defaultProps = {\n  localeToDelete: undefined,\n};\n\nModalDelete.propTypes = {\n  localeToDelete: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  }),\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalDelete;\n","import { useState } from 'react';\n\nimport { useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { useDispatch } from 'react-redux';\n\nimport { getTrad } from '../../utils';\nimport { UPDATE_LOCALE } from '../constants';\n\nconst useEditLocale = () => {\n  const [isLoading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const { put } = useFetchClient();\n\n  const modifyLocale = async (id, payload) => {\n    try {\n      setLoading(true);\n\n      const { data } = await put(`/i18n/locales/${id}`, payload);\n\n      toggleNotification({\n        type: 'success',\n        message: { id: getTrad('Settings.locales.modal.edit.success') },\n      });\n\n      dispatch({ type: UPDATE_LOCALE, editedLocale: data });\n    } catch {\n      toggleNotification({\n        type: 'warning',\n        message: { id: 'notification.error' },\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isEditing: isLoading, editLocale: modifyLocale };\n};\n\nexport default useEditLocale;\n","import React from 'react';\n\nimport { Checkbox } from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\n\nconst AdvancedForm = ({ isDefaultLocale }) => {\n  const { values, setFieldValue } = useFormikContext();\n  const { formatMessage } = useIntl();\n\n  return (\n    <Checkbox\n      name=\"isDefault\"\n      hint={formatMessage({\n        id: getTrad('Settings.locales.modal.advanced.setAsDefault.hint'),\n        defaultMessage: 'One default locale is required, change it by selecting another one',\n      })}\n      onChange={() => setFieldValue('isDefault', !values.isDefault)}\n      value={values.isDefault}\n      disabled={isDefaultLocale}\n    >\n      {formatMessage({\n        id: getTrad('Settings.locales.modal.advanced.setAsDefault'),\n        defaultMessage: 'Set as default locale',\n      })}\n    </Checkbox>\n  );\n};\n\nAdvancedForm.propTypes = {\n  isDefaultLocale: PropTypes.bool.isRequired,\n};\n\nexport default AdvancedForm;\n","import React from 'react';\n\nimport { Grid, GridItem, Option, Select, TextInput } from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useDefaultLocales from '../../hooks/useDefaultLocales';\nimport { getTrad } from '../../utils';\n\nconst BaseForm = ({ locale }) => {\n  const { formatMessage } = useIntl();\n  const { values, handleChange, errors } = useFormikContext();\n  const { defaultLocales, isLoading } = useDefaultLocales();\n\n  const localeDetails = !isLoading && defaultLocales.find((row) => row.code === locale.code);\n\n  return (\n    <Grid gap={4}>\n      <GridItem col={6}>\n        <Select\n          label={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.label'),\n            defaultMessage: 'Locales',\n          })}\n          value={localeDetails?.code || locale.code}\n          disabled\n        >\n          <Option value={localeDetails?.code || locale.code}>\n            {localeDetails?.name || locale.code}\n          </Option>\n        </Select>\n      </GridItem>\n\n      <GridItem col={6}>\n        <TextInput\n          name=\"displayName\"\n          label={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.displayName'),\n            defaultMessage: 'Locale display name',\n          })}\n          hint={formatMessage({\n            id: getTrad('Settings.locales.modal.locales.displayName.description'),\n            defaultMessage: 'Locale will be displayed under that name in the administration panel',\n          })}\n          error={\n            errors.displayName\n              ? formatMessage({\n                  id: getTrad('Settings.locales.modal.locales.displayName.error'),\n                  defaultMessage: 'The locale display name can only be less than 50 characters.',\n                })\n              : undefined\n          }\n          value={values.displayName}\n          onChange={handleChange}\n        />\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default BaseForm;\n\nBaseForm.propTypes = {\n  locale: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    isDefault: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Tab,\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Typography,\n} from '@strapi/design-system';\nimport { Form, useRBACProvider } from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useEditLocale from '../../hooks/useEditLocale';\nimport localeFormSchema from '../../schemas';\nimport { getTrad } from '../../utils';\n\nimport AdvancedForm from './AdvancedForm';\nimport BaseForm from './BaseForm';\n\nconst ModalEdit = ({ locale, onClose }) => {\n  const { refetchPermissions } = useRBACProvider();\n  const { isEditing, editLocale } = useEditLocale();\n  const { formatMessage } = useIntl();\n\n  const handleSubmit = async ({ displayName, isDefault }) => {\n    await editLocale(locale.id, { name: displayName, isDefault });\n    await refetchPermissions();\n  };\n\n  return (\n    <ModalLayout onClose={onClose} labelledBy=\"edit-locale-title\">\n      <Formik\n        initialValues={{\n          code: locale?.code,\n          displayName: locale?.name || '',\n          isDefault: Boolean(locale?.isDefault),\n        }}\n        onSubmit={handleSubmit}\n        validationSchema={localeFormSchema}\n      >\n        <Form>\n          <ModalHeader>\n            <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"edit-locale-title\">\n              {formatMessage({\n                id: getTrad('Settings.list.actions.edit'),\n                defaultMessage: 'Edit a locale',\n              })}\n            </Typography>\n          </ModalHeader>\n          <ModalBody>\n            <TabGroup\n              label={formatMessage({\n                id: getTrad('Settings.locales.modal.title'),\n                defaultMessage: 'Configurations',\n              })}\n              id=\"tabs\"\n              variant=\"simple\"\n            >\n              <Flex justifyContent=\"space-between\">\n                <Typography as=\"h2\">\n                  {formatMessage({\n                    id: getTrad('Settings.locales.modal.title'),\n                    defaultMessage: 'Configurations',\n                  })}\n                </Typography>\n                <Tabs>\n                  <Tab>\n                    {formatMessage({\n                      id: getTrad('Settings.locales.modal.base'),\n                      defaultMessage: 'Basic settings',\n                    })}\n                  </Tab>\n                  <Tab>\n                    {formatMessage({\n                      id: getTrad('Settings.locales.modal.advanced'),\n                      defaultMessage: 'Advanced settings',\n                    })}\n                  </Tab>\n                </Tabs>\n              </Flex>\n\n              <Divider />\n\n              <Box paddingTop={7} paddingBottom={7}>\n                <TabPanels>\n                  <TabPanel>\n                    <BaseForm locale={locale} />\n                  </TabPanel>\n                  <TabPanel>\n                    <AdvancedForm isDefaultLocale={Boolean(locale && locale.isDefault)} />\n                  </TabPanel>\n                </TabPanels>\n              </Box>\n            </TabGroup>\n          </ModalBody>\n\n          <ModalFooter\n            startActions={\n              <Button variant=\"tertiary\" onClick={onClose}>\n                {formatMessage({ id: 'app.components.Button.cancel' })}\n              </Button>\n            }\n            endActions={\n              <Button type=\"submit\" startIcon={<Check />} disabled={isEditing}>\n                {formatMessage({ id: 'global.save' })}\n              </Button>\n            }\n          />\n        </Form>\n      </Formik>\n    </ModalLayout>\n  );\n};\n\nModalEdit.defaultProps = {\n  locale: undefined,\n};\n\nModalEdit.propTypes = {\n  locale: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    isDefault: PropTypes.bool.isRequired,\n  }),\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default ModalEdit;\n","import React from 'react';\n\nimport {\n  Flex,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { onRowClick, stopPropagation } from '@strapi/helper-plugin';\nimport { Pencil, Trash } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\n\nconst LocaleTable = ({ locales, onDeleteLocale, onEditLocale }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Table colCount={4} rowCount={locales.length + 1}>\n      <Thead>\n        <Tr>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({ id: getTrad('Settings.locales.row.id') })}\n            </Typography>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({ id: getTrad('Settings.locales.row.displayName') })}\n            </Typography>\n          </Th>\n          <Th>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {formatMessage({ id: getTrad('Settings.locales.row.default-locale') })}\n            </Typography>\n          </Th>\n          <Th>\n            <VisuallyHidden>Actions</VisuallyHidden>\n          </Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {locales.map((locale) => (\n          <Tr\n            key={locale.id}\n            {...onRowClick({\n              fn: () => onEditLocale(locale),\n              condition: onEditLocale,\n            })}\n          >\n            <Td>\n              <Typography textColor=\"neutral800\">{locale.id}</Typography>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral800\">{locale.name}</Typography>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral800\">\n                {locale.isDefault\n                  ? formatMessage({ id: getTrad('Settings.locales.default') })\n                  : null}\n              </Typography>\n            </Td>\n            <Td>\n              <Flex gap={1} justifyContent=\"flex-end\" {...stopPropagation}>\n                {onEditLocale && (\n                  <IconButton\n                    onClick={() => onEditLocale(locale)}\n                    label={formatMessage({ id: getTrad('Settings.list.actions.edit') })}\n                    icon={<Pencil />}\n                    noBorder\n                  />\n                )}\n                {onDeleteLocale && !locale.isDefault && (\n                  <IconButton\n                    onClick={() => onDeleteLocale(locale)}\n                    label={formatMessage({ id: getTrad('Settings.list.actions.delete') })}\n                    icon={<Trash />}\n                    noBorder\n                  />\n                )}\n              </Flex>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\nLocaleTable.defaultProps = {\n  locales: [],\n  onDeleteLocale: undefined,\n  onEditLocale: undefined,\n};\n\nLocaleTable.propTypes = {\n  locales: PropTypes.array,\n  onDeleteLocale: PropTypes.func,\n  onEditLocale: PropTypes.func,\n};\n\nexport default LocaleTable;\n","import React, { useState } from 'react';\n\nimport { Button, ContentLayout, EmptyStateLayout, HeaderLayout, Main } from '@strapi/design-system';\nimport { useFocusWhenNavigate } from '@strapi/helper-plugin';\nimport { EmptyDocuments, Plus } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport useLocales from '../../hooks/useLocales';\nimport { getTrad } from '../../utils';\nimport ModalCreate from '../ModalCreate';\nimport ModalDelete from '../ModalDelete';\nimport ModalEdit from '../ModalEdit';\n\nimport LocaleTable from './LocaleTable';\n\nconst LocaleList = ({ canUpdateLocale, canDeleteLocale, onToggleCreateModal, isCreating }) => {\n  const [localeToDelete, setLocaleToDelete] = useState();\n  const [localeToEdit, setLocaleToEdit] = useState();\n  const { locales } = useLocales();\n  const { formatMessage } = useIntl();\n\n  useFocusWhenNavigate();\n\n  // Delete actions\n  const closeModalToDelete = () => setLocaleToDelete(undefined);\n  const handleDeleteLocale = canDeleteLocale ? setLocaleToDelete : undefined;\n\n  // Edit actions\n  const closeModalToEdit = () => setLocaleToEdit(undefined);\n  const handleEditLocale = canUpdateLocale ? setLocaleToEdit : undefined;\n\n  return (\n    <Main tabIndex={-1}>\n      <HeaderLayout\n        primaryAction={\n          <Button startIcon={<Plus />} onClick={onToggleCreateModal} size=\"S\">\n            {formatMessage({ id: getTrad('Settings.list.actions.add') })}\n          </Button>\n        }\n        title={formatMessage({ id: getTrad('plugin.name') })}\n        subtitle={formatMessage({ id: getTrad('Settings.list.description') })}\n      />\n      <ContentLayout>\n        {locales?.length > 0 ? (\n          <LocaleTable\n            locales={locales}\n            onDeleteLocale={handleDeleteLocale}\n            onEditLocale={handleEditLocale}\n          />\n        ) : (\n          <EmptyStateLayout\n            icon={<EmptyDocuments width={undefined} height={undefined} />}\n            content={formatMessage({ id: getTrad('Settings.list.empty.title') })}\n            action={\n              onToggleCreateModal ? (\n                <Button variant=\"secondary\" startIcon={<Plus />} onClick={onToggleCreateModal}>\n                  {formatMessage({ id: getTrad('Settings.list.actions.add') })}\n                </Button>\n              ) : null\n            }\n          />\n        )}\n      </ContentLayout>\n\n      {isCreating && <ModalCreate onClose={onToggleCreateModal} />}\n      {localeToEdit && <ModalEdit onClose={closeModalToEdit} locale={localeToEdit} />}\n      <ModalDelete localeToDelete={localeToDelete} onClose={closeModalToDelete} />\n    </Main>\n  );\n};\n\nLocaleList.defaultProps = {\n  onToggleCreateModal: undefined,\n};\n\nLocaleList.propTypes = {\n  canUpdateLocale: PropTypes.bool.isRequired,\n  canDeleteLocale: PropTypes.bool.isRequired,\n  onToggleCreateModal: PropTypes.func,\n  isCreating: PropTypes.bool.isRequired,\n};\n\nexport default LocaleList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport LocaleList from '../../components/LocaleList';\n\nconst LocaleSettingsPage = ({\n  canReadLocale,\n  canCreateLocale,\n  canDeleteLocale,\n  canUpdateLocale,\n}) => {\n  const [isOpenedCreateModal, setIsOpenedCreateModal] = useState(false);\n\n  const handleToggleModalCreate = canCreateLocale\n    ? () => setIsOpenedCreateModal((s) => !s)\n    : undefined;\n\n  return canReadLocale ? (\n    <LocaleList\n      canUpdateLocale={canUpdateLocale}\n      canDeleteLocale={canDeleteLocale}\n      onToggleCreateModal={handleToggleModalCreate}\n      isCreating={isOpenedCreateModal}\n    />\n  ) : null;\n};\n\nLocaleSettingsPage.propTypes = {\n  canReadLocale: PropTypes.bool.isRequired,\n  canCreateLocale: PropTypes.bool.isRequired,\n  canUpdateLocale: PropTypes.bool.isRequired,\n  canDeleteLocale: PropTypes.bool.isRequired,\n};\n\nexport default LocaleSettingsPage;\n","import React from 'react';\n\nimport { useRBAC } from '@strapi/helper-plugin';\n\nimport { PERMISSIONS } from '../../constants';\n\nimport LocaleSettingsPage from './LocaleSettingsPage';\n\nconst ProtectedLocaleSettingsPage = () => {\n  const {\n    isLoading,\n    allowedActions: { canRead, canUpdate, canCreate, canDelete },\n  } = useRBAC(PERMISSIONS);\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <LocaleSettingsPage\n      canReadLocale={canRead}\n      canCreateLocale={canCreate}\n      canUpdateLocale={canUpdate}\n      canDeleteLocale={canDelete}\n    />\n  );\n};\n\nexport default ProtectedLocaleSettingsPage;\n"],"names":["errorsTrads","AdvancedForm","get","data","BaseForm"],"mappings":"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"}