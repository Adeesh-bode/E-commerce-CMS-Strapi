"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const helperPlugin = require("@strapi/helper-plugin");
const index = require("./index-c23512da.js");
const React = require("react");
const PropTypes = require("prop-types");
const designSystem = require("@strapi/design-system");
const icons = require("@strapi/icons");
const reactIntl = require("react-intl");
const formik = require("formik");
const get = require("lodash/get");
const reactRedux = require("react-redux");
const yup = require("yup");
const reactQuery = require("react-query");
require("styled-components");
require("lodash/has");
require("react-router-dom");
require("qs");
require("immer");
require("lodash/set");
require("lodash/cloneDeep");
require("lodash/merge");
require("lodash/omit");
const _interopDefault = (e) => e && e.__esModule ? e : { default: e };
const React__default = /* @__PURE__ */ _interopDefault(React);
const PropTypes__default = /* @__PURE__ */ _interopDefault(PropTypes);
const get__default = /* @__PURE__ */ _interopDefault(get);
const useAddLocale = () => {
  const [isLoading, setLoading] = React.useState(false);
  const dispatch = reactRedux.useDispatch();
  const toggleNotification = helperPlugin.useNotification();
  const { post } = helperPlugin.useFetchClient();
  const persistLocale = async (locale) => {
    setLoading(true);
    try {
      const { data } = await post("/i18n/locales", locale);
      toggleNotification({
        type: "success",
        message: { id: index.getTrad("Settings.locales.modal.create.success") }
      });
      dispatch({ type: index.ADD_LOCALE, newLocale: data });
    } catch (e) {
      const message = get__default.default(e, "response.payload.message", null);
      if (message && message.includes("already exists")) {
        toggleNotification({
          type: "warning",
          message: { id: index.getTrad("Settings.locales.modal.create.alreadyExist") }
        });
      } else {
        toggleNotification({
          type: "warning",
          message: { id: "notification.error" }
        });
      }
      throw e;
    } finally {
      setLoading(false);
    }
  };
  return { isAdding: isLoading, addLocale: persistLocale };
};
const localeFormSchema = yup.object().shape({
  code: yup.string().required(),
  displayName: yup.string().max(50, "Settings.locales.modal.locales.displayName.error").required(helperPlugin.translatedErrors.required)
});
const AdvancedForm$1 = () => {
  const { values, setFieldValue } = formik.useFormikContext();
  const { formatMessage } = reactIntl.useIntl();
  return /* @__PURE__ */ jsxRuntime.jsx(
    designSystem.Checkbox,
    {
      hint: formatMessage({
        id: index.getTrad("Settings.locales.modal.advanced.setAsDefault.hint"),
        defaultMessage: "One default locale is required, change it by selecting another one"
      }),
      onChange: () => setFieldValue("isDefault", !values.isDefault),
      value: values.isDefault,
      children: formatMessage({
        id: index.getTrad("Settings.locales.modal.advanced.setAsDefault"),
        defaultMessage: "Set as default locale"
      })
    }
  );
};
const useDefaultLocales = () => {
  const { formatMessage } = reactIntl.useIntl();
  const { notifyStatus } = designSystem.useNotifyAT();
  const toggleNotification = helperPlugin.useNotification();
  const { get: get2 } = helperPlugin.useFetchClient();
  const { isLoading, data } = reactQuery.useQuery(["plugin-i18n", "locales"], async () => {
    try {
      const { data: data2 } = await get2("/i18n/iso-locales");
      notifyStatus(
        formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.loaded"),
          defaultMessage: "The locales have been successfully loaded."
        })
      );
      return data2;
    } catch (e) {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
      return [];
    }
  });
  return { defaultLocales: data, isLoading };
};
const LocaleSelect = React__default.default.memo(({ value, onClear, onLocaleChange, error }) => {
  const { formatMessage } = reactIntl.useIntl();
  const { defaultLocales, isLoading } = useDefaultLocales();
  const { locales } = index.useLocales();
  const options = (defaultLocales || []).map((locale) => ({
    label: locale.name,
    value: locale.code
  })).filter(({ value: v }) => {
    const foundLocale = locales.find(({ code }) => code === v);
    return !foundLocale || foundLocale.code === value;
  });
  const computedValue = value || "";
  return /* @__PURE__ */ jsxRuntime.jsx(
    designSystem.Combobox,
    {
      "aria-busy": isLoading,
      error,
      label: formatMessage({
        id: index.getTrad("Settings.locales.modal.locales.label"),
        defaultMessage: "Locales"
      }),
      value: computedValue,
      onClear: value ? onClear : void 0,
      onChange: (selectedLocaleKey) => {
        const selectedLocale = options.find((locale) => locale.value === selectedLocaleKey);
        if (selectedLocale) {
          onLocaleChange({ code: selectedLocale.value, displayName: selectedLocale.label });
        }
      },
      placeholder: formatMessage({
        id: "components.placeholder.select",
        defaultMessage: "Select"
      }),
      children: options.map((option) => /* @__PURE__ */ jsxRuntime.jsx(designSystem.ComboboxOption, { value: option.value, children: option.label }, option.value))
    }
  );
});
LocaleSelect.defaultProps = {
  error: void 0,
  value: void 0,
  onClear() {
  },
  onLocaleChange: () => void 0
};
LocaleSelect.propTypes = {
  error: PropTypes__default.default.string,
  onClear: PropTypes__default.default.func,
  onLocaleChange: PropTypes__default.default.func,
  value: PropTypes__default.default.string
};
const BaseForm$1 = () => {
  const { formatMessage } = reactIntl.useIntl();
  const { values, handleChange, setFieldValue, errors } = formik.useFormikContext();
  const handleLocaleChange = React.useCallback(
    (nextLocale) => {
      setFieldValue("displayName", nextLocale.displayName);
      setFieldValue("code", nextLocale.code);
    },
    [setFieldValue]
  );
  const handleClear = React.useCallback(() => {
    setFieldValue("displayName", "");
    setFieldValue("code", "");
  }, [setFieldValue]);
  return /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Grid, { gap: 4, children: [
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.GridItem, { col: 6, children: /* @__PURE__ */ jsxRuntime.jsx(
      LocaleSelect,
      {
        error: errors.code,
        value: values.code,
        onLocaleChange: handleLocaleChange,
        onClear: handleClear
      }
    ) }),
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.GridItem, { col: 6, children: /* @__PURE__ */ jsxRuntime.jsx(
      designSystem.TextInput,
      {
        name: "displayName",
        label: formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName"),
          defaultMessage: "Locale display name"
        }),
        hint: formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName.description"),
          defaultMessage: "Locale will be displayed under that name in the administration panel"
        }),
        error: errors.displayName ? formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName.error"),
          defaultMessage: "The locale display name can only be less than 50 characters."
        }) : void 0,
        value: values.displayName,
        onChange: handleChange
      }
    ) })
  ] });
};
const initialFormValues = {
  code: "",
  displayName: "",
  isDefault: false
};
const ModalCreate = ({ onClose }) => {
  const { isAdding, addLocale } = useAddLocale();
  const { formatMessage } = reactIntl.useIntl();
  const { refetchPermissions } = helperPlugin.useRBACProvider();
  const handleLocaleAdd = async (values) => {
    await addLocale({
      code: values.code,
      name: values.displayName,
      isDefault: values.isDefault
    });
    await refetchPermissions();
  };
  return /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalLayout, { onClose, labelledBy: "add-locale-title", children: /* @__PURE__ */ jsxRuntime.jsx(
    formik.Formik,
    {
      initialValues: initialFormValues,
      onSubmit: handleLocaleAdd,
      validationSchema: localeFormSchema,
      validateOnChange: false,
      children: /* @__PURE__ */ jsxRuntime.jsxs(helperPlugin.Form, { children: [
        /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalHeader, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { fontWeight: "bold", textColor: "neutral800", as: "h2", id: "add-locale-title", children: formatMessage({
          id: index.getTrad("Settings.list.actions.add"),
          defaultMessage: "Add new locale"
        }) }) }),
        /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalBody, { children: /* @__PURE__ */ jsxRuntime.jsxs(
          designSystem.TabGroup,
          {
            label: formatMessage({
              id: index.getTrad("Settings.locales.modal.title"),
              defaultMessage: "Configurations"
            }),
            id: "tabs",
            variant: "simple",
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Flex, { justifyContent: "space-between", children: [
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { as: "h2", variant: "beta", children: formatMessage({
                  id: index.getTrad("Settings.locales.modal.title"),
                  defaultMessage: "Configurations"
                }) }),
                /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Tabs, { children: [
                  /* @__PURE__ */ jsxRuntime.jsx(designSystem.Tab, { children: formatMessage({
                    id: index.getTrad("Settings.locales.modal.base"),
                    defaultMessage: "Basic settings"
                  }) }),
                  /* @__PURE__ */ jsxRuntime.jsx(designSystem.Tab, { children: formatMessage({
                    id: index.getTrad("Settings.locales.modal.advanced"),
                    defaultMessage: "Advanced settings"
                  }) })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(designSystem.Divider, {}),
              /* @__PURE__ */ jsxRuntime.jsx(designSystem.Box, { paddingTop: 7, paddingBottom: 7, children: /* @__PURE__ */ jsxRuntime.jsxs(designSystem.TabPanels, { children: [
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.TabPanel, { children: /* @__PURE__ */ jsxRuntime.jsx(BaseForm$1, {}) }),
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.TabPanel, { children: /* @__PURE__ */ jsxRuntime.jsx(AdvancedForm$1, {}) })
              ] }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntime.jsx(
          designSystem.ModalFooter,
          {
            startActions: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { variant: "tertiary", onClick: onClose, children: formatMessage({ id: "app.components.Button.cancel", defaultMessage: "Cancel" }) }),
            endActions: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { type: "submit", startIcon: /* @__PURE__ */ jsxRuntime.jsx(icons.Check, {}), disabled: isAdding, children: formatMessage({ id: "global.save", defaultMessage: "Save" }) })
          }
        )
      ] })
    }
  ) });
};
ModalCreate.propTypes = {
  onClose: PropTypes__default.default.func.isRequired
};
const useDeleteLocale = () => {
  const [isLoading, setLoading] = React.useState(false);
  const dispatch = reactRedux.useDispatch();
  const toggleNotification = helperPlugin.useNotification();
  const { del } = helperPlugin.useFetchClient();
  const removeLocale = async (id) => {
    try {
      setLoading(true);
      await del(`/i18n/locales/${id}`);
      toggleNotification({
        type: "success",
        message: { id: index.getTrad("Settings.locales.modal.delete.success") }
      });
      dispatch({ type: index.DELETE_LOCALE, id });
    } catch {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
    } finally {
      setLoading(false);
    }
  };
  return { isDeleting: isLoading, deleteLocale: removeLocale };
};
const ModalDelete = ({ localeToDelete, onClose }) => {
  const { isDeleting, deleteLocale } = useDeleteLocale();
  const isOpened = Boolean(localeToDelete);
  const handleDelete = () => deleteLocale(localeToDelete.id).then(onClose);
  return /* @__PURE__ */ jsxRuntime.jsx(
    helperPlugin.ConfirmDialog,
    {
      isConfirmButtonLoading: isDeleting,
      onConfirm: handleDelete,
      onToggleDialog: onClose,
      isOpen: isOpened
    }
  );
};
ModalDelete.defaultProps = {
  localeToDelete: void 0
};
ModalDelete.propTypes = {
  localeToDelete: PropTypes__default.default.shape({
    id: PropTypes__default.default.number.isRequired
  }),
  onClose: PropTypes__default.default.func.isRequired
};
const useEditLocale = () => {
  const [isLoading, setLoading] = React.useState(false);
  const dispatch = reactRedux.useDispatch();
  const toggleNotification = helperPlugin.useNotification();
  const { put } = helperPlugin.useFetchClient();
  const modifyLocale = async (id, payload) => {
    try {
      setLoading(true);
      const { data } = await put(`/i18n/locales/${id}`, payload);
      toggleNotification({
        type: "success",
        message: { id: index.getTrad("Settings.locales.modal.edit.success") }
      });
      dispatch({ type: index.UPDATE_LOCALE, editedLocale: data });
    } catch {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
    } finally {
      setLoading(false);
    }
  };
  return { isEditing: isLoading, editLocale: modifyLocale };
};
const AdvancedForm = ({ isDefaultLocale }) => {
  const { values, setFieldValue } = formik.useFormikContext();
  const { formatMessage } = reactIntl.useIntl();
  return /* @__PURE__ */ jsxRuntime.jsx(
    designSystem.Checkbox,
    {
      name: "isDefault",
      hint: formatMessage({
        id: index.getTrad("Settings.locales.modal.advanced.setAsDefault.hint"),
        defaultMessage: "One default locale is required, change it by selecting another one"
      }),
      onChange: () => setFieldValue("isDefault", !values.isDefault),
      value: values.isDefault,
      disabled: isDefaultLocale,
      children: formatMessage({
        id: index.getTrad("Settings.locales.modal.advanced.setAsDefault"),
        defaultMessage: "Set as default locale"
      })
    }
  );
};
AdvancedForm.propTypes = {
  isDefaultLocale: PropTypes__default.default.bool.isRequired
};
const BaseForm = ({ locale }) => {
  const { formatMessage } = reactIntl.useIntl();
  const { values, handleChange, errors } = formik.useFormikContext();
  const { defaultLocales, isLoading } = useDefaultLocales();
  const localeDetails = !isLoading && defaultLocales.find((row) => row.code === locale.code);
  return /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Grid, { gap: 4, children: [
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.GridItem, { col: 6, children: /* @__PURE__ */ jsxRuntime.jsx(
      designSystem.Select,
      {
        label: formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.label"),
          defaultMessage: "Locales"
        }),
        value: localeDetails?.code || locale.code,
        disabled: true,
        children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Option, { value: localeDetails?.code || locale.code, children: localeDetails?.name || locale.code })
      }
    ) }),
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.GridItem, { col: 6, children: /* @__PURE__ */ jsxRuntime.jsx(
      designSystem.TextInput,
      {
        name: "displayName",
        label: formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName"),
          defaultMessage: "Locale display name"
        }),
        hint: formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName.description"),
          defaultMessage: "Locale will be displayed under that name in the administration panel"
        }),
        error: errors.displayName ? formatMessage({
          id: index.getTrad("Settings.locales.modal.locales.displayName.error"),
          defaultMessage: "The locale display name can only be less than 50 characters."
        }) : void 0,
        value: values.displayName,
        onChange: handleChange
      }
    ) })
  ] });
};
BaseForm.propTypes = {
  locale: PropTypes__default.default.shape({
    id: PropTypes__default.default.number.isRequired,
    name: PropTypes__default.default.string.isRequired,
    code: PropTypes__default.default.string.isRequired,
    isDefault: PropTypes__default.default.bool.isRequired
  }).isRequired
};
const ModalEdit = ({ locale, onClose }) => {
  const { refetchPermissions } = helperPlugin.useRBACProvider();
  const { isEditing, editLocale } = useEditLocale();
  const { formatMessage } = reactIntl.useIntl();
  const handleSubmit = async ({ displayName, isDefault }) => {
    await editLocale(locale.id, { name: displayName, isDefault });
    await refetchPermissions();
  };
  return /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalLayout, { onClose, labelledBy: "edit-locale-title", children: /* @__PURE__ */ jsxRuntime.jsx(
    formik.Formik,
    {
      initialValues: {
        code: locale?.code,
        displayName: locale?.name || "",
        isDefault: Boolean(locale?.isDefault)
      },
      onSubmit: handleSubmit,
      validationSchema: localeFormSchema,
      children: /* @__PURE__ */ jsxRuntime.jsxs(helperPlugin.Form, { children: [
        /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalHeader, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { fontWeight: "bold", textColor: "neutral800", as: "h2", id: "edit-locale-title", children: formatMessage({
          id: index.getTrad("Settings.list.actions.edit"),
          defaultMessage: "Edit a locale"
        }) }) }),
        /* @__PURE__ */ jsxRuntime.jsx(designSystem.ModalBody, { children: /* @__PURE__ */ jsxRuntime.jsxs(
          designSystem.TabGroup,
          {
            label: formatMessage({
              id: index.getTrad("Settings.locales.modal.title"),
              defaultMessage: "Configurations"
            }),
            id: "tabs",
            variant: "simple",
            children: [
              /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Flex, { justifyContent: "space-between", children: [
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { as: "h2", children: formatMessage({
                  id: index.getTrad("Settings.locales.modal.title"),
                  defaultMessage: "Configurations"
                }) }),
                /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Tabs, { children: [
                  /* @__PURE__ */ jsxRuntime.jsx(designSystem.Tab, { children: formatMessage({
                    id: index.getTrad("Settings.locales.modal.base"),
                    defaultMessage: "Basic settings"
                  }) }),
                  /* @__PURE__ */ jsxRuntime.jsx(designSystem.Tab, { children: formatMessage({
                    id: index.getTrad("Settings.locales.modal.advanced"),
                    defaultMessage: "Advanced settings"
                  }) })
                ] })
              ] }),
              /* @__PURE__ */ jsxRuntime.jsx(designSystem.Divider, {}),
              /* @__PURE__ */ jsxRuntime.jsx(designSystem.Box, { paddingTop: 7, paddingBottom: 7, children: /* @__PURE__ */ jsxRuntime.jsxs(designSystem.TabPanels, { children: [
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.TabPanel, { children: /* @__PURE__ */ jsxRuntime.jsx(BaseForm, { locale }) }),
                /* @__PURE__ */ jsxRuntime.jsx(designSystem.TabPanel, { children: /* @__PURE__ */ jsxRuntime.jsx(AdvancedForm, { isDefaultLocale: Boolean(locale && locale.isDefault) }) })
              ] }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsxRuntime.jsx(
          designSystem.ModalFooter,
          {
            startActions: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { variant: "tertiary", onClick: onClose, children: formatMessage({ id: "app.components.Button.cancel" }) }),
            endActions: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { type: "submit", startIcon: /* @__PURE__ */ jsxRuntime.jsx(icons.Check, {}), disabled: isEditing, children: formatMessage({ id: "global.save" }) })
          }
        )
      ] })
    }
  ) });
};
ModalEdit.defaultProps = {
  locale: void 0
};
ModalEdit.propTypes = {
  locale: PropTypes__default.default.shape({
    id: PropTypes__default.default.number.isRequired,
    name: PropTypes__default.default.string.isRequired,
    code: PropTypes__default.default.string.isRequired,
    isDefault: PropTypes__default.default.bool.isRequired
  }),
  onClose: PropTypes__default.default.func.isRequired
};
const LocaleTable = ({ locales, onDeleteLocale, onEditLocale }) => {
  const { formatMessage } = reactIntl.useIntl();
  return /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Table, { colCount: 4, rowCount: locales.length + 1, children: [
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.Thead, { children: /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Tr, { children: [
      /* @__PURE__ */ jsxRuntime.jsx(designSystem.Th, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: index.getTrad("Settings.locales.row.id") }) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(designSystem.Th, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: index.getTrad("Settings.locales.row.displayName") }) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(designSystem.Th, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: index.getTrad("Settings.locales.row.default-locale") }) }) }),
      /* @__PURE__ */ jsxRuntime.jsx(designSystem.Th, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.VisuallyHidden, { children: "Actions" }) })
    ] }) }),
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.Tbody, { children: locales.map((locale) => /* @__PURE__ */ jsxRuntime.jsxs(
      designSystem.Tr,
      {
        ...helperPlugin.onRowClick({
          fn: () => onEditLocale(locale),
          condition: onEditLocale
        }),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.Td, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { textColor: "neutral800", children: locale.id }) }),
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.Td, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { textColor: "neutral800", children: locale.name }) }),
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.Td, { children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { textColor: "neutral800", children: locale.isDefault ? formatMessage({ id: index.getTrad("Settings.locales.default") }) : null }) }),
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.Td, { children: /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Flex, { gap: 1, justifyContent: "flex-end", ...helperPlugin.stopPropagation, children: [
            onEditLocale && /* @__PURE__ */ jsxRuntime.jsx(
              designSystem.IconButton,
              {
                onClick: () => onEditLocale(locale),
                label: formatMessage({ id: index.getTrad("Settings.list.actions.edit") }),
                icon: /* @__PURE__ */ jsxRuntime.jsx(icons.Pencil, {}),
                noBorder: true
              }
            ),
            onDeleteLocale && !locale.isDefault && /* @__PURE__ */ jsxRuntime.jsx(
              designSystem.IconButton,
              {
                onClick: () => onDeleteLocale(locale),
                label: formatMessage({ id: index.getTrad("Settings.list.actions.delete") }),
                icon: /* @__PURE__ */ jsxRuntime.jsx(icons.Trash, {}),
                noBorder: true
              }
            )
          ] }) })
        ]
      },
      locale.id
    )) })
  ] });
};
LocaleTable.defaultProps = {
  locales: [],
  onDeleteLocale: void 0,
  onEditLocale: void 0
};
LocaleTable.propTypes = {
  locales: PropTypes__default.default.array,
  onDeleteLocale: PropTypes__default.default.func,
  onEditLocale: PropTypes__default.default.func
};
const LocaleList = ({ canUpdateLocale, canDeleteLocale, onToggleCreateModal, isCreating }) => {
  const [localeToDelete, setLocaleToDelete] = React.useState();
  const [localeToEdit, setLocaleToEdit] = React.useState();
  const { locales } = index.useLocales();
  const { formatMessage } = reactIntl.useIntl();
  helperPlugin.useFocusWhenNavigate();
  const closeModalToDelete = () => setLocaleToDelete(void 0);
  const handleDeleteLocale = canDeleteLocale ? setLocaleToDelete : void 0;
  const closeModalToEdit = () => setLocaleToEdit(void 0);
  const handleEditLocale = canUpdateLocale ? setLocaleToEdit : void 0;
  return /* @__PURE__ */ jsxRuntime.jsxs(designSystem.Main, { tabIndex: -1, children: [
    /* @__PURE__ */ jsxRuntime.jsx(
      designSystem.HeaderLayout,
      {
        primaryAction: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { startIcon: /* @__PURE__ */ jsxRuntime.jsx(icons.Plus, {}), onClick: onToggleCreateModal, size: "S", children: formatMessage({ id: index.getTrad("Settings.list.actions.add") }) }),
        title: formatMessage({ id: index.getTrad("plugin.name") }),
        subtitle: formatMessage({ id: index.getTrad("Settings.list.description") })
      }
    ),
    /* @__PURE__ */ jsxRuntime.jsx(designSystem.ContentLayout, { children: locales?.length > 0 ? /* @__PURE__ */ jsxRuntime.jsx(
      LocaleTable,
      {
        locales,
        onDeleteLocale: handleDeleteLocale,
        onEditLocale: handleEditLocale
      }
    ) : /* @__PURE__ */ jsxRuntime.jsx(
      designSystem.EmptyStateLayout,
      {
        icon: /* @__PURE__ */ jsxRuntime.jsx(icons.EmptyDocuments, { width: void 0, height: void 0 }),
        content: formatMessage({ id: index.getTrad("Settings.list.empty.title") }),
        action: onToggleCreateModal ? /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { variant: "secondary", startIcon: /* @__PURE__ */ jsxRuntime.jsx(icons.Plus, {}), onClick: onToggleCreateModal, children: formatMessage({ id: index.getTrad("Settings.list.actions.add") }) }) : null
      }
    ) }),
    isCreating && /* @__PURE__ */ jsxRuntime.jsx(ModalCreate, { onClose: onToggleCreateModal }),
    localeToEdit && /* @__PURE__ */ jsxRuntime.jsx(ModalEdit, { onClose: closeModalToEdit, locale: localeToEdit }),
    /* @__PURE__ */ jsxRuntime.jsx(ModalDelete, { localeToDelete, onClose: closeModalToDelete })
  ] });
};
LocaleList.defaultProps = {
  onToggleCreateModal: void 0
};
LocaleList.propTypes = {
  canUpdateLocale: PropTypes__default.default.bool.isRequired,
  canDeleteLocale: PropTypes__default.default.bool.isRequired,
  onToggleCreateModal: PropTypes__default.default.func,
  isCreating: PropTypes__default.default.bool.isRequired
};
const LocaleSettingsPage = ({
  canReadLocale,
  canCreateLocale,
  canDeleteLocale,
  canUpdateLocale
}) => {
  const [isOpenedCreateModal, setIsOpenedCreateModal] = React.useState(false);
  const handleToggleModalCreate = canCreateLocale ? () => setIsOpenedCreateModal((s) => !s) : void 0;
  return canReadLocale ? /* @__PURE__ */ jsxRuntime.jsx(
    LocaleList,
    {
      canUpdateLocale,
      canDeleteLocale,
      onToggleCreateModal: handleToggleModalCreate,
      isCreating: isOpenedCreateModal
    }
  ) : null;
};
LocaleSettingsPage.propTypes = {
  canReadLocale: PropTypes__default.default.bool.isRequired,
  canCreateLocale: PropTypes__default.default.bool.isRequired,
  canUpdateLocale: PropTypes__default.default.bool.isRequired,
  canDeleteLocale: PropTypes__default.default.bool.isRequired
};
const ProtectedLocaleSettingsPage = () => {
  const {
    isLoading,
    allowedActions: { canRead, canUpdate, canCreate, canDelete }
  } = helperPlugin.useRBAC(index.PERMISSIONS);
  if (isLoading) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntime.jsx(
    LocaleSettingsPage,
    {
      canReadLocale: canRead,
      canCreateLocale: canCreate,
      canUpdateLocale: canUpdate,
      canDeleteLocale: canDelete
    }
  );
};
exports.default = ProtectedLocaleSettingsPage;
//# sourceMappingURL=index-af82b8f4.js.map
