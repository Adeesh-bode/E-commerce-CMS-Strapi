import { jsx, jsxs } from "react/jsx-runtime";
import { useNotification, useFetchClient, translatedErrors, useRBACProvider, Form, ConfirmDialog, onRowClick, stopPropagation, useFocusWhenNavigate, useRBAC } from "@strapi/helper-plugin";
import { g as getTrad, A as ADD_LOCALE, u as useLocales, D as DELETE_LOCALE, U as UPDATE_LOCALE, P as PERMISSIONS } from "./index-d68e8e6b.mjs";
import React, { useState, useCallback } from "react";
import PropTypes from "prop-types";
import { Checkbox, useNotifyAT, Combobox, ComboboxOption, Grid, GridItem, TextInput, ModalLayout, ModalHeader, Typography, ModalBody, TabGroup, Flex, Tabs, Tab, Divider, Box, TabPanels, TabPanel, ModalFooter, Button, Select, Option, Table, Thead, Tr, Th, VisuallyHidden, Tbody, Td, IconButton, Main, HeaderLayout, ContentLayout, EmptyStateLayout } from "@strapi/design-system";
import { Check, Pencil, Trash, Plus, EmptyDocuments } from "@strapi/icons";
import { useIntl } from "react-intl";
import { useFormikContext, Formik } from "formik";
import get from "lodash/get";
import { useDispatch } from "react-redux";
import { object, string } from "yup";
import { useQuery } from "react-query";
import "styled-components";
import "lodash/has";
import "react-router-dom";
import "qs";
import "immer";
import "lodash/set";
import "lodash/cloneDeep";
import "lodash/merge";
import "lodash/omit";
const useAddLocale = () => {
  const [isLoading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const toggleNotification = useNotification();
  const { post } = useFetchClient();
  const persistLocale = async (locale) => {
    setLoading(true);
    try {
      const { data } = await post("/i18n/locales", locale);
      toggleNotification({
        type: "success",
        message: { id: getTrad("Settings.locales.modal.create.success") }
      });
      dispatch({ type: ADD_LOCALE, newLocale: data });
    } catch (e) {
      const message = get(e, "response.payload.message", null);
      if (message && message.includes("already exists")) {
        toggleNotification({
          type: "warning",
          message: { id: getTrad("Settings.locales.modal.create.alreadyExist") }
        });
      } else {
        toggleNotification({
          type: "warning",
          message: { id: "notification.error" }
        });
      }
      throw e;
    } finally {
      setLoading(false);
    }
  };
  return { isAdding: isLoading, addLocale: persistLocale };
};
const localeFormSchema = object().shape({
  code: string().required(),
  displayName: string().max(50, "Settings.locales.modal.locales.displayName.error").required(translatedErrors.required)
});
const AdvancedForm$1 = () => {
  const { values, setFieldValue } = useFormikContext();
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsx(
    Checkbox,
    {
      hint: formatMessage({
        id: getTrad("Settings.locales.modal.advanced.setAsDefault.hint"),
        defaultMessage: "One default locale is required, change it by selecting another one"
      }),
      onChange: () => setFieldValue("isDefault", !values.isDefault),
      value: values.isDefault,
      children: formatMessage({
        id: getTrad("Settings.locales.modal.advanced.setAsDefault"),
        defaultMessage: "Set as default locale"
      })
    }
  );
};
const useDefaultLocales = () => {
  const { formatMessage } = useIntl();
  const { notifyStatus } = useNotifyAT();
  const toggleNotification = useNotification();
  const { get: get2 } = useFetchClient();
  const { isLoading, data } = useQuery(["plugin-i18n", "locales"], async () => {
    try {
      const { data: data2 } = await get2("/i18n/iso-locales");
      notifyStatus(
        formatMessage({
          id: getTrad("Settings.locales.modal.locales.loaded"),
          defaultMessage: "The locales have been successfully loaded."
        })
      );
      return data2;
    } catch (e) {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
      return [];
    }
  });
  return { defaultLocales: data, isLoading };
};
const LocaleSelect = React.memo(({ value, onClear, onLocaleChange, error }) => {
  const { formatMessage } = useIntl();
  const { defaultLocales, isLoading } = useDefaultLocales();
  const { locales } = useLocales();
  const options = (defaultLocales || []).map((locale) => ({
    label: locale.name,
    value: locale.code
  })).filter(({ value: v }) => {
    const foundLocale = locales.find(({ code }) => code === v);
    return !foundLocale || foundLocale.code === value;
  });
  const computedValue = value || "";
  return /* @__PURE__ */ jsx(
    Combobox,
    {
      "aria-busy": isLoading,
      error,
      label: formatMessage({
        id: getTrad("Settings.locales.modal.locales.label"),
        defaultMessage: "Locales"
      }),
      value: computedValue,
      onClear: value ? onClear : void 0,
      onChange: (selectedLocaleKey) => {
        const selectedLocale = options.find((locale) => locale.value === selectedLocaleKey);
        if (selectedLocale) {
          onLocaleChange({ code: selectedLocale.value, displayName: selectedLocale.label });
        }
      },
      placeholder: formatMessage({
        id: "components.placeholder.select",
        defaultMessage: "Select"
      }),
      children: options.map((option) => /* @__PURE__ */ jsx(ComboboxOption, { value: option.value, children: option.label }, option.value))
    }
  );
});
LocaleSelect.defaultProps = {
  error: void 0,
  value: void 0,
  onClear() {
  },
  onLocaleChange: () => void 0
};
LocaleSelect.propTypes = {
  error: PropTypes.string,
  onClear: PropTypes.func,
  onLocaleChange: PropTypes.func,
  value: PropTypes.string
};
const BaseForm$1 = () => {
  const { formatMessage } = useIntl();
  const { values, handleChange, setFieldValue, errors } = useFormikContext();
  const handleLocaleChange = useCallback(
    (nextLocale) => {
      setFieldValue("displayName", nextLocale.displayName);
      setFieldValue("code", nextLocale.code);
    },
    [setFieldValue]
  );
  const handleClear = useCallback(() => {
    setFieldValue("displayName", "");
    setFieldValue("code", "");
  }, [setFieldValue]);
  return /* @__PURE__ */ jsxs(Grid, { gap: 4, children: [
    /* @__PURE__ */ jsx(GridItem, { col: 6, children: /* @__PURE__ */ jsx(
      LocaleSelect,
      {
        error: errors.code,
        value: values.code,
        onLocaleChange: handleLocaleChange,
        onClear: handleClear
      }
    ) }),
    /* @__PURE__ */ jsx(GridItem, { col: 6, children: /* @__PURE__ */ jsx(
      TextInput,
      {
        name: "displayName",
        label: formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName"),
          defaultMessage: "Locale display name"
        }),
        hint: formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName.description"),
          defaultMessage: "Locale will be displayed under that name in the administration panel"
        }),
        error: errors.displayName ? formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName.error"),
          defaultMessage: "The locale display name can only be less than 50 characters."
        }) : void 0,
        value: values.displayName,
        onChange: handleChange
      }
    ) })
  ] });
};
const initialFormValues = {
  code: "",
  displayName: "",
  isDefault: false
};
const ModalCreate = ({ onClose }) => {
  const { isAdding, addLocale } = useAddLocale();
  const { formatMessage } = useIntl();
  const { refetchPermissions } = useRBACProvider();
  const handleLocaleAdd = async (values) => {
    await addLocale({
      code: values.code,
      name: values.displayName,
      isDefault: values.isDefault
    });
    await refetchPermissions();
  };
  return /* @__PURE__ */ jsx(ModalLayout, { onClose, labelledBy: "add-locale-title", children: /* @__PURE__ */ jsx(
    Formik,
    {
      initialValues: initialFormValues,
      onSubmit: handleLocaleAdd,
      validationSchema: localeFormSchema,
      validateOnChange: false,
      children: /* @__PURE__ */ jsxs(Form, { children: [
        /* @__PURE__ */ jsx(ModalHeader, { children: /* @__PURE__ */ jsx(Typography, { fontWeight: "bold", textColor: "neutral800", as: "h2", id: "add-locale-title", children: formatMessage({
          id: getTrad("Settings.list.actions.add"),
          defaultMessage: "Add new locale"
        }) }) }),
        /* @__PURE__ */ jsx(ModalBody, { children: /* @__PURE__ */ jsxs(
          TabGroup,
          {
            label: formatMessage({
              id: getTrad("Settings.locales.modal.title"),
              defaultMessage: "Configurations"
            }),
            id: "tabs",
            variant: "simple",
            children: [
              /* @__PURE__ */ jsxs(Flex, { justifyContent: "space-between", children: [
                /* @__PURE__ */ jsx(Typography, { as: "h2", variant: "beta", children: formatMessage({
                  id: getTrad("Settings.locales.modal.title"),
                  defaultMessage: "Configurations"
                }) }),
                /* @__PURE__ */ jsxs(Tabs, { children: [
                  /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                    id: getTrad("Settings.locales.modal.base"),
                    defaultMessage: "Basic settings"
                  }) }),
                  /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                    id: getTrad("Settings.locales.modal.advanced"),
                    defaultMessage: "Advanced settings"
                  }) })
                ] })
              ] }),
              /* @__PURE__ */ jsx(Divider, {}),
              /* @__PURE__ */ jsx(Box, { paddingTop: 7, paddingBottom: 7, children: /* @__PURE__ */ jsxs(TabPanels, { children: [
                /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(BaseForm$1, {}) }),
                /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(AdvancedForm$1, {}) })
              ] }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsx(
          ModalFooter,
          {
            startActions: /* @__PURE__ */ jsx(Button, { variant: "tertiary", onClick: onClose, children: formatMessage({ id: "app.components.Button.cancel", defaultMessage: "Cancel" }) }),
            endActions: /* @__PURE__ */ jsx(Button, { type: "submit", startIcon: /* @__PURE__ */ jsx(Check, {}), disabled: isAdding, children: formatMessage({ id: "global.save", defaultMessage: "Save" }) })
          }
        )
      ] })
    }
  ) });
};
ModalCreate.propTypes = {
  onClose: PropTypes.func.isRequired
};
const useDeleteLocale = () => {
  const [isLoading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const toggleNotification = useNotification();
  const { del } = useFetchClient();
  const removeLocale = async (id) => {
    try {
      setLoading(true);
      await del(`/i18n/locales/${id}`);
      toggleNotification({
        type: "success",
        message: { id: getTrad("Settings.locales.modal.delete.success") }
      });
      dispatch({ type: DELETE_LOCALE, id });
    } catch {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
    } finally {
      setLoading(false);
    }
  };
  return { isDeleting: isLoading, deleteLocale: removeLocale };
};
const ModalDelete = ({ localeToDelete, onClose }) => {
  const { isDeleting, deleteLocale } = useDeleteLocale();
  const isOpened = Boolean(localeToDelete);
  const handleDelete = () => deleteLocale(localeToDelete.id).then(onClose);
  return /* @__PURE__ */ jsx(
    ConfirmDialog,
    {
      isConfirmButtonLoading: isDeleting,
      onConfirm: handleDelete,
      onToggleDialog: onClose,
      isOpen: isOpened
    }
  );
};
ModalDelete.defaultProps = {
  localeToDelete: void 0
};
ModalDelete.propTypes = {
  localeToDelete: PropTypes.shape({
    id: PropTypes.number.isRequired
  }),
  onClose: PropTypes.func.isRequired
};
const useEditLocale = () => {
  const [isLoading, setLoading] = useState(false);
  const dispatch = useDispatch();
  const toggleNotification = useNotification();
  const { put } = useFetchClient();
  const modifyLocale = async (id, payload) => {
    try {
      setLoading(true);
      const { data } = await put(`/i18n/locales/${id}`, payload);
      toggleNotification({
        type: "success",
        message: { id: getTrad("Settings.locales.modal.edit.success") }
      });
      dispatch({ type: UPDATE_LOCALE, editedLocale: data });
    } catch {
      toggleNotification({
        type: "warning",
        message: { id: "notification.error" }
      });
    } finally {
      setLoading(false);
    }
  };
  return { isEditing: isLoading, editLocale: modifyLocale };
};
const AdvancedForm = ({ isDefaultLocale }) => {
  const { values, setFieldValue } = useFormikContext();
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsx(
    Checkbox,
    {
      name: "isDefault",
      hint: formatMessage({
        id: getTrad("Settings.locales.modal.advanced.setAsDefault.hint"),
        defaultMessage: "One default locale is required, change it by selecting another one"
      }),
      onChange: () => setFieldValue("isDefault", !values.isDefault),
      value: values.isDefault,
      disabled: isDefaultLocale,
      children: formatMessage({
        id: getTrad("Settings.locales.modal.advanced.setAsDefault"),
        defaultMessage: "Set as default locale"
      })
    }
  );
};
AdvancedForm.propTypes = {
  isDefaultLocale: PropTypes.bool.isRequired
};
const BaseForm = ({ locale }) => {
  const { formatMessage } = useIntl();
  const { values, handleChange, errors } = useFormikContext();
  const { defaultLocales, isLoading } = useDefaultLocales();
  const localeDetails = !isLoading && defaultLocales.find((row) => row.code === locale.code);
  return /* @__PURE__ */ jsxs(Grid, { gap: 4, children: [
    /* @__PURE__ */ jsx(GridItem, { col: 6, children: /* @__PURE__ */ jsx(
      Select,
      {
        label: formatMessage({
          id: getTrad("Settings.locales.modal.locales.label"),
          defaultMessage: "Locales"
        }),
        value: localeDetails?.code || locale.code,
        disabled: true,
        children: /* @__PURE__ */ jsx(Option, { value: localeDetails?.code || locale.code, children: localeDetails?.name || locale.code })
      }
    ) }),
    /* @__PURE__ */ jsx(GridItem, { col: 6, children: /* @__PURE__ */ jsx(
      TextInput,
      {
        name: "displayName",
        label: formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName"),
          defaultMessage: "Locale display name"
        }),
        hint: formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName.description"),
          defaultMessage: "Locale will be displayed under that name in the administration panel"
        }),
        error: errors.displayName ? formatMessage({
          id: getTrad("Settings.locales.modal.locales.displayName.error"),
          defaultMessage: "The locale display name can only be less than 50 characters."
        }) : void 0,
        value: values.displayName,
        onChange: handleChange
      }
    ) })
  ] });
};
BaseForm.propTypes = {
  locale: PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    code: PropTypes.string.isRequired,
    isDefault: PropTypes.bool.isRequired
  }).isRequired
};
const ModalEdit = ({ locale, onClose }) => {
  const { refetchPermissions } = useRBACProvider();
  const { isEditing, editLocale } = useEditLocale();
  const { formatMessage } = useIntl();
  const handleSubmit = async ({ displayName, isDefault }) => {
    await editLocale(locale.id, { name: displayName, isDefault });
    await refetchPermissions();
  };
  return /* @__PURE__ */ jsx(ModalLayout, { onClose, labelledBy: "edit-locale-title", children: /* @__PURE__ */ jsx(
    Formik,
    {
      initialValues: {
        code: locale?.code,
        displayName: locale?.name || "",
        isDefault: Boolean(locale?.isDefault)
      },
      onSubmit: handleSubmit,
      validationSchema: localeFormSchema,
      children: /* @__PURE__ */ jsxs(Form, { children: [
        /* @__PURE__ */ jsx(ModalHeader, { children: /* @__PURE__ */ jsx(Typography, { fontWeight: "bold", textColor: "neutral800", as: "h2", id: "edit-locale-title", children: formatMessage({
          id: getTrad("Settings.list.actions.edit"),
          defaultMessage: "Edit a locale"
        }) }) }),
        /* @__PURE__ */ jsx(ModalBody, { children: /* @__PURE__ */ jsxs(
          TabGroup,
          {
            label: formatMessage({
              id: getTrad("Settings.locales.modal.title"),
              defaultMessage: "Configurations"
            }),
            id: "tabs",
            variant: "simple",
            children: [
              /* @__PURE__ */ jsxs(Flex, { justifyContent: "space-between", children: [
                /* @__PURE__ */ jsx(Typography, { as: "h2", children: formatMessage({
                  id: getTrad("Settings.locales.modal.title"),
                  defaultMessage: "Configurations"
                }) }),
                /* @__PURE__ */ jsxs(Tabs, { children: [
                  /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                    id: getTrad("Settings.locales.modal.base"),
                    defaultMessage: "Basic settings"
                  }) }),
                  /* @__PURE__ */ jsx(Tab, { children: formatMessage({
                    id: getTrad("Settings.locales.modal.advanced"),
                    defaultMessage: "Advanced settings"
                  }) })
                ] })
              ] }),
              /* @__PURE__ */ jsx(Divider, {}),
              /* @__PURE__ */ jsx(Box, { paddingTop: 7, paddingBottom: 7, children: /* @__PURE__ */ jsxs(TabPanels, { children: [
                /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(BaseForm, { locale }) }),
                /* @__PURE__ */ jsx(TabPanel, { children: /* @__PURE__ */ jsx(AdvancedForm, { isDefaultLocale: Boolean(locale && locale.isDefault) }) })
              ] }) })
            ]
          }
        ) }),
        /* @__PURE__ */ jsx(
          ModalFooter,
          {
            startActions: /* @__PURE__ */ jsx(Button, { variant: "tertiary", onClick: onClose, children: formatMessage({ id: "app.components.Button.cancel" }) }),
            endActions: /* @__PURE__ */ jsx(Button, { type: "submit", startIcon: /* @__PURE__ */ jsx(Check, {}), disabled: isEditing, children: formatMessage({ id: "global.save" }) })
          }
        )
      ] })
    }
  ) });
};
ModalEdit.defaultProps = {
  locale: void 0
};
ModalEdit.propTypes = {
  locale: PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired,
    code: PropTypes.string.isRequired,
    isDefault: PropTypes.bool.isRequired
  }),
  onClose: PropTypes.func.isRequired
};
const LocaleTable = ({ locales, onDeleteLocale, onEditLocale }) => {
  const { formatMessage } = useIntl();
  return /* @__PURE__ */ jsxs(Table, { colCount: 4, rowCount: locales.length + 1, children: [
    /* @__PURE__ */ jsx(Thead, { children: /* @__PURE__ */ jsxs(Tr, { children: [
      /* @__PURE__ */ jsx(Th, { children: /* @__PURE__ */ jsx(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: getTrad("Settings.locales.row.id") }) }) }),
      /* @__PURE__ */ jsx(Th, { children: /* @__PURE__ */ jsx(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: getTrad("Settings.locales.row.displayName") }) }) }),
      /* @__PURE__ */ jsx(Th, { children: /* @__PURE__ */ jsx(Typography, { variant: "sigma", textColor: "neutral600", children: formatMessage({ id: getTrad("Settings.locales.row.default-locale") }) }) }),
      /* @__PURE__ */ jsx(Th, { children: /* @__PURE__ */ jsx(VisuallyHidden, { children: "Actions" }) })
    ] }) }),
    /* @__PURE__ */ jsx(Tbody, { children: locales.map((locale) => /* @__PURE__ */ jsxs(
      Tr,
      {
        ...onRowClick({
          fn: () => onEditLocale(locale),
          condition: onEditLocale
        }),
        children: [
          /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { textColor: "neutral800", children: locale.id }) }),
          /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { textColor: "neutral800", children: locale.name }) }),
          /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsx(Typography, { textColor: "neutral800", children: locale.isDefault ? formatMessage({ id: getTrad("Settings.locales.default") }) : null }) }),
          /* @__PURE__ */ jsx(Td, { children: /* @__PURE__ */ jsxs(Flex, { gap: 1, justifyContent: "flex-end", ...stopPropagation, children: [
            onEditLocale && /* @__PURE__ */ jsx(
              IconButton,
              {
                onClick: () => onEditLocale(locale),
                label: formatMessage({ id: getTrad("Settings.list.actions.edit") }),
                icon: /* @__PURE__ */ jsx(Pencil, {}),
                noBorder: true
              }
            ),
            onDeleteLocale && !locale.isDefault && /* @__PURE__ */ jsx(
              IconButton,
              {
                onClick: () => onDeleteLocale(locale),
                label: formatMessage({ id: getTrad("Settings.list.actions.delete") }),
                icon: /* @__PURE__ */ jsx(Trash, {}),
                noBorder: true
              }
            )
          ] }) })
        ]
      },
      locale.id
    )) })
  ] });
};
LocaleTable.defaultProps = {
  locales: [],
  onDeleteLocale: void 0,
  onEditLocale: void 0
};
LocaleTable.propTypes = {
  locales: PropTypes.array,
  onDeleteLocale: PropTypes.func,
  onEditLocale: PropTypes.func
};
const LocaleList = ({ canUpdateLocale, canDeleteLocale, onToggleCreateModal, isCreating }) => {
  const [localeToDelete, setLocaleToDelete] = useState();
  const [localeToEdit, setLocaleToEdit] = useState();
  const { locales } = useLocales();
  const { formatMessage } = useIntl();
  useFocusWhenNavigate();
  const closeModalToDelete = () => setLocaleToDelete(void 0);
  const handleDeleteLocale = canDeleteLocale ? setLocaleToDelete : void 0;
  const closeModalToEdit = () => setLocaleToEdit(void 0);
  const handleEditLocale = canUpdateLocale ? setLocaleToEdit : void 0;
  return /* @__PURE__ */ jsxs(Main, { tabIndex: -1, children: [
    /* @__PURE__ */ jsx(
      HeaderLayout,
      {
        primaryAction: /* @__PURE__ */ jsx(Button, { startIcon: /* @__PURE__ */ jsx(Plus, {}), onClick: onToggleCreateModal, size: "S", children: formatMessage({ id: getTrad("Settings.list.actions.add") }) }),
        title: formatMessage({ id: getTrad("plugin.name") }),
        subtitle: formatMessage({ id: getTrad("Settings.list.description") })
      }
    ),
    /* @__PURE__ */ jsx(ContentLayout, { children: locales?.length > 0 ? /* @__PURE__ */ jsx(
      LocaleTable,
      {
        locales,
        onDeleteLocale: handleDeleteLocale,
        onEditLocale: handleEditLocale
      }
    ) : /* @__PURE__ */ jsx(
      EmptyStateLayout,
      {
        icon: /* @__PURE__ */ jsx(EmptyDocuments, { width: void 0, height: void 0 }),
        content: formatMessage({ id: getTrad("Settings.list.empty.title") }),
        action: onToggleCreateModal ? /* @__PURE__ */ jsx(Button, { variant: "secondary", startIcon: /* @__PURE__ */ jsx(Plus, {}), onClick: onToggleCreateModal, children: formatMessage({ id: getTrad("Settings.list.actions.add") }) }) : null
      }
    ) }),
    isCreating && /* @__PURE__ */ jsx(ModalCreate, { onClose: onToggleCreateModal }),
    localeToEdit && /* @__PURE__ */ jsx(ModalEdit, { onClose: closeModalToEdit, locale: localeToEdit }),
    /* @__PURE__ */ jsx(ModalDelete, { localeToDelete, onClose: closeModalToDelete })
  ] });
};
LocaleList.defaultProps = {
  onToggleCreateModal: void 0
};
LocaleList.propTypes = {
  canUpdateLocale: PropTypes.bool.isRequired,
  canDeleteLocale: PropTypes.bool.isRequired,
  onToggleCreateModal: PropTypes.func,
  isCreating: PropTypes.bool.isRequired
};
const LocaleSettingsPage = ({
  canReadLocale,
  canCreateLocale,
  canDeleteLocale,
  canUpdateLocale
}) => {
  const [isOpenedCreateModal, setIsOpenedCreateModal] = useState(false);
  const handleToggleModalCreate = canCreateLocale ? () => setIsOpenedCreateModal((s) => !s) : void 0;
  return canReadLocale ? /* @__PURE__ */ jsx(
    LocaleList,
    {
      canUpdateLocale,
      canDeleteLocale,
      onToggleCreateModal: handleToggleModalCreate,
      isCreating: isOpenedCreateModal
    }
  ) : null;
};
LocaleSettingsPage.propTypes = {
  canReadLocale: PropTypes.bool.isRequired,
  canCreateLocale: PropTypes.bool.isRequired,
  canUpdateLocale: PropTypes.bool.isRequired,
  canDeleteLocale: PropTypes.bool.isRequired
};
const ProtectedLocaleSettingsPage = () => {
  const {
    isLoading,
    allowedActions: { canRead, canUpdate, canCreate, canDelete }
  } = useRBAC(PERMISSIONS);
  if (isLoading) {
    return null;
  }
  return /* @__PURE__ */ jsx(
    LocaleSettingsPage,
    {
      canReadLocale: canRead,
      canCreateLocale: canCreate,
      canUpdateLocale: canUpdate,
      canDeleteLocale: canDelete
    }
  );
};
export {
  ProtectedLocaleSettingsPage as default
};
//# sourceMappingURL=index-dd3fe292.mjs.map
