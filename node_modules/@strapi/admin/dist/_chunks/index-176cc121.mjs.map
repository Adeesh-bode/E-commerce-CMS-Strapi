{"version":3,"file":"index-176cc121.mjs","sources":["../../admin/src/pages/SettingsPage/hooks/useRegenerate.ts","../../admin/src/pages/SettingsPage/components/Tokens/Regenerate/index.js","../../admin/src/pages/SettingsPage/components/Tokens/FormHead/index.js","../../admin/src/pages/SettingsPage/components/Tokens/TokenBox/index.js","../../admin/src/pages/SettingsPage/pages/ApiTokens/EditView/utils/getDateOfExpiration.js","../../admin/src/pages/SettingsPage/pages/ApiTokens/EditView/utils/schema.js","../../admin/src/pages/SettingsPage/components/Tokens/LifeSpanInput/index.js","../../admin/src/pages/SettingsPage/components/Tokens/TokenDescription/index.js","../../admin/src/pages/SettingsPage/components/Tokens/TokenName/index.js","../../admin/src/pages/SettingsPage/components/Tokens/TokenTypeSelect/index.js"],"sourcesContent":["import { useState } from 'react';\n\nimport { useAPIErrorHandler, useFetchClient, useNotification } from '@strapi/helper-plugin';\nimport { AxiosError } from 'axios';\n\nexport const useRegenerate = (\n  url: string,\n  id: number | string,\n  onRegenerate: (accessKey: string) => void,\n  onError?: (error: unknown) => void\n): { isLoadingConfirmation: boolean; regenerateData: () => void } => {\n  const [isLoadingConfirmation, setIsLoadingConfirmation] = useState(false);\n  const toggleNotification = useNotification();\n  const { post } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const regenerateData = async () => {\n    try {\n      const {\n        data: {\n          data: { accessKey },\n        },\n      } = await post(`${url}${id}/regenerate`);\n      setIsLoadingConfirmation(false);\n      onRegenerate(accessKey);\n    } catch (error) {\n      setIsLoadingConfirmation(false);\n\n      if (onError) {\n        onError(error);\n      } else {\n        if (error instanceof AxiosError) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        }\n      }\n    }\n  };\n\n  return {\n    regenerateData,\n    isLoadingConfirmation,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { ConfirmDialog } from '@strapi/helper-plugin';\nimport { Refresh } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { useRegenerate } from '../../../hooks/useRegenerate';\n\nexport const Regenerate = ({ onRegenerate, idToRegenerate, backUrl, onError }) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const { regenerateData, isLoadingConfirmation } = useRegenerate(\n    backUrl,\n    idToRegenerate,\n    onRegenerate,\n    onError\n  );\n  const handleConfirmRegeneration = async () => {\n    regenerateData();\n    setShowConfirmDialog(false);\n  };\n\n  return (\n    <>\n      <Button\n        startIcon={<Refresh />}\n        type=\"button\"\n        size=\"S\"\n        variant=\"tertiary\"\n        onClick={() => setShowConfirmDialog(true)}\n        name=\"regenerate\"\n      >\n        {formatMessage({\n          id: 'Settings.tokens.regenerate',\n          defaultMessage: 'Regenerate',\n        })}\n      </Button>\n\n      <ConfirmDialog\n        bodyText={{\n          id: 'Settings.tokens.popUpWarning.message',\n          defaultMessage: 'Are you sure you want to regenerate this token?',\n        }}\n        iconRightButton={<Refresh />}\n        isConfirmButtonLoading={isLoadingConfirmation}\n        isOpen={showConfirmDialog}\n        onToggleDialog={() => setShowConfirmDialog(false)}\n        onConfirm={handleConfirmRegeneration}\n        leftButtonText={{\n          id: 'Settings.tokens.Button.cancel',\n          defaultMessage: 'Cancel',\n        }}\n        rightButtonText={{\n          id: 'Settings.tokens.Button.regenerate',\n          defaultMessage: 'Regenerate',\n        }}\n        title={{\n          id: 'Settings.tokens.RegenerateDialog.title',\n          defaultMessage: 'Regenerate token',\n        }}\n      />\n    </>\n  );\n};\n\nRegenerate.defaultProps = { onRegenerate() {}, onError: undefined };\n\nRegenerate.propTypes = {\n  onRegenerate: PropTypes.func,\n  idToRegenerate: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  backUrl: PropTypes.string.isRequired,\n  onError: PropTypes.func,\n};\n\nexport default Regenerate;\n","import React from 'react';\n\nimport { Button, Flex, HeaderLayout } from '@strapi/design-system';\nimport { Link } from '@strapi/helper-plugin';\nimport { ArrowLeft, Check } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport Regenerate from '../Regenerate';\n\nconst FormHead = ({\n  title,\n  token,\n  setToken,\n  canEditInputs,\n  canRegenerate,\n  isSubmitting,\n  backUrl,\n  regenerateUrl,\n  onErrorRegenerate,\n}) => {\n  const { formatMessage } = useIntl();\n  const handleRegenerate = (newKey) => {\n    setToken({\n      ...token,\n      accessKey: newKey,\n    });\n  };\n\n  return (\n    <HeaderLayout\n      title={token?.name || formatMessage(title)}\n      primaryAction={\n        canEditInputs ? (\n          <Flex gap={2}>\n            {canRegenerate && token?.id && (\n              <Regenerate\n                backUrl={regenerateUrl}\n                onRegenerate={handleRegenerate}\n                idToRegenerate={token?.id}\n                onError={onErrorRegenerate}\n              />\n            )}\n            <Button\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              startIcon={<Check />}\n              type=\"submit\"\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          </Flex>\n        ) : (\n          canRegenerate &&\n          token?.id && (\n            <Regenerate\n              onRegenerate={handleRegenerate}\n              idToRegenerate={token?.id}\n              backUrl={regenerateUrl}\n            />\n          )\n        )\n      }\n      navigationAction={\n        <Link startIcon={<ArrowLeft />} to={backUrl}>\n          {formatMessage({\n            id: 'global.back',\n            defaultMessage: 'Back',\n          })}\n        </Link>\n      }\n      ellipsis\n    />\n  );\n};\n\nFormHead.propTypes = {\n  token: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    type: PropTypes.string,\n    lifespan: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    name: PropTypes.string,\n    accessKey: PropTypes.string,\n    permissions: PropTypes.array,\n    description: PropTypes.string,\n    createdAt: PropTypes.string,\n  }),\n  canEditInputs: PropTypes.bool.isRequired,\n  canRegenerate: PropTypes.bool.isRequired,\n  setToken: PropTypes.func.isRequired,\n  isSubmitting: PropTypes.bool.isRequired,\n  backUrl: PropTypes.string.isRequired,\n  title: PropTypes.shape({\n    id: PropTypes.string,\n    label: PropTypes.string,\n  }).isRequired,\n  regenerateUrl: PropTypes.string.isRequired,\n  onErrorRegenerate: PropTypes.func,\n};\n\nFormHead.defaultProps = {\n  token: undefined,\n  onErrorRegenerate: undefined,\n};\n\nexport default FormHead;\n","import React from 'react';\n\nimport { IconButton } from '@strapi/design-system';\nimport { ContentBox, useClipboard, useNotification, useTracking } from '@strapi/helper-plugin';\nimport { Duplicate, Key } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst TokenBox = ({ token, tokenType }) => {\n  const { formatMessage } = useIntl();\n  const toggleNotification = useNotification();\n  const { trackUsage } = useTracking();\n\n  const { copy } = useClipboard();\n\n  const handleClick = (token) => async () => {\n    const didCopy = await copy(token);\n\n    if (didCopy) {\n      trackUsage('didCopyTokenKey', {\n        tokenType,\n      });\n      toggleNotification({\n        type: 'success',\n        message: { id: 'Settings.tokens.notification.copied' },\n      });\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        token && (\n          <span style={{ alignSelf: 'start' }}>\n            <IconButton\n              label={formatMessage({\n                id: 'app.component.CopyToClipboard.label',\n                defaultMessage: 'Copy to clipboard',\n              })}\n              onClick={handleClick(token)}\n              noBorder\n              icon={<Duplicate />}\n              style={{ padding: 0, height: '1rem' }}\n            />\n          </span>\n        )\n      }\n      title={\n        token ||\n        formatMessage({\n          id: 'Settings.tokens.copy.editTitle',\n          defaultMessage: 'This token isn’t accessible anymore.',\n        })\n      }\n      subtitle={\n        token\n          ? formatMessage({\n              id: 'Settings.tokens.copy.lastWarning',\n              defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!',\n            })\n          : formatMessage({\n              id: 'Settings.tokens.copy.editMessage',\n              defaultMessage: 'For security reasons, you can only see your token once.',\n            })\n      }\n      icon={<Key />}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n\nTokenBox.defaultProps = {\n  token: null,\n};\n\nTokenBox.propTypes = {\n  token: PropTypes.string,\n  tokenType: PropTypes.string.isRequired,\n};\n\nexport default TokenBox;\n","import { addDays, format } from 'date-fns';\nimport * as locales from 'date-fns/locale';\n\nconst getDateOfExpiration = (createdAt, duration, language = 'en') => {\n  if (duration && typeof duration === 'number') {\n    const durationInDays = duration / 24 / 60 / 60 / 1000;\n\n    return format(addDays(new Date(createdAt), durationInDays), 'PPP', {\n      locale: locales[language],\n    });\n  }\n\n  return 'Unlimited';\n};\n\nexport default getDateOfExpiration;\n","import { translatedErrors } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  name: yup.string(translatedErrors.string).max(100).required(translatedErrors.required),\n  type: yup\n    .string(translatedErrors.string)\n    .oneOf(['read-only', 'full-access', 'custom'])\n    .required(translatedErrors.required),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required),\n});\n\nexport default schema;\n","import React from 'react';\n\nimport { Option, Select, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getDateOfExpiration } from '../../../pages/ApiTokens/EditView/utils';\n\nconst LifeSpanInput = ({ token, errors, values, onChange, isCreating }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <Select\n        name=\"lifespan\"\n        label={formatMessage({\n          id: 'Settings.tokens.form.duration',\n          defaultMessage: 'Token duration',\n        })}\n        value={values.lifespan !== null ? values.lifespan : '0'}\n        error={\n          errors.lifespan\n            ? formatMessage(\n                errors.lifespan?.id\n                  ? errors.lifespan\n                  : { id: errors.lifespan, defaultMessage: errors.lifespan }\n              )\n            : null\n        }\n        onChange={(value) => {\n          onChange({ target: { name: 'lifespan', value } });\n        }}\n        required\n        disabled={!isCreating}\n        placeholder=\"Select\"\n      >\n        <Option value=\"604800000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.7-days',\n            defaultMessage: '7 days',\n          })}\n        </Option>\n        <Option value=\"2592000000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.30-days',\n            defaultMessage: '30 days',\n          })}\n        </Option>\n        <Option value=\"7776000000\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.90-days',\n            defaultMessage: '90 days',\n          })}\n        </Option>\n        <Option value=\"0\">\n          {formatMessage({\n            id: 'Settings.tokens.duration.unlimited',\n            defaultMessage: 'Unlimited',\n          })}\n        </Option>\n      </Select>\n      <Typography variant=\"pi\" textColor=\"neutral600\">\n        {!isCreating &&\n          `${formatMessage({\n            id: 'Settings.tokens.duration.expiration-date',\n            defaultMessage: 'Expiration date',\n          })}: ${getDateOfExpiration(token?.createdAt, parseInt(values.lifespan, 10))}`}\n      </Typography>\n    </>\n  );\n};\n\nLifeSpanInput.propTypes = {\n  errors: PropTypes.shape({\n    lifespan: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  values: PropTypes.shape({\n    lifespan: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  }).isRequired,\n  isCreating: PropTypes.bool.isRequired,\n  token: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    type: PropTypes.string,\n    lifespan: PropTypes.string,\n    name: PropTypes.string,\n    accessKey: PropTypes.string,\n    permissions: PropTypes.array,\n    description: PropTypes.string,\n    createdAt: PropTypes.string,\n  }),\n};\n\nLifeSpanInput.defaultProps = {\n  errors: {},\n  token: {},\n};\n\nexport default LifeSpanInput;\n","import React from 'react';\n\nimport { Textarea } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst TokenDescription = ({ errors, values, onChange, canEditInputs }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Textarea\n      label={formatMessage({\n        id: 'Settings.tokens.form.description',\n        defaultMessage: 'Description',\n      })}\n      id=\"description\"\n      error={\n        errors.description\n          ? formatMessage(\n              errors.description?.id\n                ? errors.description\n                : {\n                    id: errors.description,\n                    defaultMessage: errors.description,\n                  }\n            )\n          : null\n      }\n      onChange={onChange}\n      disabled={!canEditInputs}\n    >\n      {values.description}\n    </Textarea>\n  );\n};\n\nTokenDescription.propTypes = {\n  errors: PropTypes.shape({\n    description: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  canEditInputs: PropTypes.bool.isRequired,\n  values: PropTypes.shape({\n    description: PropTypes.string,\n  }).isRequired,\n};\n\nTokenDescription.defaultProps = {\n  errors: {},\n};\n\nexport default TokenDescription;\n","import React from 'react';\n\nimport { TextInput } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst TokenName = ({ errors, values, onChange, canEditInputs }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <TextInput\n      name=\"name\"\n      error={\n        errors.name\n          ? formatMessage(\n              errors.name?.id ? errors.name : { id: errors.name, defaultMessage: errors.name }\n            )\n          : null\n      }\n      label={formatMessage({\n        id: 'Settings.tokens.form.name',\n        defaultMessage: 'Name',\n      })}\n      onChange={onChange}\n      value={values.name}\n      disabled={!canEditInputs}\n      required\n    />\n  );\n};\n\nTokenName.propTypes = {\n  errors: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  canEditInputs: PropTypes.bool.isRequired,\n  values: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nTokenName.defaultProps = {\n  errors: {},\n};\n\nexport default TokenName;\n","import React from 'react';\n\nimport { Option, Select } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst TokenTypeSelect = ({ name, errors, values, onChange, canEditInputs, options, label }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Select\n      name={name}\n      label={formatMessage({\n        id: label.id,\n        defaultMessage: label.defaultMessage,\n      })}\n      value={values && values[name]}\n      error={\n        errors[name]\n          ? formatMessage(\n              errors[name]?.id ? errors[name] : { id: errors[name], defaultMessage: errors[name] }\n            )\n          : null\n      }\n      onChange={onChange}\n      placeholder=\"Select\"\n      required\n      disabled={!canEditInputs}\n    >\n      {options &&\n        options.map(({ value, label }) => (\n          <Option key={value} value={value}>\n            {formatMessage(label)}\n          </Option>\n        ))}\n    </Select>\n  );\n};\n\nTokenTypeSelect.propTypes = {\n  name: PropTypes.string,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.shape({\n        id: PropTypes.string,\n        defaultMessage: PropTypes.string,\n      }),\n      value: PropTypes.string,\n    })\n  ),\n  errors: PropTypes.shape({\n    type: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  canEditInputs: PropTypes.bool.isRequired,\n  values: PropTypes.shape({\n    type: PropTypes.string,\n  }).isRequired,\n  label: PropTypes.shape({\n    id: PropTypes.string,\n    defaultMessage: PropTypes.string,\n  }).isRequired,\n};\n\nTokenTypeSelect.defaultProps = {\n  name: 'type',\n  errors: {},\n  options: [],\n};\n\nexport default TokenTypeSelect;\n"],"names":["token","label"],"mappings":"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"}