import * as React from "react";
import { useFetchClient } from "@strapi/helper-plugin";
import { useQuery } from "react-query";
function useReviewWorkflows(params = {}) {
  const { get } = useFetchClient();
  const { id = "", ...queryParams } = params;
  const defaultQueryParams = {
    populate: "stages"
  };
  const { data, isLoading, status, refetch } = useQuery(
    ["review-workflows", "workflows", id],
    async () => {
      const res = await get(`/admin/review-workflows/workflows/${id}`, {
        params: { ...defaultQueryParams, ...queryParams }
      });
      return res.data;
    }
  );
  const workflows = React.useMemo(() => {
    if (id && data?.data) {
      return [data.data];
    }
    if (Array.isArray(data?.data)) {
      return data.data;
    }
    return [];
  }, [data?.data, id]);
  return {
    // meta contains e.g. the total of all workflows. we can not use
    // the pagination object here, because the list is not paginated.
    meta: React.useMemo(() => data?.meta ?? {}, [data?.meta]),
    workflows,
    isLoading,
    status,
    refetch
  };
}
export {
  useReviewWorkflows as u
};
//# sourceMappingURL=useReviewWorkflows-9e6b8986.mjs.map
