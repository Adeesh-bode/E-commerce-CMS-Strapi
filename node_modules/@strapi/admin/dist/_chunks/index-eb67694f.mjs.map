{"version":3,"file":"index-eb67694f.mjs","sources":["../../admin/src/pages/SettingsPage/components/Tokens/Table/DeleteButton/index.js","../../admin/src/pages/SettingsPage/components/Tokens/Table/DefaultButton/index.js","../../admin/src/pages/SettingsPage/components/Tokens/Table/ReadButton/index.js","../../admin/src/pages/SettingsPage/components/Tokens/Table/UpdateButton/index.js","../../admin/src/pages/SettingsPage/components/Tokens/Table/index.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Box, IconButton } from '@strapi/design-system';\nimport { ConfirmDialog, useTracking } from '@strapi/helper-plugin';\nimport { Trash } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const handleClickDelete = () => {\n    setShowConfirmDialog(false);\n    trackUsage('willDeleteToken', {\n      tokenType,\n    });\n    onClickDelete();\n  };\n\n  return (\n    <Box paddingLeft={1} onClick={(e) => e.stopPropagation()}>\n      <IconButton\n        onClick={() => {\n          setShowConfirmDialog(true);\n        }}\n        label={formatMessage(\n          {\n            id: 'global.delete-target',\n            defaultMessage: 'Delete {target}',\n          },\n          { target: `${tokenName}` }\n        )}\n        name=\"delete\"\n        noBorder\n        icon={<Trash />}\n      />\n      <ConfirmDialog\n        onToggleDialog={() => setShowConfirmDialog(false)}\n        onConfirm={handleClickDelete}\n        isOpen={showConfirmDialog}\n      />\n    </Box>\n  );\n};\n\nDeleteButton.propTypes = {\n  tokenName: PropTypes.string.isRequired,\n  onClickDelete: PropTypes.func.isRequired,\n  tokenType: PropTypes.string.isRequired,\n};\n\nexport default DeleteButton;\n","import React from 'react';\n\nimport { Link } from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst MESSAGES_MAP = {\n  edit: {\n    id: 'app.component.table.edit',\n    defaultMessage: 'Edit {target}',\n  },\n  read: {\n    id: 'app.component.table.read',\n    defaultMessage: 'Read {target}',\n  },\n};\n\nconst LinkStyled = styled(Link)`\n  svg {\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n\n  &:hover,\n  &:focus {\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.neutral800};\n      }\n    }\n  }\n`;\n\nconst DefaultButton = ({ tokenName, tokenId, buttonType, children }) => {\n  const { formatMessage } = useIntl();\n  const {\n    location: { pathname },\n  } = useHistory();\n\n  return (\n    <LinkStyled\n      to={`${pathname}/${tokenId}`}\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\n    >\n      {children}\n    </LinkStyled>\n  );\n};\n\nDefaultButton.propTypes = {\n  tokenName: PropTypes.string.isRequired,\n  tokenId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  buttonType: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nDefaultButton.defaultProps = {\n  buttonType: 'edit',\n};\n\nexport default DefaultButton;\n","import React from 'react';\n\nimport { Eye } from '@strapi/icons';\nimport PropTypes from 'prop-types';\n\nimport DefaultButton from '../DefaultButton';\n\nconst ReadButton = ({ tokenName, tokenId }) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId} buttonType=\"read\">\n      <Eye />\n    </DefaultButton>\n  );\n};\n\nReadButton.propTypes = {\n  tokenName: PropTypes.string.isRequired,\n  tokenId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default ReadButton;\n","import React from 'react';\n\nimport { Pencil } from '@strapi/icons';\nimport PropTypes from 'prop-types';\n\nimport DefaultButton from '../DefaultButton';\n\nconst UpdateButton = ({ tokenName, tokenId }) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\n      <Pencil />\n    </DefaultButton>\n  );\n};\n\nUpdateButton.propTypes = {\n  tokenName: PropTypes.string.isRequired,\n  tokenId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default UpdateButton;\n","import React from 'react';\n\nimport { Flex, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport {\n  DynamicTable,\n  onRowClick,\n  pxToRem,\n  RelativeTime,\n  useQueryParams,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nimport DeleteButton from './DeleteButton';\nimport ReadButton from './ReadButton';\nimport UpdateButton from './UpdateButton';\n\nconst Table = ({\n  permissions,\n  headers,\n  contentType,\n  isLoading,\n  tokens,\n  onConfirmDelete,\n  tokenType,\n}) => {\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  /**\n   * TODO: This needs refactoring to the new `Table` component.\n   */\n  return (\n    <DynamicTable\n      headers={headers}\n      contentType={contentType}\n      rows={tokens}\n      withBulkActions={canDelete || canUpdate || canRead}\n      isLoading={isLoading}\n      onConfirmDelete={onConfirmDelete}\n    >\n      <TableRows\n        tokenType={tokenType}\n        permissions={permissions}\n        onConfirmDelete={onConfirmDelete}\n      />\n    </DynamicTable>\n  );\n};\n\nTable.propTypes = {\n  tokens: PropTypes.array,\n  permissions: PropTypes.shape({\n    canRead: PropTypes.bool,\n    canDelete: PropTypes.bool,\n    canUpdate: PropTypes.bool,\n  }).isRequired,\n  headers: PropTypes.arrayOf(\n    PropTypes.shape({\n      cellFormatter: PropTypes.func,\n      key: PropTypes.string.isRequired,\n      metadatas: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        sortable: PropTypes.bool,\n      }).isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  contentType: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool,\n  onConfirmDelete: PropTypes.func,\n  tokenType: PropTypes.string.isRequired,\n};\n\nTable.defaultProps = {\n  tokens: [],\n  headers: [],\n  isLoading: false,\n  onConfirmDelete() {},\n};\n\nexport default Table;\n\nconst TableRows = ({ tokenType, permissions, rows, withBulkActions, onConfirmDelete }) => {\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  const [{ query }] = useQueryParams();\n  const { formatMessage } = useIntl();\n  const [, sortOrder] = query ? query.sort.split(':') : 'ASC';\n  const {\n    push,\n    location: { pathname },\n  } = useHistory();\n  const { trackUsage } = useTracking();\n\n  const sortedTokens = rows.sort((a, b) => {\n    const comparison = a.name.localeCompare(b.name);\n\n    return sortOrder === 'DESC' ? -comparison : comparison;\n  });\n\n  return (\n    <Tbody>\n      {sortedTokens.map((token) => {\n        return (\n          <Tr\n            key={token.id}\n            {...onRowClick({\n              fn() {\n                trackUsage('willEditTokenFromList', {\n                  tokenType,\n                });\n                push(`${pathname}/${token.id}`);\n              },\n              condition: canUpdate,\n            })}\n          >\n            <Td maxWidth={pxToRem(250)}>\n              <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\n                {token.name}\n              </Typography>\n            </Td>\n            <Td maxWidth={pxToRem(250)}>\n              <Typography textColor=\"neutral800\" ellipsis>\n                {token.description}\n              </Typography>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral800\">\n                <RelativeTime timestamp={new Date(token.createdAt)} />\n              </Typography>\n            </Td>\n            <Td>\n              {token.lastUsedAt && (\n                <Typography textColor=\"neutral800\">\n                  <RelativeTime\n                    timestamp={new Date(token.lastUsedAt)}\n                    customIntervals={[\n                      {\n                        unit: 'hours',\n                        threshold: 1,\n                        text: formatMessage({\n                          id: 'Settings.apiTokens.lastHour',\n                          defaultMessage: 'last hour',\n                        }),\n                      },\n                    ]}\n                  />\n                </Typography>\n              )}\n            </Td>\n\n            {withBulkActions && (\n              <Td>\n                <Flex justifyContent=\"end\">\n                  {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\n                  {!canUpdate && canRead && (\n                    <ReadButton tokenName={token.name} tokenId={token.id} />\n                  )}\n                  {canDelete && (\n                    <DeleteButton\n                      tokenName={token.name}\n                      onClickDelete={() => onConfirmDelete(token.id)}\n                      tokenType={tokenType}\n                    />\n                  )}\n                </Flex>\n              </Td>\n            )}\n          </Tr>\n        );\n      })}\n    </Tbody>\n  );\n};\n\nTableRows.defaultProps = {\n  rows: [],\n  withBulkActions: false,\n};\n\nTableRows.propTypes = {\n  rows: PropTypes.array,\n  permissions: PropTypes.shape({\n    canRead: PropTypes.bool,\n    canDelete: PropTypes.bool,\n    canUpdate: PropTypes.bool,\n  }).isRequired,\n  onConfirmDelete: PropTypes.func.isRequired,\n  tokenType: PropTypes.string.isRequired,\n  withBulkActions: PropTypes.bool,\n};\n"],"names":[],"mappings":";;;;;;;;;AAQA,MAAM,eAAe,CAAC,EAAE,WAAW,eAAe,gBAAgB;AAC1D,QAAA,EAAE,kBAAkB;AACpB,QAAA,EAAE,eAAe;AACvB,QAAM,CAAC,mBAAmB,oBAAoB,IAAI,SAAS,KAAK;AAChE,QAAM,oBAAoB,MAAM;AAC9B,yBAAqB,KAAK;AAC1B,eAAW,mBAAmB;AAAA,MAC5B;AAAA,IAAA,CACD;AACa;EAAA;AAId,SAAA,qBAAC,OAAI,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE,gBAAA,GACrC,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,SAAS,MAAM;AACb,+BAAqB,IAAI;AAAA,QAC3B;AAAA,QACA,OAAO;AAAA,UACL;AAAA,YACE,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAClB;AAAA,UACA,EAAE,QAAQ,GAAG,SAAS,GAAG;AAAA,QAC3B;AAAA,QACA,MAAK;AAAA,QACL,UAAQ;AAAA,QACR,0BAAO,OAAM,EAAA;AAAA,MAAA;AAAA,IACf;AAAA,IACA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,gBAAgB,MAAM,qBAAqB,KAAK;AAAA,QAChD,WAAW;AAAA,QACX,QAAQ;AAAA,MAAA;AAAA,IACV;AAAA,EACF,EAAA,CAAA;AAEJ;AAEA,aAAa,YAAY;AAAA,EACvB,WAAW,UAAU,OAAO;AAAA,EAC5B,eAAe,UAAU,KAAK;AAAA,EAC9B,WAAW,UAAU,OAAO;AAC9B;AC1CA,MAAM,eAAe;AAAA,EACnB,MAAM;AAAA,IACJ,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AAAA,EACA,MAAM;AAAA,IACJ,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAClB;AACF;AAEA,MAAM,aAAa,OAAO,IAAI;AAAA;AAAA;AAAA,cAGhB,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQpC,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAMtD,MAAM,gBAAgB,CAAC,EAAE,WAAW,SAAS,YAAY,eAAe;AAChE,QAAA,EAAE,kBAAkB;AACpB,QAAA;AAAA,IACJ,UAAU,EAAE,SAAS;AAAA,MACnB,WAAW;AAGb,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,IAAI,GAAG,QAAQ,IAAI,OAAO;AAAA,MAC1B,OAAO,cAAc,aAAa,UAAU,GAAG,EAAE,QAAQ,WAAW;AAAA,MAEnE;AAAA,IAAA;AAAA,EAAA;AAGP;AAEA,cAAc,YAAY;AAAA,EACxB,WAAW,UAAU,OAAO;AAAA,EAC5B,SAAS,UAAU,UAAU,CAAC,UAAU,QAAQ,UAAU,MAAM,CAAC,EAAE;AAAA,EACnE,YAAY,UAAU;AAAA,EACtB,UAAU,UAAU,KAAK;AAC3B;AAEA,cAAc,eAAe;AAAA,EAC3B,YAAY;AACd;ACtDA,MAAM,aAAa,CAAC,EAAE,WAAW,cAAc;AAE3C,SAAA,oBAAC,iBAAc,WAAsB,SAAkB,YAAW,QAChE,UAAA,oBAAC,MAAI,CAAA,EACP,CAAA;AAEJ;AAEA,WAAW,YAAY;AAAA,EACrB,WAAW,UAAU,OAAO;AAAA,EAC5B,SAAS,UAAU,UAAU,CAAC,UAAU,QAAQ,UAAU,MAAM,CAAC,EAAE;AACrE;ACXA,MAAM,eAAe,CAAC,EAAE,WAAW,cAAc;AAC/C,6BACG,eAAc,EAAA,WAAsB,SACnC,UAAA,oBAAC,UAAO,EACV,CAAA;AAEJ;AAEA,aAAa,YAAY;AAAA,EACvB,WAAW,UAAU,OAAO;AAAA,EAC5B,SAAS,UAAU,UAAU,CAAC,UAAU,QAAQ,UAAU,MAAM,CAAC,EAAE;AACrE;ACCA,MAAM,QAAQ,CAAC;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,EAAE,WAAW,WAAW,QAAA,IAAY;AAMxC,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,iBAAiB,aAAa,aAAa;AAAA,MAC3C;AAAA,MACA;AAAA,MAEA,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,QAAA;AAAA,MACF;AAAA,IAAA;AAAA,EAAA;AAGN;AAEA,MAAM,YAAY;AAAA,EAChB,QAAQ,UAAU;AAAA,EAClB,aAAa,UAAU,MAAM;AAAA,IAC3B,SAAS,UAAU;AAAA,IACnB,WAAW,UAAU;AAAA,IACrB,WAAW,UAAU;AAAA,EACtB,CAAA,EAAE;AAAA,EACH,SAAS,UAAU;AAAA,IACjB,UAAU,MAAM;AAAA,MACd,eAAe,UAAU;AAAA,MACzB,KAAK,UAAU,OAAO;AAAA,MACtB,WAAW,UAAU,MAAM;AAAA,QACzB,OAAO,UAAU,OAAO;AAAA,QACxB,UAAU,UAAU;AAAA,MACrB,CAAA,EAAE;AAAA,MACH,MAAM,UAAU,OAAO;AAAA,IAAA,CACxB;AAAA,EACH;AAAA,EACA,aAAa,UAAU,OAAO;AAAA,EAC9B,WAAW,UAAU;AAAA,EACrB,iBAAiB,UAAU;AAAA,EAC3B,WAAW,UAAU,OAAO;AAC9B;AAEA,MAAM,eAAe;AAAA,EACnB,QAAQ,CAAC;AAAA,EACT,SAAS,CAAC;AAAA,EACV,WAAW;AAAA,EACX,kBAAkB;AAAA,EAAC;AACrB;AAIA,MAAM,YAAY,CAAC,EAAE,WAAW,aAAa,MAAM,iBAAiB,sBAAsB;AACxF,QAAM,EAAE,WAAW,WAAW,QAAA,IAAY;AAE1C,QAAM,CAAC,EAAE,OAAO,IAAI,eAAe;AAC7B,QAAA,EAAE,kBAAkB;AACpB,QAAA,CAAG,EAAA,SAAS,IAAI,QAAQ,MAAM,KAAK,MAAM,GAAG,IAAI;AAChD,QAAA;AAAA,IACJ;AAAA,IACA,UAAU,EAAE,SAAS;AAAA,MACnB,WAAW;AACT,QAAA,EAAE,eAAe;AAEvB,QAAM,eAAe,KAAK,KAAK,CAAC,GAAG,MAAM;AACvC,UAAM,aAAa,EAAE,KAAK,cAAc,EAAE,IAAI;AAEvC,WAAA,cAAc,SAAS,CAAC,aAAa;AAAA,EAAA,CAC7C;AAED,SACG,oBAAA,OAAA,EACE,UAAa,aAAA,IAAI,CAAC,UAAU;AAEzB,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QAEE,GAAG,WAAW;AAAA,UACb,KAAK;AACH,uBAAW,yBAAyB;AAAA,cAClC;AAAA,YAAA,CACD;AACD,iBAAK,GAAG,QAAQ,IAAI,MAAM,EAAE,EAAE;AAAA,UAChC;AAAA,UACA,WAAW;AAAA,QAAA,CACZ;AAAA,QAED,UAAA;AAAA,UAAA,oBAAC,IAAG,EAAA,UAAU,QAAQ,GAAG,GACvB,UAAC,oBAAA,YAAA,EAAW,WAAU,cAAa,YAAW,QAAO,UAAQ,MAC1D,UAAA,MAAM,KACT,CAAA,GACF;AAAA,UACC,oBAAA,IAAA,EAAG,UAAU,QAAQ,GAAG,GACvB,UAAA,oBAAC,YAAW,EAAA,WAAU,cAAa,UAAQ,MACxC,UAAA,MAAM,YACT,CAAA,GACF;AAAA,UACC,oBAAA,IAAA,EACC,UAAC,oBAAA,YAAA,EAAW,WAAU,cACpB,UAAA,oBAAC,cAAa,EAAA,WAAW,IAAI,KAAK,MAAM,SAAS,EAAA,CAAG,EACtD,CAAA,GACF;AAAA,8BACC,IACE,EAAA,UAAA,MAAM,cACJ,oBAAA,YAAA,EAAW,WAAU,cACpB,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW,IAAI,KAAK,MAAM,UAAU;AAAA,cACpC,iBAAiB;AAAA,gBACf;AAAA,kBACE,MAAM;AAAA,kBACN,WAAW;AAAA,kBACX,MAAM,cAAc;AAAA,oBAClB,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBAAA,CACjB;AAAA,gBACH;AAAA,cACF;AAAA,YAAA;AAAA,aAEJ,EAEJ,CAAA;AAAA,UAEC,mBACE,oBAAA,IAAA,EACC,UAAC,qBAAA,MAAA,EAAK,gBAAe,OAClB,UAAA;AAAA,YAAA,iCAAc,cAAa,EAAA,WAAW,MAAM,MAAM,SAAS,MAAM,IAAI;AAAA,YACrE,CAAC,aAAa,WACZ,oBAAA,YAAA,EAAW,WAAW,MAAM,MAAM,SAAS,MAAM,GAAI,CAAA;AAAA,YAEvD,aACC;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,WAAW,MAAM;AAAA,gBACjB,eAAe,MAAM,gBAAgB,MAAM,EAAE;AAAA,gBAC7C;AAAA,cAAA;AAAA,YACF;AAAA,UAAA,EAAA,CAEJ,EACF,CAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MA7DG,MAAM;AAAA,IAAA;AAAA,EAiEhB,CAAA,EACH,CAAA;AAEJ;AAEA,UAAU,eAAe;AAAA,EACvB,MAAM,CAAC;AAAA,EACP,iBAAiB;AACnB;AAEA,UAAU,YAAY;AAAA,EACpB,MAAM,UAAU;AAAA,EAChB,aAAa,UAAU,MAAM;AAAA,IAC3B,SAAS,UAAU;AAAA,IACnB,WAAW,UAAU;AAAA,IACrB,WAAW,UAAU;AAAA,EACtB,CAAA,EAAE;AAAA,EACH,iBAAiB,UAAU,KAAK;AAAA,EAChC,WAAW,UAAU,OAAO;AAAA,EAC5B,iBAAiB,UAAU;AAC7B;"}