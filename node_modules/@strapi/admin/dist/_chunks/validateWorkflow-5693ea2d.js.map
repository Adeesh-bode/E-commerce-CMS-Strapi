{"version":3,"file":"validateWorkflow-5693ea2d.js","sources":["../../admin/src/hooks/useInjectReducer.ts","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/actions/index.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/components/AddStage/AddStage.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/reducer/index.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/selectors.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/components/Stages/Stage/Stage.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/components/Stages/Stages.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/components/WorkflowAttributes/WorkflowAttributes.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/utils/validateWorkflow.js"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { Reducer } from '@reduxjs/toolkit';\n\nimport { useTypedStore } from '../core/store/hooks';\n\n/**\n * Inject a new reducer into the global redux-store.\n *\n * @export\n * @param {string} namespace - Store namespace of the injected reducer\n * @param {Function} reducer - Reducer function\n * @return void\n */\n\nexport function useInjectReducer(namespace: string, reducer: Reducer) {\n  const store = useTypedStore();\n\n  useEffect(() => {\n    store.injectReducer(namespace, reducer);\n  }, [store, namespace, reducer]);\n}\n","import {\n  ACTION_ADD_STAGE,\n  ACTION_CLONE_STAGE,\n  ACTION_DELETE_STAGE,\n  ACTION_RESET_WORKFLOW,\n  ACTION_SET_CONTENT_TYPES,\n  ACTION_SET_IS_LOADING,\n  ACTION_SET_ROLES,\n  ACTION_SET_WORKFLOW,\n  ACTION_SET_WORKFLOWS,\n  ACTION_UPDATE_STAGE,\n  ACTION_UPDATE_STAGES,\n  ACTION_UPDATE_STAGE_POSITION,\n  ACTION_UPDATE_WORKFLOW,\n} from '../constants';\n\nexport function cloneStage(id) {\n  return {\n    type: ACTION_CLONE_STAGE,\n    payload: { id },\n  };\n}\n\nexport function setWorkflow({ workflow }) {\n  return {\n    type: ACTION_SET_WORKFLOW,\n    payload: workflow,\n  };\n}\n\nexport function setWorkflows({ workflows }) {\n  return {\n    type: ACTION_SET_WORKFLOWS,\n    payload: workflows,\n  };\n}\n\nexport function deleteStage(stageId) {\n  return {\n    type: ACTION_DELETE_STAGE,\n    payload: {\n      stageId,\n    },\n  };\n}\n\nexport function addStage(stage = {}) {\n  return {\n    type: ACTION_ADD_STAGE,\n    payload: stage,\n  };\n}\n\nexport function updateStage(stageId, payload) {\n  return {\n    type: ACTION_UPDATE_STAGE,\n    payload: {\n      stageId,\n      ...payload,\n    },\n  };\n}\n\nexport function updateStages(payload) {\n  return {\n    type: ACTION_UPDATE_STAGES,\n    payload,\n  };\n}\n\nexport function updateStagePosition(oldIndex, newIndex) {\n  return {\n    type: ACTION_UPDATE_STAGE_POSITION,\n    payload: {\n      newIndex,\n      oldIndex,\n    },\n  };\n}\n\nexport function updateWorkflow(payload) {\n  return {\n    type: ACTION_UPDATE_WORKFLOW,\n    payload,\n  };\n}\n\nexport function resetWorkflow() {\n  return {\n    type: ACTION_RESET_WORKFLOW,\n  };\n}\n\nexport function setContentTypes(payload) {\n  return {\n    type: ACTION_SET_CONTENT_TYPES,\n    payload,\n  };\n}\n\nexport function setRoles(payload) {\n  return {\n    type: ACTION_SET_ROLES,\n    payload,\n  };\n}\n\nexport function setIsLoading(isLoading) {\n  return {\n    type: ACTION_SET_IS_LOADING,\n    payload: isLoading,\n  };\n}\n","import React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledAddIcon = styled(PlusCircle)`\n  > circle {\n    fill: ${({ theme }) => theme.colors.neutral150};\n  }\n  > path {\n    fill: ${({ theme }) => theme.colors.neutral600};\n  }\n`;\n\nconst StyledButton = styled(Box)`\n  border-radius: 26px;\n\n  svg {\n    height: ${({ theme }) => theme.spaces[6]};\n    width: ${({ theme }) => theme.spaces[6]};\n\n    > path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primary600} !important;\n    ${Typography} {\n      color: ${({ theme }) => theme.colors.primary600} !important;\n    }\n\n    ${StyledAddIcon} {\n      > circle {\n        fill: ${({ theme }) => theme.colors.primary600};\n      }\n      > path {\n        fill: ${({ theme }) => theme.colors.neutral100};\n      }\n    }\n  }\n\n  &:active {\n    ${Typography} {\n      color: ${({ theme }) => theme.colors.primary600};\n    }\n\n    ${StyledAddIcon} {\n      > circle {\n        fill: ${({ theme }) => theme.colors.primary600};\n      }\n      > path {\n        fill: ${({ theme }) => theme.colors.neutral100};\n      }\n    }\n  }\n`;\n\nexport function AddStage({ children, ...props }) {\n  return (\n    <StyledButton\n      as=\"button\"\n      background=\"neutral0\"\n      border=\"neutral150\"\n      paddingBottom={3}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={3}\n      shadow=\"filterShadow\"\n      {...props}\n    >\n      <Flex gap={2}>\n        <StyledAddIcon aria-hidden />\n\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral500\">\n          {children}\n        </Typography>\n      </Flex>\n    </StyledButton>\n  );\n}\n\nAddStage.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { produce } from 'immer';\n\nimport {\n  ACTION_ADD_STAGE,\n  ACTION_CLONE_STAGE,\n  ACTION_DELETE_STAGE,\n  ACTION_RESET_WORKFLOW,\n  ACTION_SET_CONTENT_TYPES,\n  ACTION_SET_IS_LOADING,\n  ACTION_SET_ROLES,\n  ACTION_SET_WORKFLOW,\n  ACTION_SET_WORKFLOWS,\n  ACTION_UPDATE_STAGE,\n  ACTION_UPDATE_STAGES,\n  ACTION_UPDATE_STAGE_POSITION,\n  ACTION_UPDATE_WORKFLOW,\n  STAGE_COLOR_DEFAULT,\n} from '../constants';\n\nexport const initialState = {\n  serverState: {\n    contentTypes: {\n      collectionTypes: [],\n      singleTypes: [],\n    },\n    roles: [],\n    workflow: null,\n    workflows: [],\n  },\n  clientState: {\n    currentWorkflow: {\n      data: {\n        name: '',\n        contentTypes: [],\n        stages: [],\n        permissions: undefined,\n      },\n    },\n    isLoading: true,\n  },\n};\n\nexport function reducer(state = initialState, action) {\n  return produce(state, (draft) => {\n    const { payload } = action;\n\n    switch (action.type) {\n      case ACTION_SET_CONTENT_TYPES: {\n        draft.serverState.contentTypes = payload;\n        break;\n      }\n\n      case ACTION_SET_IS_LOADING: {\n        draft.clientState.isLoading = payload;\n        break;\n      }\n\n      case ACTION_SET_ROLES: {\n        draft.serverState.roles = payload;\n        break;\n      }\n\n      case ACTION_SET_WORKFLOW: {\n        const workflow = payload;\n\n        if (workflow) {\n          draft.serverState.workflow = workflow;\n          draft.clientState.currentWorkflow.data = {\n            ...workflow,\n            stages: workflow.stages.map((stage) => ({\n              ...stage,\n              // A safety net in case a stage does not have a color assigned;\n              // this should not happen\n              color: stage?.color ?? STAGE_COLOR_DEFAULT,\n            })),\n          };\n        }\n        break;\n      }\n\n      case ACTION_SET_WORKFLOWS: {\n        draft.serverState.workflows = payload;\n        break;\n      }\n\n      case ACTION_RESET_WORKFLOW: {\n        draft.clientState = initialState.clientState;\n        draft.serverState = initialState.serverState;\n        break;\n      }\n\n      case ACTION_DELETE_STAGE: {\n        const { stageId } = payload;\n        const { currentWorkflow } = state.clientState;\n\n        draft.clientState.currentWorkflow.data.stages = currentWorkflow.data.stages.filter(\n          (stage) => (stage?.id ?? stage.__temp_key__) !== stageId\n        );\n\n        break;\n      }\n\n      case ACTION_ADD_STAGE: {\n        const { currentWorkflow } = state.clientState;\n\n        if (!currentWorkflow.data) {\n          draft.clientState.currentWorkflow.data = {\n            stages: [],\n          };\n        }\n\n        const newTempKey = getMaxTempKey(draft.clientState.currentWorkflow.data.stages);\n\n        draft.clientState.currentWorkflow.data.stages.push({\n          ...payload,\n          color: payload?.color ?? STAGE_COLOR_DEFAULT,\n          __temp_key__: newTempKey,\n        });\n\n        break;\n      }\n\n      case ACTION_CLONE_STAGE: {\n        const { currentWorkflow } = state.clientState;\n        const { id } = payload;\n\n        const sourceStageIndex = currentWorkflow.data.stages.findIndex(\n          (stage) => (stage?.id ?? stage?.__temp_key__) === id\n        );\n        const sourceStage = currentWorkflow.data.stages[sourceStageIndex];\n\n        draft.clientState.currentWorkflow.data.stages.splice(sourceStageIndex + 1, 0, {\n          ...sourceStage,\n          id: undefined,\n          __temp_key__: getMaxTempKey(draft.clientState.currentWorkflow.data.stages),\n        });\n\n        break;\n      }\n\n      case ACTION_UPDATE_STAGE: {\n        const { currentWorkflow } = state.clientState;\n        const { stageId, ...modified } = payload;\n\n        draft.clientState.currentWorkflow.data.stages = currentWorkflow.data.stages.map((stage) =>\n          (stage.id ?? stage.__temp_key__) === stageId\n            ? {\n                ...stage,\n                ...modified,\n              }\n            : stage\n        );\n\n        break;\n      }\n\n      case ACTION_UPDATE_STAGES: {\n        const { currentWorkflow } = state.clientState;\n\n        draft.clientState.currentWorkflow.data.stages = currentWorkflow.data.stages.map(\n          (stage) => ({\n            ...stage,\n            ...payload,\n          })\n        );\n\n        break;\n      }\n\n      case ACTION_UPDATE_STAGE_POSITION: {\n        const {\n          currentWorkflow: {\n            data: { stages },\n          },\n        } = state.clientState;\n        const { newIndex, oldIndex } = payload;\n\n        if (newIndex >= 0 && newIndex < stages.length) {\n          const stage = stages[oldIndex];\n          let newStages = [...stages];\n\n          newStages.splice(oldIndex, 1);\n          newStages.splice(newIndex, 0, stage);\n\n          draft.clientState.currentWorkflow.data.stages = newStages;\n        }\n\n        break;\n      }\n\n      case ACTION_UPDATE_WORKFLOW: {\n        draft.clientState.currentWorkflow.data = {\n          ...draft.clientState.currentWorkflow.data,\n          ...payload,\n        };\n\n        break;\n      }\n\n      default:\n        break;\n    }\n  });\n}\n\n/**\n * @type {(stages: Array<{id?: number; __temp_key__: number}>) => number}\n */\nconst getMaxTempKey = (stages = []) => {\n  /**\n   * We check if there are ids or __temp_key__ because you may add a stage to a list of stages\n   * already in the DB, alternatively you might add multiple new stages at once.\n   */\n  const ids = stages.map((stage) => stage.id ?? stage.__temp_key__);\n\n  /**\n   * If there are no ids it will return 0 as the max value\n   * because the max value is -1.\n   */\n  return Math.max(...ids, -1) + 1;\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport isEqual from 'lodash/isEqual';\n\nimport { REDUX_NAMESPACE } from './constants';\nimport { initialState } from './reducer';\n\nexport const selectNamespace = (state) => state[REDUX_NAMESPACE] ?? initialState;\n\nexport const selectContentTypes = createSelector(\n  selectNamespace,\n  ({ serverState: { contentTypes } }) => contentTypes\n);\n\nexport const selectRoles = createSelector(selectNamespace, ({ serverState: { roles } }) => roles);\n\nexport const selectCurrentWorkflow = createSelector(\n  selectNamespace,\n  ({ clientState: { currentWorkflow } }) => currentWorkflow.data\n);\n\nexport const selectWorkflows = createSelector(\n  selectNamespace,\n  ({ serverState: { workflows } }) => workflows\n);\n\nexport const selectIsWorkflowDirty = createSelector(\n  selectNamespace,\n  ({ serverState, clientState: { currentWorkflow } }) =>\n    !isEqual(serverState.workflow, currentWorkflow.data)\n);\n\nexport const selectHasDeletedServerStages = createSelector(\n  selectNamespace,\n  ({ serverState, clientState: { currentWorkflow } }) =>\n    !(serverState.workflow?.stages ?? []).every(\n      (stage) => !!currentWorkflow.data.stages.find(({ id }) => id === stage.id)\n    )\n);\n\nexport const selectIsLoading = createSelector(\n  selectNamespace,\n  ({ clientState: { isLoading } }) => isLoading\n);\n\nexport const selectServerState = createSelector(selectNamespace, ({ serverState }) => serverState);\n","import * as React from 'react';\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionToggle,\n  Box,\n  Flex,\n  Grid,\n  GridItem,\n  IconButton,\n  MultiSelect,\n  MultiSelectGroup,\n  MultiSelectOption,\n  SingleSelect,\n  SingleSelectOption,\n  TextInput,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Menu, MenuItem } from '@strapi/design-system/v2';\nimport {\n  ConfirmDialog,\n  useNotification,\n  NotAllowedInput,\n  useTracking,\n} from '@strapi/helper-plugin';\nimport { Duplicate, Drag, More } from '@strapi/icons';\nimport { useField } from 'formik';\nimport PropTypes from 'prop-types';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { useDragAndDrop } from '../../../../../../../../../../admin/src/content-manager/hooks';\nimport { composeRefs } from '../../../../../../../../../../admin/src/content-manager/utils';\nimport {\n  cloneStage,\n  deleteStage,\n  updateStage,\n  updateStagePosition,\n  updateStages,\n} from '../../../actions';\nimport { DRAG_DROP_TYPES } from '../../../constants';\nimport { selectRoles } from '../../../selectors';\nimport { getAvailableStageColors, getStageColorByHex } from '../../../utils/colors';\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\n// Grow the size of the permission Select\nconst PermissionWrapper = styled(Flex)`\n  > * {\n    flex-grow: 1;\n  }\n`;\n\nconst DeleteMenuItem = styled(MenuItem)`\n  color: ${({ theme }) => theme.colors.danger600};\n`;\n\n// Removing the font-size from the child-span aligns the\n// more icon vertically\nconst ContextMenuTrigger = styled(Menu.Trigger)`\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  > span {\n    font-size: 0;\n  }\n`;\n\n// As soon as either `as` or `forwardedAs` is set, the component\n// resets some styles and e.g. the `hasBorder` prop no longer works,\n// which is why this bit of CSS has been added manually ¯\\_(ツ)_/¯\nconst DragIconButton = styled(IconButton)`\n  align-items: center;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  display: flex;\n  justify-content: center;\n\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  svg {\n    height: auto;\n    width: ${({ theme }) => theme.spaces[3]}};\n  }\n`;\n\nconst AVAILABLE_COLORS = getAvailableStageColors();\n\nfunction StageDropPreview() {\n  return (\n    <Box\n      background=\"primary100\"\n      borderStyle=\"dashed\"\n      borderColor=\"primary600\"\n      borderWidth=\"1px\"\n      display=\"block\"\n      hasRadius\n      padding={6}\n      shadow=\"tableShadow\"\n    />\n  );\n}\n\nexport function Stage({\n  id,\n  index,\n  canDelete,\n  canReorder,\n  canUpdate,\n  isOpen: isOpenDefault = false,\n  stagesCount,\n}) {\n  /**\n   *\n   * @param {number} index\n   * @returns {string}\n   */\n  const getItemPos = (index) => `${index + 1} of ${stagesCount}`;\n\n  /**\n   *\n   * @param {number} index\n   * @returns {void}\n   */\n  const handleGrabStage = (index) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.grab-item',\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: nameField.value,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  /**\n   *\n   * @param {number} index\n   * @returns {void}\n   */\n  const handleDropStage = (index) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.drop-item',\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: nameField.value,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  /**\n   *\n   * @param {number} index\n   * @returns {void}\n   */\n  const handleCancelDragStage = () => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.cancel-item',\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: nameField.value,\n        }\n      )\n    );\n  };\n\n  const handleMoveStage = (newIndex, oldIndex) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.reorder',\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: nameField.value,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    dispatch(updateStagePosition(oldIndex, newIndex));\n  };\n\n  const handleApplyPermissionsToAllStages = () => {\n    setIsApplyAllConfirmationOpen(true);\n  };\n\n  const [liveText, setLiveText] = React.useState(null);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const dispatch = useDispatch();\n  const toggleNotification = useNotification();\n  const [isOpen, setIsOpen] = React.useState(isOpenDefault);\n  const [isApplyAllConfirmationOpen, setIsApplyAllConfirmationOpen] = React.useState(false);\n  const [nameField, nameMeta, nameHelper] = useField(`stages.${index}.name`);\n  const [colorField, colorMeta, colorHelper] = useField(`stages.${index}.color`);\n  const [permissionsField, permissionsMeta, permissionsHelper] = useField(\n    `stages.${index}.permissions`\n  );\n  const roles = useSelector(selectRoles);\n  const [{ handlerId, isDragging, handleKeyDown }, stageRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(canReorder, {\n      index,\n      item: {\n        name: nameField.value,\n      },\n      onGrabItem: handleGrabStage,\n      onDropItem: handleDropStage,\n      onMoveItem: handleMoveStage,\n      onCancel: handleCancelDragStage,\n      type: DRAG_DROP_TYPES.STAGE,\n    });\n\n  const composedRef = composeRefs(stageRef, dropRef);\n\n  const colorOptions = AVAILABLE_COLORS.map(({ hex, name }) => ({\n    value: hex,\n    label: formatMessage(\n      {\n        id: 'Settings.review-workflows.stage.color.name',\n        defaultMessage: '{name}',\n      },\n      { name }\n    ),\n    color: hex,\n  }));\n\n  const { themeColorName } = getStageColorByHex(colorField.value) ?? {};\n\n  const filteredRoles = roles\n    // Super admins always have permissions to do everything and therefore\n    // there is no point for this role to show up in the role combobox\n    .filter((role) => role.code !== 'strapi-super-admin');\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  return (\n    <Box ref={composedRef}>\n      {liveText && <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>}\n\n      {isDragging ? (\n        <StageDropPreview />\n      ) : (\n        <Accordion\n          size=\"S\"\n          variant=\"primary\"\n          onToggle={() => {\n            setIsOpen(!isOpen);\n\n            if (!isOpen) {\n              trackUsage('willEditStage');\n            }\n          }}\n          expanded={isOpen}\n          shadow=\"tableShadow\"\n          error={nameMeta.error ?? colorMeta?.error ?? permissionsMeta?.error ?? false}\n          hasErrorMessage={false}\n        >\n          <AccordionToggle\n            title={nameField.value}\n            togglePosition=\"left\"\n            action={\n              (canDelete || canUpdate) && (\n                <Flex>\n                  <Menu.Root>\n                    <ContextMenuTrigger size=\"S\" endIcon={null} paddingLeft={2} paddingRight={2}>\n                      <More aria-hidden focusable={false} />\n                      <VisuallyHidden as=\"span\">\n                        {formatMessage({\n                          id: '[tbdb].components.DynamicZone.more-actions',\n                          defaultMessage: 'More actions',\n                        })}\n                      </VisuallyHidden>\n                    </ContextMenuTrigger>\n                    {/* z-index needs to be as big as the one defined for the wrapper in Stages, otherwise the menu\n                     * disappears behind the accordion\n                     */}\n                    <Menu.Content popoverPlacement=\"bottom-end\" zIndex={2}>\n                      <Menu.SubRoot>\n                        {canUpdate && (\n                          <MenuItem onClick={() => dispatch(cloneStage(id))}>\n                            {formatMessage({\n                              id: 'Settings.review-workflows.stage.delete',\n                              defaultMessage: 'Duplicate stage',\n                            })}\n                          </MenuItem>\n                        )}\n\n                        {canDelete && (\n                          <DeleteMenuItem onClick={() => dispatch(deleteStage(id))}>\n                            {formatMessage({\n                              id: 'Settings.review-workflows.stage.delete',\n                              defaultMessage: 'Delete',\n                            })}\n                          </DeleteMenuItem>\n                        )}\n                      </Menu.SubRoot>\n                    </Menu.Content>\n                  </Menu.Root>\n\n                  {canUpdate && (\n                    <DragIconButton\n                      background=\"transparent\"\n                      forwardedAs=\"div\"\n                      hasRadius\n                      role=\"button\"\n                      noBorder\n                      tabIndex={0}\n                      data-handler-id={handlerId}\n                      ref={dragRef}\n                      label={formatMessage({\n                        id: 'Settings.review-workflows.stage.drag',\n                        defaultMessage: 'Drag',\n                      })}\n                      onClick={(e) => e.stopPropagation()}\n                      onKeyDown={handleKeyDown}\n                    >\n                      <Drag />\n                    </DragIconButton>\n                  )}\n                </Flex>\n              )\n            }\n          />\n          <AccordionContent padding={6} background=\"neutral0\" hasRadius>\n            <Grid gap={4}>\n              <GridItem col={6}>\n                <TextInput\n                  {...nameField}\n                  id={nameField.name}\n                  disabled={!canUpdate}\n                  label={formatMessage({\n                    id: 'Settings.review-workflows.stage.name.label',\n                    defaultMessage: 'Stage name',\n                  })}\n                  error={nameMeta.error ?? false}\n                  onChange={(event) => {\n                    nameHelper.setValue(event.target.value);\n                    dispatch(updateStage(id, { name: event.target.value }));\n                  }}\n                  required\n                />\n              </GridItem>\n\n              <GridItem col={6}>\n                <SingleSelect\n                  disabled={!canUpdate}\n                  error={colorMeta?.error ?? false}\n                  id={colorField.name}\n                  required\n                  label={formatMessage({\n                    id: 'content-manager.reviewWorkflows.stage.color',\n                    defaultMessage: 'Color',\n                  })}\n                  onChange={(value) => {\n                    colorHelper.setValue(value);\n                    dispatch(updateStage(id, { color: value }));\n                  }}\n                  value={colorField.value.toUpperCase()}\n                  startIcon={\n                    <Flex\n                      as=\"span\"\n                      height={2}\n                      background={colorField.value}\n                      borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n                      hasRadius\n                      shrink={0}\n                      width={2}\n                    />\n                  }\n                >\n                  {colorOptions.map(({ value, label, color }) => {\n                    const { themeColorName } = getStageColorByHex(color);\n\n                    return (\n                      <SingleSelectOption\n                        value={value}\n                        key={value}\n                        startIcon={\n                          <Flex\n                            as=\"span\"\n                            height={2}\n                            background={color}\n                            borderColor={\n                              themeColorName === 'neutral0' ? 'neutral150' : 'transparent'\n                            }\n                            hasRadius\n                            shrink={0}\n                            width={2}\n                          />\n                        }\n                      >\n                        {label}\n                      </SingleSelectOption>\n                    );\n                  })}\n                </SingleSelect>\n              </GridItem>\n\n              <GridItem col={6}>\n                {filteredRoles.length === 0 ? (\n                  <NotAllowedInput\n                    description={{\n                      id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\n                      defaultMessage: 'You don’t have the permission to see roles',\n                    }}\n                    intlLabel={{\n                      id: 'Settings.review-workflows.stage.permissions.label',\n                      defaultMessage: 'Roles that can change this stage',\n                    }}\n                    name={permissionsField.name}\n                  />\n                ) : (\n                  <Flex alignItems=\"flex-end\" gap={3}>\n                    <PermissionWrapper grow={1}>\n                      <MultiSelect\n                        {...permissionsField}\n                        disabled={!canUpdate}\n                        error={permissionsMeta.error ?? false}\n                        id={permissionsField.name}\n                        label={formatMessage({\n                          id: 'Settings.review-workflows.stage.permissions.label',\n                          defaultMessage: 'Roles that can change this stage',\n                        })}\n                        onChange={(values) => {\n                          // Because the select components expects strings for values, but\n                          // the yup schema validates we are sending full permission objects to the API,\n                          // we must coerce the string value back to an object\n                          const permissions = values.map((value) => ({\n                            role: parseInt(value, 10),\n                            action: 'admin::review-workflows.stage.transition',\n                          }));\n\n                          permissionsHelper.setValue(permissions);\n                          dispatch(updateStage(id, { permissions }));\n                        }}\n                        placeholder={formatMessage({\n                          id: 'Settings.review-workflows.stage.permissions.placeholder',\n                          defaultMessage: 'Select a role',\n                        })}\n                        required\n                        // The Select component expects strings for values\n                        value={(permissionsField.value ?? []).map(\n                          (permission) => `${permission.role}`\n                        )}\n                        withTags\n                      >\n                        {[\n                          {\n                            label: formatMessage({\n                              id: 'Settings.review-workflows.stage.permissions.allRoles.label',\n                              defaultMessage: 'All roles',\n                            }),\n\n                            children: filteredRoles.map((role) => ({\n                              value: `${role.id}`,\n                              label: role.name,\n                            })),\n                          },\n                        ].map((role) => {\n                          if ('children' in role) {\n                            return (\n                              <MultiSelectGroup\n                                key={role.label}\n                                label={role.label}\n                                values={role.children.map((child) => child.value)}\n                              >\n                                {role.children.map((role) => {\n                                  return (\n                                    <NestedOption key={role.value} value={role.value}>\n                                      {role.label}\n                                    </NestedOption>\n                                  );\n                                })}\n                              </MultiSelectGroup>\n                            );\n                          }\n\n                          return (\n                            <MultiSelectOption key={role.value} value={role.value}>\n                              {role.label}\n                            </MultiSelectOption>\n                          );\n                        })}\n                      </MultiSelect>\n                    </PermissionWrapper>\n\n                    <IconButton\n                      disabled={!canUpdate}\n                      icon={<Duplicate />}\n                      label={formatMessage({\n                        id: 'Settings.review-workflows.stage.permissions.apply.label',\n                        defaultMessage: 'Apply to all stages',\n                      })}\n                      size=\"L\"\n                      variant=\"secondary\"\n                      onClick={() => handleApplyPermissionsToAllStages(permissionsField.value)}\n                    />\n                  </Flex>\n                )}\n              </GridItem>\n            </Grid>\n          </AccordionContent>\n        </Accordion>\n      )}\n\n      <ConfirmDialog.Root\n        iconRightButton={null}\n        isOpen={isApplyAllConfirmationOpen}\n        onToggleDialog={() => setIsApplyAllConfirmationOpen(false)}\n        onConfirm={() => {\n          dispatch(updateStages({ permissions: permissionsField.value }));\n          setIsApplyAllConfirmationOpen(false);\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy.success',\n              defaultMessage: 'Applied roles to all other stages of the workflow',\n            }),\n          });\n        }}\n        variantRightButton=\"primary\"\n      >\n        <ConfirmDialog.Body>\n          <Typography textAlign=\"center\" variant=\"omega\">\n            {formatMessage({\n              id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy',\n              defaultMessage:\n                'Roles that can change that stage will be applied to all the other stages.',\n            })}\n          </Typography>\n        </ConfirmDialog.Body>\n      </ConfirmDialog.Root>\n    </Box>\n  );\n}\n\nStage.propTypes = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  color: PropTypes.string.isRequired,\n  canDelete: PropTypes.bool.isRequired,\n  canReorder: PropTypes.bool.isRequired,\n  canUpdate: PropTypes.bool.isRequired,\n  stagesCount: PropTypes.number.isRequired,\n}).isRequired;\n","import React from 'react';\n\nimport { Box, Flex } from '@strapi/design-system';\nimport { useTracking } from '@strapi/helper-plugin';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { addStage } from '../../actions';\nimport { AddStage } from '../AddStage';\n\nimport { Stage } from './Stage';\n\nconst Background = styled(Box)`\n  transform: translateX(-50%);\n`;\n\nexport function Stages({ canDelete, canUpdate, stages }) {\n  const { formatMessage } = useIntl();\n  const dispatch = useDispatch();\n  const { trackUsage } = useTracking();\n\n  return (\n    <Flex direction=\"column\" gap={6} width=\"100%\">\n      <Box position=\"relative\" spacing={4} width=\"100%\">\n        <Background\n          background=\"neutral200\"\n          height=\"100%\"\n          left=\"50%\"\n          position=\"absolute\"\n          top=\"0\"\n          width={2}\n          zIndex={1}\n        />\n\n        <Flex\n          direction=\"column\"\n          alignItems=\"stretch\"\n          gap={6}\n          zIndex={2}\n          position=\"relative\"\n          as=\"ol\"\n        >\n          {stages.map((stage, index) => {\n            const id = stage?.id ?? stage.__temp_key__;\n\n            return (\n              <Box key={`stage-${id}`} as=\"li\">\n                <Stage\n                  id={id}\n                  index={index}\n                  isOpen={!stage.id}\n                  canDelete={stages.length > 1 && canDelete}\n                  canReorder={stages.length > 1}\n                  canUpdate={canUpdate}\n                  stagesCount={stages.length}\n                />\n              </Box>\n            );\n          })}\n        </Flex>\n      </Box>\n\n      {canUpdate && (\n        <AddStage\n          type=\"button\"\n          onClick={() => {\n            dispatch(addStage({ name: '' }));\n            trackUsage('willCreateStage');\n          }}\n        >\n          {formatMessage({\n            id: 'Settings.review-workflows.stage.add',\n            defaultMessage: 'Add new stage',\n          })}\n        </AddStage>\n      )}\n    </Flex>\n  );\n}\n\nStages.defaultProps = {\n  canDelete: true,\n  canUpdate: true,\n  stages: [],\n};\n\nStages.propTypes = {\n  canDelete: PropTypes.bool,\n  canUpdate: PropTypes.bool,\n  stages: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      __temp_key__: PropTypes.number,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import * as React from 'react';\n\nimport {\n  Grid,\n  GridItem,\n  MultiSelect,\n  MultiSelectGroup,\n  MultiSelectOption,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { useCollator } from '@strapi/helper-plugin';\nimport { useField } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { updateWorkflow } from '../../actions';\nimport { selectContentTypes, selectCurrentWorkflow, selectWorkflows } from '../../selectors';\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\nconst ContentTypeTakeNotice = styled(Typography)`\n  font-style: italic;\n`;\n\nexport function WorkflowAttributes({ canUpdate }) {\n  const { formatMessage, locale } = useIntl();\n  const dispatch = useDispatch();\n  const { collectionTypes, singleTypes } = useSelector(selectContentTypes);\n  const currentWorkflow = useSelector(selectCurrentWorkflow);\n  const workflows = useSelector(selectWorkflows);\n  const [nameField, nameMeta, nameHelper] = useField('name');\n  const [contentTypesField, contentTypesMeta, contentTypesHelper] = useField('contentTypes');\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  return (\n    <Grid background=\"neutral0\" hasRadius gap={4} padding={6} shadow=\"tableShadow\">\n      <GridItem col={6}>\n        <TextInput\n          {...nameField}\n          id={nameField.name}\n          disabled={!canUpdate}\n          label={formatMessage({\n            id: 'Settings.review-workflows.workflow.name.label',\n            defaultMessage: 'Workflow Name',\n          })}\n          error={nameMeta.error ?? false}\n          onChange={(event) => {\n            dispatch(updateWorkflow({ name: event.target.value }));\n            nameHelper.setValue(event.target.value);\n          }}\n          required\n        />\n      </GridItem>\n\n      <GridItem col={6}>\n        <MultiSelect\n          {...contentTypesField}\n          customizeContent={(value) =>\n            formatMessage(\n              {\n                id: 'Settings.review-workflows.workflow.contentTypes.displayValue',\n                defaultMessage:\n                  '{count} {count, plural, one {content type} other {content types}} selected',\n              },\n              { count: value.length }\n            )\n          }\n          disabled={!canUpdate}\n          error={contentTypesMeta.error ?? false}\n          id={contentTypesField.name}\n          label={formatMessage({\n            id: 'Settings.review-workflows.workflow.contentTypes.label',\n            defaultMessage: 'Associated to',\n          })}\n          onChange={(values) => {\n            dispatch(updateWorkflow({ contentTypes: values }));\n            contentTypesHelper.setValue(values);\n          }}\n          placeholder={formatMessage({\n            id: 'Settings.review-workflows.workflow.contentTypes.placeholder',\n            defaultMessage: 'Select',\n          })}\n        >\n          {[\n            ...(collectionTypes.length > 0\n              ? [\n                  {\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.workflow.contentTypes.collectionTypes.label',\n                      defaultMessage: 'Collection Types',\n                    }),\n                    children: [...collectionTypes]\n                      .sort((a, b) => formatter.compare(a.info.displayName, b.info.displayName))\n                      .map((contentType) => ({\n                        label: contentType.info.displayName,\n                        value: contentType.uid,\n                      })),\n                  },\n                ]\n              : []),\n\n            ...(singleTypes.length > 0\n              ? [\n                  {\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.workflow.contentTypes.singleTypes.label',\n                      defaultMessage: 'Single Types',\n                    }),\n                    children: [...singleTypes].map((contentType) => ({\n                      label: contentType.info.displayName,\n                      value: contentType.uid,\n                    })),\n                  },\n                ]\n              : []),\n          ].map((opt) => {\n            if ('children' in opt) {\n              return (\n                <MultiSelectGroup\n                  key={opt.label}\n                  label={opt.label}\n                  values={opt.children.map((child) => child.value.toString())}\n                >\n                  {opt.children.map((child) => {\n                    const { name: assignedWorkflowName } =\n                      workflows.find(\n                        (workflow) =>\n                          ((currentWorkflow && workflow.id !== currentWorkflow.id) ||\n                            !currentWorkflow) &&\n                          workflow.contentTypes.includes(child.value)\n                      ) ?? {};\n\n                    return (\n                      <NestedOption key={child.value} value={child.value}>\n                        {formatMessage(\n                          {\n                            id: 'Settings.review-workflows.workflow.contentTypes.assigned.notice',\n                            defaultMessage:\n                              '{label} {name, select, undefined {} other {<i>(assigned to <em>{name}</em> workflow)</i>}}',\n                          },\n                          {\n                            label: child.label,\n                            name: assignedWorkflowName,\n                            em: (...children) => (\n                              <Typography as=\"em\" fontWeight=\"bold\">\n                                {children}\n                              </Typography>\n                            ),\n                            i: (...children) => (\n                              <ContentTypeTakeNotice>{children}</ContentTypeTakeNotice>\n                            ),\n                          }\n                        )}\n                      </NestedOption>\n                    );\n                  })}\n                </MultiSelectGroup>\n              );\n            }\n\n            return (\n              <MultiSelectOption key={opt.value} value={opt.value}>\n                {opt.label}\n              </MultiSelectOption>\n            );\n          })}\n        </MultiSelect>\n      </GridItem>\n    </Grid>\n  );\n}\n\nWorkflowAttributes.defaultProps = {\n  canUpdate: true,\n};\n\nWorkflowAttributes.propTypes = {\n  canUpdate: PropTypes.bool,\n};\n","import set from 'lodash/set';\nimport * as yup from 'yup';\n\nexport async function validateWorkflow({ values, formatMessage }) {\n  const schema = yup.object({\n    contentTypes: yup.array().of(yup.string()),\n    name: yup\n      .string()\n      .max(\n        255,\n        formatMessage({\n          id: 'Settings.review-workflows.validation.name.max-length',\n          defaultMessage: 'Name can not be longer than 255 characters',\n        })\n      )\n      .required(),\n\n    stages: yup\n      .array()\n      .of(\n        yup.object().shape({\n          name: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.review-workflows.validation.stage.name',\n                defaultMessage: 'Name is required',\n              })\n            )\n            .max(\n              255,\n              formatMessage({\n                id: 'Settings.review-workflows.validation.stage.max-length',\n                defaultMessage: 'Name can not be longer than 255 characters',\n              })\n            )\n            .test(\n              'unique-name',\n              formatMessage({\n                id: 'Settings.review-workflows.validation.stage.duplicate',\n                defaultMessage: 'Stage name must be unique',\n              }),\n              function (stageName) {\n                const {\n                  options: { context },\n                } = this;\n\n                return context.stages.filter((stage) => stage.name === stageName).length === 1;\n              }\n            ),\n          color: yup\n            .string()\n            .required(\n              formatMessage({\n                id: 'Settings.review-workflows.validation.stage.color',\n                defaultMessage: 'Color is required',\n              })\n            )\n            .matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i),\n\n          permissions: yup\n            .array(\n              yup.object({\n                role: yup\n                  .number()\n                  .strict()\n                  .typeError(\n                    formatMessage({\n                      id: 'Settings.review-workflows.validation.stage.permissions.role.number',\n                      defaultMessage: 'Role must be of type number',\n                    })\n                  ).required,\n                action: yup.string().required({\n                  id: 'Settings.review-workflows.validation.stage.permissions.action.required',\n                  defaultMessage: 'Action is a required argument',\n                }),\n              })\n            )\n            .strict(),\n        })\n      )\n      .min(1),\n  });\n\n  try {\n    await schema.validate(values, { abortEarly: false, context: values });\n\n    return true;\n  } catch (error) {\n    let errors = {};\n\n    if (error instanceof yup.ValidationError) {\n      error.inner.forEach((error) => {\n        set(errors, error.path, error.message);\n      });\n    }\n\n    return errors;\n  }\n}\n"],"names":["reducer","useTypedStore","useEffect","ACTION_CLONE_STAGE","ACTION_SET_WORKFLOW","ACTION_SET_WORKFLOWS","ACTION_DELETE_STAGE","ACTION_ADD_STAGE","ACTION_UPDATE_STAGE","ACTION_UPDATE_STAGES","ACTION_UPDATE_STAGE_POSITION","ACTION_UPDATE_WORKFLOW","ACTION_RESET_WORKFLOW","ACTION_SET_CONTENT_TYPES","ACTION_SET_ROLES","ACTION_SET_IS_LOADING","styled","PlusCircle","Box","Typography","jsx","jsxs","Flex","PropTypes","produce","STAGE_COLOR_DEFAULT","REDUX_NAMESPACE","createSelector","isEqual","NestedOption","MultiSelectOption","MenuItem","Menu","IconButton","getAvailableStageColors","index","React","useIntl","useTracking","useDispatch","useNotification","useField","useSelector","useDragAndDrop","DRAG_DROP_TYPES","composeRefs","getStageColorByHex","getEmptyImage","VisuallyHidden","Accordion","AccordionToggle","More","Drag","AccordionContent","Grid","GridItem","TextInput","SingleSelect","themeColorName","SingleSelectOption","NotAllowedInput","MultiSelect","MultiSelectGroup","role","Duplicate","ConfirmDialog","useCollator","schema","yup","error","set"],"mappings":"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"}