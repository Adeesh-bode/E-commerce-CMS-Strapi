"use strict";
const React = require("react");
const helperPlugin = require("@strapi/helper-plugin");
const reactQuery = require("react-query");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespace(React);
function useAdminUsers(params = {}, queryOptions = {}) {
  const { id = "", ...queryParams } = params;
  const { get } = helperPlugin.useFetchClient();
  const { data, isError, isLoading, refetch } = reactQuery.useQuery(
    ["users", id, queryParams],
    async () => {
      const {
        data: { data: data2 }
      } = await get(`/admin/users/${id}`, {
        params: queryParams
      });
      return data2;
    },
    queryOptions
  );
  const users = React__namespace.useMemo(() => {
    let users2 = [];
    if (data) {
      if ("results" in data) {
        if (Array.isArray(data.results)) {
          users2 = data.results;
        }
      } else {
        users2 = [data];
      }
    }
    return users2;
  }, [data]);
  return {
    users,
    pagination: React__namespace.useMemo(() => (data && "pagination" in data) ?? null, [data]),
    isLoading,
    isError,
    refetch
  };
}
exports.useAdminUsers = useAdminUsers;
//# sourceMappingURL=useAdminUsers-05d6b26a.js.map
