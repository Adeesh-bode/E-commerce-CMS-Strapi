{"version":3,"file":"index-1bac5263.js","sources":["../../admin/src/pages/SettingsPage/pages/Webhooks/ListView/index.js","../../admin/src/pages/SettingsPage/pages/Webhooks/ProtectedListView/index.js"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport React, { useEffect, useState } from 'react';\n\nimport {\n  ActionLayout,\n  BaseCheckbox,\n  Box,\n  Button,\n  ContentLayout,\n  EmptyStateLayout,\n  Flex,\n  HeaderLayout,\n  IconButton,\n  Layout,\n  Main,\n  Switch,\n  Table,\n  Tbody,\n  Td,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  useNotifyAT,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport {\n  ConfirmDialog,\n  LinkButton,\n  LoadingIndicatorPage,\n  onRowClick,\n  SettingsPageTitle,\n  stopPropagation,\n  useAPIErrorHandler,\n  useFetchClient,\n  useFocusWhenNavigate,\n  useNotification,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { EmptyDocuments, Pencil, Plus, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { selectAdminPermissions } from '../../../../../selectors';\n\nconst ListView = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [webhooksToDelete, setWebhooksToDelete] = useState([]);\n  const permissions = useSelector(selectAdminPermissions);\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  useFocusWhenNavigate();\n  const { push } = useHistory();\n  const { pathname } = useLocation();\n\n  const {\n    isLoading: isRBACLoading,\n    allowedActions: { canCreate, canUpdate, canDelete },\n  } = useRBAC(permissions.settings.webhooks);\n  const { get, post, put } = useFetchClient();\n  const { notifyStatus } = useNotifyAT();\n\n  const QUERY_KEY = 'webhooks';\n  const {\n    isLoading: isWebhooksLoading,\n    data: webhooks,\n    error: webhooksError,\n    refetch: refetchWebhooks,\n  } = useQuery(QUERY_KEY, async () => {\n    const {\n      data: { data },\n    } = await get('/admin/webhooks');\n\n    return data;\n  });\n\n  useEffect(() => {\n    if (webhooksError) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(webhooksError),\n      });\n\n      return;\n    }\n    if (webhooks) {\n      notifyStatus(\n        formatMessage({\n          id: 'Settings.webhooks.list.loading.success',\n          defaultMessage: 'Webhooks have been loaded',\n        })\n      );\n    }\n  }, [webhooks, webhooksError, toggleNotification, formatMessage, notifyStatus, formatAPIError]);\n\n  const deleteMutation = useMutation(\n    async () => {\n      await post('/admin/webhooks/batch-delete', {\n        ids: webhooksToDelete,\n      });\n    },\n    {\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n        setShowModal(false);\n      },\n      onSuccess() {\n        setWebhooksToDelete([]);\n        setShowModal(false);\n        refetchWebhooks();\n      },\n    }\n  );\n\n  const enabledMutation = useMutation(\n    async ({ isEnabled, id }) => {\n      const { id: _, ...webhook } = webhooks.find((webhook) => webhook.id === id) ?? {};\n      const body = {\n        ...webhook,\n        isEnabled,\n      };\n\n      await put(`/admin/webhooks/${id}`, body);\n    },\n    {\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n      },\n      onSuccess() {\n        refetchWebhooks();\n      },\n    }\n  );\n\n  const confirmDelete = () => deleteMutation.mutate();\n\n  const selectAllCheckbox = (selected) =>\n    selected ? setWebhooksToDelete(webhooks.map((webhook) => webhook.id)) : setWebhooksToDelete([]);\n\n  const selectOneCheckbox = (selected, id) =>\n    selected\n      ? setWebhooksToDelete((prev) => [...prev, id])\n      : setWebhooksToDelete((prev) => prev.filter((webhookId) => webhookId !== id));\n\n  const goTo = (to) => push(`${pathname}/${to}`);\n\n  const isLoading = isRBACLoading || isWebhooksLoading;\n  const numberOfWebhooks = webhooks?.length ?? 0;\n  const webhooksToDeleteLength = webhooksToDelete.length;\n\n  return (\n    <Layout>\n      <SettingsPageTitle name=\"Webhooks\" />\n      <Main aria-busy={isLoading}>\n        <HeaderLayout\n          title={formatMessage({ id: 'Settings.webhooks.title', defaultMessage: 'Webhooks' })}\n          subtitle={formatMessage({\n            id: 'Settings.webhooks.list.description',\n            defaultMessage: 'Get POST changes notifications',\n          })}\n          primaryAction={\n            canCreate &&\n            !isLoading && (\n              <LinkButton startIcon={<Plus />} variant=\"default\" to={`${pathname}/create`} size=\"S\">\n                {formatMessage({\n                  id: 'Settings.webhooks.list.button.add',\n                  defaultMessage: 'Create new webhook',\n                })}\n              </LinkButton>\n            )\n          }\n        />\n        {webhooksToDeleteLength > 0 && canDelete && (\n          <ActionLayout\n            startActions={\n              <>\n                <Typography variant=\"epsilon\" textColor=\"neutral600\">\n                  {formatMessage(\n                    {\n                      id: 'Settings.webhooks.to.delete',\n                      defaultMessage:\n                        '{webhooksToDeleteLength, plural, one {# webhook} other {# webhooks}} selected',\n                    },\n                    { webhooksToDeleteLength }\n                  )}\n                </Typography>\n                <Button\n                  onClick={() => setShowModal(true)}\n                  startIcon={<Trash />}\n                  size=\"L\"\n                  variant=\"danger-light\"\n                >\n                  {formatMessage({\n                    id: 'global.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Button>\n              </>\n            }\n          />\n        )}\n        <ContentLayout>\n          {isLoading ? (\n            <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n              <LoadingIndicatorPage />\n            </Box>\n          ) : numberOfWebhooks > 0 ? (\n            <Table\n              colCount={5}\n              rowCount={numberOfWebhooks + 1}\n              footer={\n                <TFooter onClick={() => (canCreate ? goTo('create') : {})} icon={<Plus />}>\n                  {formatMessage({\n                    id: 'Settings.webhooks.list.button.add',\n                    defaultMessage: 'Create new webhook',\n                  })}\n                </TFooter>\n              }\n            >\n              <Thead>\n                <Tr>\n                  <Th>\n                    <BaseCheckbox\n                      aria-label={formatMessage({\n                        id: 'global.select-all-entries',\n                        defaultMessage: 'Select all entries',\n                      })}\n                      indeterminate={\n                        webhooksToDeleteLength > 0 && webhooksToDeleteLength < numberOfWebhooks\n                      }\n                      value={webhooksToDeleteLength === numberOfWebhooks}\n                      onValueChange={selectAllCheckbox}\n                    />\n                  </Th>\n                  <Th width=\"20%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'global.name',\n                        defaultMessage: 'Name',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th width=\"60%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'Settings.webhooks.form.url',\n                        defaultMessage: 'URL',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th width=\"20%\">\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {formatMessage({\n                        id: 'Settings.webhooks.list.th.status',\n                        defaultMessage: 'Status',\n                      })}\n                    </Typography>\n                  </Th>\n                  <Th>\n                    <VisuallyHidden>\n                      {formatMessage({\n                        id: 'Settings.webhooks.list.th.actions',\n                        defaultMessage: 'Actions',\n                      })}\n                    </VisuallyHidden>\n                  </Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {webhooks.map((webhook) => (\n                  <Tr\n                    key={webhook.id}\n                    {...onRowClick({\n                      fn: () => goTo(webhook.id),\n                      condition: canUpdate,\n                    })}\n                  >\n                    <Td {...stopPropagation}>\n                      <BaseCheckbox\n                        aria-label={`${formatMessage({\n                          id: 'global.select',\n                          defaultMessage: 'Select',\n                        })} ${webhook.name}`}\n                        value={webhooksToDelete?.includes(webhook.id)}\n                        onValueChange={(selected) => selectOneCheckbox(selected, webhook.id)}\n                        name=\"select\"\n                      />\n                    </Td>\n                    <Td>\n                      <Typography fontWeight=\"semiBold\" textColor=\"neutral800\">\n                        {webhook.name}\n                      </Typography>\n                    </Td>\n                    <Td>\n                      <Typography textColor=\"neutral800\">{webhook.url}</Typography>\n                    </Td>\n                    <Td>\n                      <Flex>\n                        <Switch\n                          onLabel={formatMessage({\n                            id: 'global.enabled',\n                            defaultMessage: 'Enabled',\n                          })}\n                          offLabel={formatMessage({\n                            id: 'global.disabled',\n                            defaultMessage: 'Disabled',\n                          })}\n                          label={`${webhook.name} ${formatMessage({\n                            id: 'Settings.webhooks.list.th.status',\n                            defaultMessage: 'Status',\n                          })}`}\n                          selected={webhook.isEnabled}\n                          onChange={(e) => {\n                            e.stopPropagation();\n                            enabledMutation.mutate({\n                              isEnabled: !webhook.isEnabled,\n                              id: webhook.id,\n                            });\n                          }}\n                          visibleLabels\n                        />\n                      </Flex>\n                    </Td>\n                    <Td>\n                      <Flex gap={1}>\n                        {canUpdate && (\n                          <IconButton\n                            label={formatMessage({\n                              id: 'Settings.webhooks.events.update',\n                              defaultMessage: 'Update',\n                            })}\n                            icon={<Pencil />}\n                            noBorder\n                          />\n                        )}\n                        {canDelete && (\n                          <IconButton\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setWebhooksToDelete([webhook.id]);\n                              setShowModal(true);\n                            }}\n                            label={formatMessage({\n                              id: 'Settings.webhooks.events.delete',\n                              defaultMessage: 'Delete webhook',\n                            })}\n                            icon={<Trash />}\n                            noBorder\n                          />\n                        )}\n                      </Flex>\n                    </Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          ) : (\n            <EmptyStateLayout\n              icon={<EmptyDocuments width=\"160px\" />}\n              content={formatMessage({\n                id: 'Settings.webhooks.list.empty.description',\n                defaultMessage: 'No webhooks found',\n              })}\n              action={\n                <Button\n                  variant=\"secondary\"\n                  startIcon={<Plus />}\n                  onClick={() => (canCreate ? goTo('create') : {})}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.list.button.add',\n                    defaultMessage: 'Create new webhook',\n                  })}\n                </Button>\n              }\n            />\n          )}\n        </ContentLayout>\n      </Main>\n      <ConfirmDialog\n        isOpen={showModal}\n        onToggleDialog={() => setShowModal((prev) => !prev)}\n        onConfirm={confirmDelete}\n        isConfirmButtonLoading={deleteMutation.isLoading}\n      />\n    </Layout>\n  );\n};\n\nexport default ListView;\n","import React from 'react';\n\nimport { CheckPagePermissions } from '@strapi/helper-plugin';\nimport { useSelector } from 'react-redux';\n\nimport { selectAdminPermissions } from '../../../../../selectors';\nimport ListView from '../ListView';\n\nconst ProtectedListView = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings.webhooks.main}>\n      <ListView />\n    </CheckPagePermissions>\n  );\n};\n\nexport default ProtectedListView;\n"],"names":["useState","useSelector","selectAdminPermissions","useIntl","useAPIErrorHandler","useNotification","useFocusWhenNavigate","useHistory","useLocation","useRBAC","useFetchClient","useNotifyAT","useQuery","useEffect","useMutation","webhook","Layout","jsx","SettingsPageTitle","jsxs","Main","HeaderLayout","LinkButton","Plus","ActionLayout","Fragment","Typography","Button","Trash","ContentLayout","Box","LoadingIndicatorPage","Table","TFooter","Thead","Tr","Th","BaseCheckbox","VisuallyHidden","Tbody","onRowClick","Td","stopPropagation","Flex","Switch","IconButton","Pencil","EmptyStateLayout","EmptyDocuments","ConfirmDialog","CheckPagePermissions"],"mappings":"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"}