{"version":3,"file":"index-2eb69b5d.mjs","sources":["../../ee/admin/src/content-manager/pages/EditView/InformationBox/components/AssigneeSelect/AssigneeSelect.js","../../ee/admin/src/pages/SettingsPage/pages/ReviewWorkflows/hooks/useReviewWorkflowsStages.js","../../ee/admin/src/content-manager/pages/EditView/InformationBox/components/StageSelect/StageSelect.js","../../ee/admin/src/content-manager/pages/EditView/InformationBox/InformationBoxEE.js"],"sourcesContent":["import * as React from 'react';\n\nimport { Combobox, ComboboxOption, Field, Flex } from '@strapi/design-system';\nimport {\n  useCMEditViewDataManager,\n  useAPIErrorHandler,\n  useFetchClient,\n  useNotification,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\nimport { useSelector } from 'react-redux';\n\nimport { getDisplayName } from '../../../../../../../../../admin/src/content-manager/utils';\nimport { useAdminUsers } from '../../../../../../../../../admin/src/hooks/useAdminUsers';\nimport { selectAdminPermissions } from '../../../../../../../../../admin/src/selectors';\nimport { ASSIGNEE_ATTRIBUTE_NAME } from '../../constants';\n\nexport function AssigneeSelect() {\n  const {\n    initialData,\n    layout: { uid },\n    isSingleType,\n    onChange,\n  } = useCMEditViewDataManager();\n  const permissions = useSelector(selectAdminPermissions);\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const { put } = useFetchClient();\n  const {\n    allowedActions: { canReadUsers },\n    isLoading: isLoadingPermissions,\n  } = useRBAC({\n    readUsers: permissions.settings.users.read,\n  });\n  const { users, isLoading, isError } = useAdminUsers(\n    {},\n    {\n      enabled: !isLoadingPermissions && canReadUsers,\n    }\n  );\n\n  const currentAssignee = initialData?.[ASSIGNEE_ATTRIBUTE_NAME] ?? null;\n\n  const handleChange = async ({ value: assigneeId }) => {\n    mutation.mutate({\n      entityId: initialData.id,\n      assigneeId: parseInt(assigneeId, 10),\n      uid,\n    });\n  };\n\n  const mutation = useMutation(\n    async ({ entityId, assigneeId, uid }) => {\n      const typeSlug = isSingleType ? 'single-types' : 'collection-types';\n\n      const {\n        data: { data: createdEntity },\n      } = await put(`/admin/content-manager/${typeSlug}/${uid}/${entityId}/assignee`, {\n        data: { id: assigneeId },\n      });\n\n      // initialData and modifiedData have to stay in sync, otherwise the entity would be flagged\n      // as modified, which is what the boolean flag is for\n      onChange(\n        {\n          target: { name: ASSIGNEE_ATTRIBUTE_NAME, value: createdEntity[ASSIGNEE_ATTRIBUTE_NAME] },\n        },\n        true\n      );\n\n      return createdEntity;\n    },\n    {\n      onSuccess() {\n        toggleNotification({\n          type: 'success',\n          message: {\n            id: 'content-manager.reviewWorkflows.assignee.notification.saved',\n            defaultMessage: 'Assignee updated',\n          },\n        });\n      },\n    }\n  );\n\n  return (\n    <Field name={ASSIGNEE_ATTRIBUTE_NAME} id={ASSIGNEE_ATTRIBUTE_NAME}>\n      <Flex direction=\"column\" gap={2} alignItems=\"stretch\">\n        <Combobox\n          clearLabel={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.clear',\n            defaultMessage: 'Clear assignee',\n          })}\n          error={\n            (isError &&\n              canReadUsers &&\n              formatMessage({\n                id: 'content-manager.reviewWorkflows.assignee.error',\n                defaultMessage: 'An error occurred while fetching users',\n              })) ||\n            (mutation.error && formatAPIError(mutation.error))\n          }\n          disabled={!isLoadingPermissions && !isLoading && users.length === 0}\n          name={ASSIGNEE_ATTRIBUTE_NAME}\n          id={ASSIGNEE_ATTRIBUTE_NAME}\n          value={currentAssignee ? currentAssignee.id : null}\n          onChange={(value) => handleChange({ value })}\n          onClear={() => handleChange({ value: null })}\n          placeholder={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.placeholder',\n            defaultMessage: 'Select â€¦',\n          })}\n          label={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.label',\n            defaultMessage: 'Assignee',\n          })}\n          loading={isLoading || isLoadingPermissions || mutation.isLoading}\n        >\n          {users.map((user) => {\n            return (\n              <ComboboxOption\n                key={user.id}\n                value={user.id}\n                textValue={getDisplayName(user, formatMessage)}\n              >\n                {getDisplayName(user, formatMessage)}\n              </ComboboxOption>\n            );\n          })}\n        </Combobox>\n      </Flex>\n    </Field>\n  );\n}\n","import * as React from 'react';\n\nimport { useFetchClient } from '@strapi/helper-plugin';\nimport { useQuery } from 'react-query';\n\nexport function useReviewWorkflowsStages({ id, layout } = {}, queryOptions = {}) {\n  const { kind, uid } = layout;\n  const slug = kind === 'collectionType' ? 'collection-types' : 'single-types';\n\n  const { get } = useFetchClient();\n\n  const { data, isLoading, refetch } = useQuery(\n    ['content-manager', slug, layout.uid, id, 'stages'],\n    async () => {\n      const { data } = await get(`/admin/content-manager/${slug}/${uid}/${id}/stages`);\n\n      return data;\n    },\n    queryOptions\n  );\n\n  // these return values need to be memoized, because the default value\n  // would lead to infinite rendering loops when used in a dependency array\n  // on an effect\n  const meta = React.useMemo(() => data?.meta ?? {}, [data?.meta]);\n  const stages = React.useMemo(() => data?.data ?? [], [data?.data]);\n\n  return {\n    // meta contains e.g. the total of all workflows. we can not use\n    // the pagination object here, because the list is not paginated.\n    meta,\n    stages,\n    isLoading,\n    refetch,\n  };\n}\n","import * as React from 'react';\n\nimport {\n  SingleSelect,\n  SingleSelectOption,\n  Field,\n  FieldError,\n  FieldHint,\n  Flex,\n  Loader,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  useCMEditViewDataManager,\n  useAPIErrorHandler,\n  useFetchClient,\n  useNotification,\n} from '@strapi/helper-plugin';\nimport { useIntl } from 'react-intl';\nimport { useMutation } from 'react-query';\n\nimport { useLicenseLimits } from '../../../../../../hooks/useLicenseLimits';\nimport * as LimitsModal from '../../../../../../pages/SettingsPage/pages/ReviewWorkflows/components/LimitsModal';\nimport {\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../../../../../pages/SettingsPage/pages/ReviewWorkflows/constants';\nimport { useReviewWorkflowsStages } from '../../../../../../pages/SettingsPage/pages/ReviewWorkflows/hooks/useReviewWorkflowsStages';\nimport { getStageColorByHex } from '../../../../../../pages/SettingsPage/pages/ReviewWorkflows/utils/colors';\nimport { STAGE_ATTRIBUTE_NAME } from '../../constants';\n\nexport function StageSelect() {\n  const { initialData, layout: contentType, isSingleType, onChange } = useCMEditViewDataManager();\n  const { put } = useFetchClient();\n  const { formatMessage } = useIntl();\n  const { formatAPIError } = useAPIErrorHandler();\n  const toggleNotification = useNotification();\n  const { meta, stages, isLoading, refetch } = useReviewWorkflowsStages(\n    { id: initialData.id, layout: contentType },\n    {\n      enabled: !!initialData?.id,\n    }\n  );\n  const { getFeature } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState(false);\n\n  const limits = getFeature('review-workflows');\n  // it is possible to rely on initialData here, because it always will\n  // be updated at the same time when modifiedData is updated, otherwise\n  // the entity is flagged as modified\n  const activeWorkflowStage = initialData?.[STAGE_ATTRIBUTE_NAME] ?? null;\n\n  const mutation = useMutation(\n    async ({ entityId, stageId, uid }) => {\n      const typeSlug = isSingleType ? 'single-types' : 'collection-types';\n\n      const {\n        data: { data: createdEntity },\n      } = await put(`/admin/content-manager/${typeSlug}/${uid}/${entityId}/stage`, {\n        data: { id: stageId },\n      });\n\n      // initialData and modifiedData have to stay in sync, otherwise the entity would be flagged\n      // as modified, which is what the boolean flag is for\n      onChange(\n        { target: { name: STAGE_ATTRIBUTE_NAME, value: createdEntity[STAGE_ATTRIBUTE_NAME] } },\n        true\n      );\n\n      await refetch();\n\n      return createdEntity;\n    },\n    {\n      onSuccess() {\n        toggleNotification({\n          type: 'success',\n          message: {\n            id: 'content-manager.reviewWorkflows.stage.notification.saved',\n            defaultMessage: 'Review stage updated',\n          },\n        });\n      },\n    }\n  );\n\n  const handleChange = async ({ value: stageId }) => {\n    try {\n      /**\n       * If the current license has a limit:\n       * check if the total count of workflows exceeds that limit and display\n       * the limits modal.\n       *\n       * If the current license does not have a limit (e.g. offline license):\n       * do nothing (for now).\n       *\n       */\n\n      if (\n        limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME], 10) < meta.workflowCount\n      ) {\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit:\n         * check if the total count of stages exceeds that limit and display\n         * the limits modal.\n         *\n         * If the current license does not have a limit (e.g. offline license):\n         * do nothing (for now).\n         *\n         */\n      } else if (\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME], 10) < stages.length\n      ) {\n        setShowLimitModal('stage');\n      } else {\n        mutation.mutateAsync({\n          entityId: initialData.id,\n          stageId,\n          uid: contentType.uid,\n        });\n      }\n    } catch (error) {\n      // react-query@v3: the error doesn't have to be handled here\n      // see: https://github.com/TanStack/query/issues/121\n    }\n  };\n\n  const { themeColorName } = activeWorkflowStage?.color\n    ? getStageColorByHex(activeWorkflowStage?.color)\n    : {};\n\n  return (\n    <>\n      <Field\n        hint={\n          stages.length === 0 &&\n          formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.no-transition',\n            defaultMessage: 'You donâ€™t have the permission to update this stage.',\n          })\n        }\n        name={STAGE_ATTRIBUTE_NAME}\n        id={STAGE_ATTRIBUTE_NAME}\n      >\n        <Flex direction=\"column\" gap={2} alignItems=\"stretch\">\n          <SingleSelect\n            disabled={stages.length === 0}\n            error={(mutation.error && formatAPIError(mutation.error)) || null}\n            name={STAGE_ATTRIBUTE_NAME}\n            id={STAGE_ATTRIBUTE_NAME}\n            value={activeWorkflowStage?.id}\n            onChange={(value) => handleChange({ value })}\n            label={formatMessage({\n              id: 'content-manager.reviewWorkflows.stage.label',\n              defaultMessage: 'Review stage',\n            })}\n            startIcon={\n              activeWorkflowStage && (\n                <Flex\n                  as=\"span\"\n                  height={2}\n                  background={activeWorkflowStage?.color}\n                  borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n                  hasRadius\n                  shrink={0}\n                  width={2}\n                  marginRight=\"-3px\"\n                />\n              )\n            }\n            // eslint-disable-next-line react/no-unstable-nested-components\n            customizeContent={() => (\n              <Flex as=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n                <Typography textColor=\"neutral800\" ellipsis>\n                  {activeWorkflowStage?.name ?? ''}\n                </Typography>\n                {isLoading ? (\n                  <Loader small style={{ display: 'flex' }} data-testid=\"loader\" />\n                ) : null}\n              </Flex>\n            )}\n          >\n            {stages.map(({ id, color, name }) => {\n              const { themeColorName } = getStageColorByHex(color);\n\n              return (\n                <SingleSelectOption\n                  key={id}\n                  startIcon={\n                    <Flex\n                      height={2}\n                      background={color}\n                      borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n                      hasRadius\n                      shrink={0}\n                      width={2}\n                    />\n                  }\n                  value={id}\n                  textValue={name}\n                >\n                  {name}\n                </SingleSelectOption>\n              );\n            })}\n          </SingleSelect>\n          <FieldHint />\n          <FieldError />\n        </Flex>\n      </Field>\n\n      <LimitsModal.Root\n        isOpen={showLimitModal === 'workflow'}\n        onClose={() => setShowLimitModal(false)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.workflows.limit.title',\n            defaultMessage: 'Youâ€™ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root\n        isOpen={showLimitModal === 'stage'}\n        onClose={() => setShowLimitModal(false)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'content-manager.reviewWorkflows.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\nimport { Information } from '../../../../../../../admin/src/content-manager/pages/EditView/Information';\n\nimport { AssigneeSelect } from './components/AssigneeSelect';\nimport { StageSelect } from './components/StageSelect';\n\nexport function InformationBoxEE() {\n  const {\n    isCreatingEntry,\n    layout: { options },\n  } = useCMEditViewDataManager();\n\n  const hasReviewWorkflowsEnabled = options?.reviewWorkflows ?? false;\n\n  return (\n    <Information.Root>\n      <Information.Title />\n      {hasReviewWorkflowsEnabled && !isCreatingEntry && (\n        <>\n          <StageSelect />\n          <AssigneeSelect />\n        </>\n      )}\n      <Information.Body />\n    </Information.Root>\n  );\n}\n"],"names":["uid","data","themeColorName","LimitsModal.Root","LimitsModal.Title","LimitsModal.Body"],"mappings":"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"}