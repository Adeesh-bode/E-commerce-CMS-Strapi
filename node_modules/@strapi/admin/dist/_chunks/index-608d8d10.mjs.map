{"version":3,"file":"index-608d8d10.mjs","sources":["../../ee/admin/src/pages/SettingsPage/pages/SingleSignOn/hooks/useSettingsForm.ts","../../ee/admin/src/pages/SettingsPage/pages/SingleSignOn/utils/schema.js","../../ee/admin/src/pages/SettingsPage/pages/SingleSignOn/index.js"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  getYupInnerErrors,\n  useFetchClient,\n  useNotification,\n  useOverlayBlocker,\n} from '@strapi/helper-plugin';\nimport produce from 'immer';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\nimport { ValidationError } from 'yup';\n\nimport { formatAPIErrors } from '../../../../../../../../admin/src/utils/formatAPIErrors';\n\ninterface GetDataSucceedAction {\n  type: 'GET_DATA_SUCCEEDED';\n  data: {\n    [key: string]: unknown;\n  };\n  fieldsToPick: string[];\n}\n\ninterface OnCancelAction {\n  type: 'ON_CANCEL';\n}\n\ninterface OnChangeAction {\n  type: 'ON_CHANGE';\n  keys: string;\n  value: unknown;\n}\n\ninterface OnSubmitAction {\n  type: 'ON_SUBMIT';\n}\n\ninterface OnSubmitSucceedAction {\n  type: 'ON_SUBMIT_SUCCEEDED';\n  data: {\n    [key: string]: unknown;\n  };\n}\n\ninterface SetErrorsAction {\n  type: 'SET_ERRORS';\n  errors: Record<string, unknown>;\n}\n\ninterface InitialState {\n  fieldsToPick: string[];\n  formErrors?: Record<string, unknown>;\n  initialData: Record<string, unknown>;\n  isLoading: boolean;\n  modifiedData: Record<string, unknown>;\n  showHeaderButtonLoader: boolean;\n  showHeaderLoader: boolean;\n}\n\nconst initialState: InitialState = {\n  fieldsToPick: [],\n  formErrors: {},\n  initialData: {},\n  isLoading: true,\n  modifiedData: {},\n  showHeaderButtonLoader: false,\n  showHeaderLoader: true,\n};\n\ntype Action =\n  | GetDataSucceedAction\n  | OnCancelAction\n  | OnChangeAction\n  | OnSubmitAction\n  | OnSubmitSucceedAction\n  | SetErrorsAction;\n\nconst reducer = (state: typeof initialState, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'GET_DATA_SUCCEEDED': {\n        draftState.isLoading = false;\n        draftState.showHeaderLoader = false;\n        draftState.initialData = pick(action.data, state.fieldsToPick);\n        draftState.modifiedData = pick(action.data, state.fieldsToPick);\n        break;\n      }\n      case 'ON_CANCEL': {\n        draftState.modifiedData = state.initialData;\n        draftState.formErrors = {};\n        break;\n      }\n      case 'ON_CHANGE': {\n        if (action.keys.includes('username') && !action.value) {\n          set(draftState.modifiedData, action.keys.split('.'), null);\n        } else {\n          set(draftState.modifiedData, action.keys.split('.'), action.value);\n        }\n        break;\n      }\n      case 'ON_SUBMIT': {\n        draftState.showHeaderButtonLoader = true;\n        break;\n      }\n      case 'ON_SUBMIT_SUCCEEDED': {\n        draftState.initialData = pick(action.data, state.fieldsToPick);\n        draftState.modifiedData = pick(action.data, state.fieldsToPick);\n        draftState.showHeaderButtonLoader = false;\n        break;\n      }\n      case 'SET_ERRORS': {\n        draftState.formErrors = action.errors;\n        draftState.showHeaderButtonLoader = false;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nconst checkFormValidity = async (data: Record<string, unknown>, schema: any) => {\n  let errors = null;\n\n  try {\n    await schema.validate(data, { abortEarly: false });\n  } catch (err) {\n    if (err instanceof ValidationError) {\n      errors = getYupInnerErrors(err);\n    }\n  }\n\n  return errors;\n};\n\n/**\n * TODO: refactor this, it's confusing and hard to read.\n * It's also only used in `Settings/pages/SingleSignOn` so it can\n * probably be deleted and everything written there...\n */\nexport const useSettingsForm = (\n  schema: Record<string, unknown>,\n  cbSuccess: (data: any) => void,\n  fieldsToPick: string[]\n) => {\n  const [\n    { formErrors, initialData, isLoading, modifiedData, showHeaderButtonLoader, showHeaderLoader },\n    dispatch,\n  ] = React.useReducer(reducer, { ...initialState, fieldsToPick });\n  const toggleNotification = useNotification();\n  const { lockApp, unlockApp } = useOverlayBlocker();\n\n  const { get, put } = useFetchClient();\n\n  React.useEffect(() => {\n    const getData = async () => {\n      try {\n        const {\n          data: { data },\n        } = await get('/admin/providers/options');\n\n        dispatch({\n          type: 'GET_DATA_SUCCEEDED',\n          data,\n          fieldsToPick,\n        });\n      } catch (err) {\n        toggleNotification({\n          type: 'warning',\n          message: { id: 'notification.error' },\n        });\n      }\n    };\n\n    getData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleCancel = () => {\n    dispatch({\n      type: 'ON_CANCEL',\n    });\n  };\n\n  const handleChange = ({\n    target: { name, value },\n  }: {\n    target: { name: string; value?: unknown };\n  }) => {\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name,\n      value,\n    });\n  };\n\n  const setField = (fieldName: string, value: unknown) => {\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: fieldName,\n      value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const errors = await checkFormValidity(modifiedData, schema);\n\n    dispatch({\n      type: 'SET_ERRORS',\n      errors: errors || {},\n    });\n\n    if (!errors) {\n      try {\n        // @ts-expect-error - context assertation\n        lockApp();\n\n        dispatch({\n          type: 'ON_SUBMIT',\n        });\n        const cleanedData = omit(modifiedData, ['confirmPassword', 'registrationToken']);\n\n        if (cleanedData.roles) {\n          // @ts-expect-error hooks needs refactoring anyways\n          cleanedData.roles = cleanedData.roles.map((role) => role.id);\n        }\n        if (cleanedData.ssoLockedRoles) {\n          // @ts-expect-error hooks needs refactoring anyways\n          cleanedData.ssoLockedRoles = [...new Set(cleanedData.ssoLockedRoles)];\n        }\n\n        const {\n          data: { data },\n        } = await put('/admin/providers/options', cleanedData);\n\n        cbSuccess(data);\n\n        dispatch({\n          type: 'ON_SUBMIT_SUCCEEDED',\n          data,\n        });\n\n        toggleNotification({\n          type: 'success',\n          message: { id: 'notification.success.saved' },\n        });\n      } catch (err) {\n        // @ts-expect-error hooks needs refactoring anyways\n        const data = err?.response?.payload ?? { data: {} };\n\n        if (!!data?.data && typeof data.data === 'string') {\n          toggleNotification({\n            type: 'warning',\n            message: data.data,\n          });\n        } else {\n          toggleNotification({\n            type: 'warning',\n            message: data.message,\n          });\n        }\n\n        const apiErrors = formatAPIErrors(data);\n\n        dispatch({\n          type: 'SET_ERRORS',\n          errors: apiErrors,\n        });\n      } finally {\n        // @ts-expect-error - context assertation\n        unlockApp();\n      }\n    }\n  };\n\n  return [\n    { formErrors, initialData, isLoading, modifiedData, showHeaderButtonLoader, showHeaderLoader },\n    dispatch,\n    { handleCancel, handleChange, handleSubmit, setField },\n  ] as const;\n};\n","import { translatedErrors } from '@strapi/helper-plugin';\nimport * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  autoRegister: yup.bool().required(translatedErrors.required),\n  defaultRole: yup.mixed().when('autoRegister', (value, initSchema) => {\n    return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n  }),\n  ssoLockedRoles: yup\n    .array()\n    .nullable()\n    .of(\n      yup.mixed().when('ssoLockedRoles', (value, initSchema) => {\n        return value ? initSchema.required(translatedErrors.required) : initSchema.nullable();\n      })\n    ),\n});\n\nexport default schema;\n","import * as React from 'react';\n\nimport {\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Layout,\n  Main,\n  MultiSelect,\n  MultiSelectOption,\n  Option,\n  Select,\n  ToggleInput,\n  Typography,\n} from '@strapi/design-system';\nimport {\n  CheckPagePermissions,\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useFocusWhenNavigate,\n  useRBAC,\n} from '@strapi/helper-plugin';\nimport { Check } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport { useAdminRoles } from '../../../../../../../admin/src/hooks/useAdminRoles';\nimport { selectAdminPermissions } from '../../../../../../../admin/src/selectors';\n\nimport { useSettingsForm } from './hooks/useSettingsForm';\nimport schema from './utils/schema';\n\nexport const SingleSignOn = () => {\n  useFocusWhenNavigate();\n\n  const { formatMessage } = useIntl();\n  const permissions = useSelector(selectAdminPermissions);\n\n  const {\n    isLoading: isLoadingPermissions,\n    allowedActions: { canUpdate, canReadRoles },\n  } = useRBAC({\n    ...permissions.settings.sso,\n    readRoles: permissions.settings.roles.read,\n  });\n\n  const [\n    { formErrors, initialData, isLoading: isLoadingForm, modifiedData, showHeaderButtonLoader },\n    ,\n    { handleChange, handleSubmit },\n  ] = useSettingsForm(schema, () => {}, ['autoRegister', 'defaultRole', 'ssoLockedRoles']);\n\n  const { roles, isLoading: isLoadingRoles } = useAdminRoles(undefined, {\n    enabled: canReadRoles,\n  });\n\n  const isLoading = isLoadingPermissions || isLoadingRoles || isLoadingForm;\n  // TODO: focus() first error field, but it looks like that requires refactoring from useSettingsForm to Formik\n\n  return (\n    <Layout>\n      <SettingsPageTitle name=\"SSO\" />\n      <Main tabIndex={-1}>\n        <form onSubmit={handleSubmit}>\n          <HeaderLayout\n            primaryAction={\n              <Button\n                data-testid=\"save-button\"\n                disabled={isEqual(initialData, modifiedData)}\n                loading={showHeaderButtonLoader}\n                startIcon={<Check />}\n                type=\"submit\"\n                size=\"L\"\n              >\n                {formatMessage({\n                  id: 'global.save',\n                  defaultMessage: 'Save',\n                })}\n              </Button>\n            }\n            title={formatMessage({ id: 'Settings.sso.title', defaultMessage: 'Single Sign-On' })}\n            subtitle={formatMessage({\n              id: 'Settings.sso.description',\n              defaultMessage: 'Configure the settings for the Single Sign-On feature.',\n            })}\n          />\n          <ContentLayout>\n            {isLoading ? (\n              <LoadingIndicatorPage />\n            ) : (\n              <Flex\n                direction=\"column\"\n                alignItems=\"stretch\"\n                gap={4}\n                background=\"neutral0\"\n                padding={6}\n                shadow=\"filterShadow\"\n                hasRadius\n              >\n                <Typography variant=\"delta\" as=\"h2\">\n                  {formatMessage({\n                    id: 'global.settings',\n                    defaultMessage: 'Settings',\n                  })}\n                </Typography>\n                <Grid gap={4}>\n                  <GridItem col={6} m={6} s={12}>\n                    <ToggleInput\n                      aria-label=\"autoRegister\"\n                      data-testid=\"autoRegister\"\n                      disabled={!canUpdate}\n                      checked={modifiedData.autoRegister}\n                      hint={formatMessage({\n                        id: 'Settings.sso.form.registration.description',\n                        defaultMessage: 'Create new user on SSO login if no account exists',\n                      })}\n                      label={formatMessage({\n                        id: 'Settings.sso.form.registration.label',\n                        defaultMessage: 'Auto-registration',\n                      })}\n                      name=\"autoRegister\"\n                      offLabel={formatMessage({\n                        id: 'app.components.ToggleCheckbox.off-label',\n                        defaultMessage: 'Off',\n                      })}\n                      onLabel={formatMessage({\n                        id: 'app.components.ToggleCheckbox.on-label',\n                        defaultMessage: 'On',\n                      })}\n                      onChange={(e) => {\n                        handleChange({\n                          target: { name: 'autoRegister', value: e.target.checked },\n                        });\n                      }}\n                    />\n                  </GridItem>\n                  <GridItem col={6} m={6} s={12}>\n                    <Select\n                      disabled={!canUpdate}\n                      hint={formatMessage({\n                        id: 'Settings.sso.form.defaultRole.description',\n                        defaultMessage:\n                          'It will attach the new authenticated user to the selected role',\n                      })}\n                      error={\n                        formErrors.defaultRole\n                          ? formatMessage({\n                              id: formErrors.defaultRole.id,\n                              defaultMessage: formErrors.defaultRole.id,\n                            })\n                          : ''\n                      }\n                      label={formatMessage({\n                        id: 'Settings.sso.form.defaultRole.label',\n                        defaultMessage: 'Default role',\n                      })}\n                      name=\"defaultRole\"\n                      onChange={(value) => {\n                        handleChange({ target: { name: 'defaultRole', value } });\n                      }}\n                      placeholder={formatMessage({\n                        id: 'components.InputSelect.option.placeholder',\n                        defaultMessage: 'Choose here',\n                      })}\n                      value={modifiedData.defaultRole}\n                    >\n                      {roles.map(({ id, name }) => (\n                        <Option key={id} value={id.toString()}>\n                          {name}\n                        </Option>\n                      ))}\n                    </Select>\n                  </GridItem>\n                  <GridItem col={6} m={6} s={12}>\n                    <MultiSelect\n                      disabled={!canUpdate}\n                      hint={formatMessage({\n                        id: 'Settings.sso.form.localAuthenticationLock.description',\n                        defaultMessage:\n                          'Select the roles for which you want to disable the local authentication',\n                      })}\n                      error={\n                        formErrors.ssoLockedRoles\n                          ? formatMessage({\n                              id: formErrors.ssoLockedRoles.id,\n                              defaultMessage: formErrors.ssoLockedRoles.id,\n                            })\n                          : ''\n                      }\n                      label={formatMessage({\n                        id: 'Settings.sso.form.localAuthenticationLock.label',\n                        defaultMessage: 'Local authentication lock-out',\n                      })}\n                      name=\"ssoLockedRoles\"\n                      onChange={(value) => {\n                        handleChange({ target: { name: 'ssoLockedRoles', value } });\n                      }}\n                      placeholder={formatMessage({\n                        id: 'components.InputSelect.option.placeholder',\n                        defaultMessage: 'Choose here',\n                      })}\n                      onClear={() => {\n                        handleChange({ target: { name: 'ssoLockedRoles' } });\n                      }}\n                      value={modifiedData.ssoLockedRoles || []}\n                      withTags\n                    >\n                      {roles.map(({ id, name }) => (\n                        <MultiSelectOption key={id} value={id.toString()}>\n                          {name}\n                        </MultiSelectOption>\n                      ))}\n                    </MultiSelect>\n                  </GridItem>\n                </Grid>\n              </Flex>\n            )}\n          </ContentLayout>\n        </form>\n      </Main>\n    </Layout>\n  );\n};\n\nconst ProtectedSSO = () => {\n  const permissions = useSelector(selectAdminPermissions);\n\n  return (\n    <CheckPagePermissions permissions={permissions.settings.sso.main}>\n      <SingleSignOn />\n    </CheckPagePermissions>\n  );\n};\n\nexport default ProtectedSSO;\n"],"names":["schema"],"mappings":"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"}