{"version":3,"file":"index-91df57b1.mjs","sources":["../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/Events/index.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/EventTable/EventTableCE.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/HeadersInput/Combobox.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/HeadersInput/index.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/TriggerContainer/index.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/WebhookForm/utils/makeWebhookValidationSchema.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/WebhookForm/index.js","../../admin/src/pages/SettingsPage/pages/Webhooks/EditView/index.js"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  BaseCheckbox,\n  Checkbox,\n  FieldLabel,\n  Flex,\n  Loader,\n  RawTable as Table,\n  RawTbody as Tbody,\n  RawTd as Td,\n  RawTh as Th,\n  RawThead as Thead,\n  RawTr as Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { useContentTypes } from '../../../../../../../hooks/useContentTypes';\n\nexport const formatValue = (value) =>\n  value.reduce((acc, curr) => {\n    const key = curr.split('.')[0];\n\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(curr);\n\n    return acc;\n  }, {});\n\n// TODO check whether we want to move alternating background colour tables to the design system\nconst StyledTable = styled(Table)`\n  tbody tr:nth-child(odd) {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  thead th span {\n    color: ${({ theme }) => theme.colors.neutral500};\n  }\n\n  td,\n  th {\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\n    width: 10%;\n    vertical-align: middle;\n    text-align: center;\n  }\n\n  tbody tr td:first-child {\n    /**\n     * Add padding to the start of the first column to avoid the checkbox appearing\n     * too close to the edge of the table\n     */\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\n  }\n`;\n\nconst getCEHeaders = (isDraftAndPublish) => {\n  const headers = [\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\n  ];\n\n  if (isDraftAndPublish) {\n    headers.push({ id: 'app.utils.publish', defaultMessage: 'Publish' });\n    headers.push({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' });\n  }\n\n  return headers;\n};\n\nconst getCEEvents = (isDraftAndPublish) => {\n  const entryEvents = ['entry.create', 'entry.update', 'entry.delete'];\n\n  if (isDraftAndPublish) {\n    entryEvents.push('entry.publish', 'entry.unpublish');\n  }\n\n  return {\n    entry: entryEvents,\n    media: ['media.create', 'media.update', 'media.delete'],\n  };\n};\n\nconst WebhookEventContext = React.createContext();\n\nconst Root = ({ children }) => {\n  const { formatMessage } = useIntl();\n  const { collectionTypes, isLoading } = useContentTypes();\n\n  const isDraftAndPublish = React.useMemo(\n    () => collectionTypes.some((ct) => ct.options.draftAndPublish === true),\n    [collectionTypes]\n  );\n\n  const label = formatMessage({\n    id: 'Settings.webhooks.form.events',\n    defaultMessage: 'Events',\n  });\n\n  return (\n    <WebhookEventContext.Provider value={{ isDraftAndPublish }}>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n        <FieldLabel aria-hidden>{label}</FieldLabel>\n        {isLoading && (\n          <Loader>\n            {formatMessage({\n              id: 'Settings.webhooks.events.isLoading',\n              defaultMessage: 'Events loading',\n            })}\n          </Loader>\n        )}\n        <StyledTable aria-label={label}>{children}</StyledTable>\n      </Flex>\n    </WebhookEventContext.Provider>\n  );\n};\n\nRoot.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n};\n\nconst Headers = ({ getHeaders = getCEHeaders }) => {\n  const { isDraftAndPublish } = React.useContext(WebhookEventContext);\n\n  const { formatMessage } = useIntl();\n  const headers = getHeaders(isDraftAndPublish);\n\n  return (\n    <Thead>\n      <Tr>\n        <Th>\n          <VisuallyHidden>\n            {formatMessage({\n              id: 'Settings.webhooks.event.select',\n              defaultMessage: 'Select event',\n            })}\n          </VisuallyHidden>\n        </Th>\n        {headers.map((header) => {\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header.id)) {\n            return (\n              <Th\n                key={header.id}\n                title={formatMessage({\n                  id: 'Settings.webhooks.event.publish-tooltip',\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\n                })}\n              >\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage(header)}\n                </Typography>\n              </Th>\n            );\n          }\n\n          return (\n            <Th key={header.id}>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage(header)}\n              </Typography>\n            </Th>\n          );\n        })}\n      </Tr>\n    </Thead>\n  );\n};\n\nHeaders.defaultProps = {\n  getHeaders: getCEHeaders,\n};\n\nHeaders.propTypes = {\n  getHeaders: PropTypes.func,\n};\n\nconst Body = ({ providedEvents }) => {\n  const { isDraftAndPublish } = React.useContext(WebhookEventContext);\n\n  const events = providedEvents || getCEEvents(isDraftAndPublish);\n  const { values, handleChange: onChange } = useFormikContext();\n\n  const inputName = 'events';\n  const inputValue = values.events;\n  const disabledEvents = [];\n\n  const formattedValue = formatValue(inputValue);\n\n  const handleSelect = ({ target: { name, value } }) => {\n    let set = new Set(inputValue);\n\n    if (value) {\n      set.add(name);\n    } else {\n      set.delete(name);\n    }\n    onChange({ target: { name: inputName, value: Array.from(set) } });\n  };\n\n  const handleSelectAll = ({ target: { name, value } }) => {\n    let set = new Set(inputValue);\n\n    if (value) {\n      events[name].forEach((event) => {\n        if (!disabledEvents.includes(event)) {\n          set.add(event);\n        }\n      });\n    } else {\n      events[name].forEach((event) => set.delete(event));\n    }\n    onChange({ target: { name: inputName, value: Array.from(set) } });\n  };\n\n  return (\n    <Tbody>\n      {Object.entries(events).map(([event, value]) => {\n        return (\n          <EventRow\n            disabledEvents={disabledEvents}\n            key={event}\n            name={event}\n            events={value}\n            inputValue={formattedValue[event]}\n            handleSelect={handleSelect}\n            handleSelectAll={handleSelectAll}\n          />\n        );\n      })}\n    </Tbody>\n  );\n};\n\nBody.defaultProps = {\n  providedEvents: null,\n};\n\nBody.propTypes = {\n  providedEvents: PropTypes.object,\n};\n\n/**\n * Converts a string to title case and removes hyphens.\n *\n * @param {string} str - The string to convert.\n * @returns {string} The converted string.\n */\nconst removeHyphensAndTitleCase = (str) =>\n  str\n    .replace(/-/g, ' ')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nconst EventRow = ({ disabledEvents, name, events, inputValue, handleSelect, handleSelectAll }) => {\n  const { formatMessage } = useIntl();\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\n\n  const hasSomeCheckboxSelected = inputValue.length > 0;\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\n\n  const onChangeAll = ({ target: { name } }) => {\n    const valueToSet = !areAllCheckboxesSelected;\n\n    handleSelectAll({\n      target: { name, value: valueToSet },\n    });\n  };\n\n  const targetColumns = 5;\n\n  return (\n    <Tr>\n      <Td>\n        <Checkbox\n          indeterminate={hasSomeCheckboxSelected && !areAllCheckboxesSelected}\n          aria-label={formatMessage({\n            id: 'global.select-all-entries',\n            defaultMessage: 'Select all entries',\n          })}\n          name={name}\n          onChange={onChangeAll}\n          value={areAllCheckboxesSelected}\n        >\n          {removeHyphensAndTitleCase(name)}\n        </Checkbox>\n      </Td>\n\n      {events.map((event) => {\n        return (\n          <Td key={event}>\n            <BaseCheckbox\n              disabled={disabledEvents.includes(event)}\n              aria-label={event}\n              name={event}\n              value={inputValue.includes(event)}\n              onValueChange={(value) => handleSelect({ target: { name: event, value } })}\n            />\n          </Td>\n        );\n      })}\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\n    </Tr>\n  );\n};\n\nEventRow.defaultProps = {\n  disabledEvents: [],\n  events: [],\n  inputValue: [],\n  handleSelect() {},\n  handleSelectAll() {},\n};\n\nEventRow.propTypes = {\n  disabledEvents: PropTypes.array,\n  events: PropTypes.array,\n  inputValue: PropTypes.array,\n  handleSelect: PropTypes.func,\n  handleSelectAll: PropTypes.func,\n  name: PropTypes.string.isRequired,\n};\n\nexport default { Root, Headers, Body, EventRow };\n","import React from 'react';\n\nimport EventTable from '../Events';\n\n// This component is overwritten by the EE counterpart\nexport function EventTableCE() {\n  return (\n    <EventTable.Root>\n      <EventTable.Headers />\n      <EventTable.Body />\n    </EventTable.Root>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { ComboboxOption, CreatableCombobox } from '@strapi/design-system';\nimport { useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\n\nconst HTTP_HEADERS = [\n  'A-IM',\n  'Accept',\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Datetime',\n  'Access-Control-Request-Method',\n  'Access-Control-Request-Headers',\n  'Authorization',\n  'Cache-Control',\n  'Connection',\n  'Content-Length',\n  'Content-Type',\n  'Cookie',\n  'Date',\n  'Expect',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Max-Forwards',\n  'Origin',\n  'Pragma',\n  'Proxy-Authorization',\n  'Range',\n  'Referer',\n  'TE',\n  'User-Agent',\n  'Upgrade',\n  'Via',\n  'Warning',\n];\n\nconst Combobox = ({ name, onChange, value, ...props }) => {\n  const {\n    values: { headers },\n  } = useFormikContext();\n  const [options, setOptions] = useState(HTTP_HEADERS);\n\n  useEffect(() => {\n    setOptions(\n      HTTP_HEADERS.filter(\n        (key) => !headers?.some((header) => header.key !== value && header.key === key)\n      )\n    );\n  }, [headers, value]);\n\n  const handleChange = (value) => {\n    onChange({ target: { name, value } });\n  };\n\n  const handleCreateOption = (value) => {\n    setOptions((prev) => [...prev, value]);\n\n    handleChange(value);\n  };\n\n  return (\n    <CreatableCombobox\n      {...props}\n      onClear={() => handleChange('')}\n      onChange={handleChange}\n      onCreateOption={handleCreateOption}\n      placeholder=\"\"\n      value={value}\n    >\n      {options.map((key) => (\n        <ComboboxOption value={key} key={key}>\n          {key}\n        </ComboboxOption>\n      ))}\n    </CreatableCombobox>\n  );\n};\n\nCombobox.defaultProps = {\n  value: undefined,\n};\n\nCombobox.propTypes = {\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nexport default Combobox;\n","import React from 'react';\n\nimport {\n  Box,\n  FieldLabel,\n  Flex,\n  Grid,\n  GridItem,\n  TextButton,\n  TextInput,\n} from '@strapi/design-system';\nimport { RemoveRoundedButton } from '@strapi/helper-plugin';\nimport { Plus } from '@strapi/icons';\nimport { Field, FieldArray, useFormikContext } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport Combobox from './Combobox';\n\nconst HeadersInput = () => {\n  const { formatMessage } = useIntl();\n  const { values, errors } = useFormikContext();\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <FieldLabel>\n        {formatMessage({\n          id: 'Settings.webhooks.form.headers',\n          defaultMessage: 'Headers',\n        })}\n      </FieldLabel>\n      <Box padding={8} background=\"neutral100\" hasRadius>\n        <FieldArray\n          validateOnChange={false}\n          name=\"headers\"\n          render={({ push, remove }) => (\n            <Grid gap={4}>\n              {values.headers.map((header, index) => (\n                // eslint-disable-next-line\n                <React.Fragment key={`${index}.${header.key}`}>\n                  <GridItem col={6}>\n                    <Field\n                      as={Combobox}\n                      name={`headers.${index}.key`}\n                      aria-label={`row ${index + 1} key`}\n                      label={formatMessage({\n                        id: 'Settings.webhooks.key',\n                        defaultMessage: 'Key',\n                      })}\n                      error={errors.headers?.[index]?.key && errors.headers[index].key}\n                    />\n                  </GridItem>\n                  <GridItem col={6}>\n                    <Flex alignItems=\"flex-end\">\n                      <Box style={{ flex: 1 }}>\n                        <Field\n                          as={TextInput}\n                          name={`headers.${index}.value`}\n                          aria-label={`row ${index + 1} value`}\n                          label={formatMessage({\n                            id: 'Settings.webhooks.value',\n                            defaultMessage: 'Value',\n                          })}\n                          error={errors.headers?.[index]?.value && errors.headers[index].value}\n                        />\n                      </Box>\n                      <Flex\n                        paddingLeft={2}\n                        style={{ alignSelf: 'center' }}\n                        paddingTop={errors.headers?.[index]?.value ? 0 : 5}\n                      >\n                        <RemoveRoundedButton\n                          disabled={values.headers.length === 1}\n                          onClick={() => remove(index)}\n                          label={formatMessage(\n                            {\n                              id: 'Settings.webhooks.headers.remove',\n                              defaultMessage: 'Remove header row {number}',\n                            },\n                            { number: index + 1 }\n                          )}\n                        />\n                      </Flex>\n                    </Flex>\n                  </GridItem>\n                </React.Fragment>\n              ))}\n              <GridItem col={12}>\n                <TextButton\n                  type=\"button\"\n                  onClick={() => {\n                    push({ key: '', value: '' });\n                  }}\n                  startIcon={<Plus />}\n                >\n                  {formatMessage({\n                    id: 'Settings.webhooks.create.header',\n                    defaultMessage: 'Create new header',\n                  })}\n                </TextButton>\n              </GridItem>\n            </Grid>\n          )}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nexport default HeadersInput;\n","import React from 'react';\n\nimport { Box, Flex, Grid, GridItem, Typography } from '@strapi/design-system';\nimport { pxToRem } from '@strapi/helper-plugin';\nimport { Check, Cross, Loader } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\n// Being discussed in Notion: create a <Icon /> component in Parts\nconst Icon = styled.svg(\n  ({ theme, color }) => `\n  width: ${12 / 16}rem;\n  height: ${12 / 16}rem;\n\n  path {\n    fill: ${theme.colors[color]};\n  }\n`\n);\n\nconst Status = ({ isPending, statusCode }) => {\n  const { formatMessage } = useIntl();\n\n  if (isPending) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Loader} />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.pending', defaultMessage: 'pending' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Check} color=\"success700\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.webhooks.trigger.success', defaultMessage: 'success' })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex gap={2} alignItems=\"center\">\n        <Icon as={Cross} color=\"danger700\" />\n        <Typography>\n          {formatMessage({ id: 'Settings.error', defaultMessage: 'error' })} {statusCode}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  return null;\n};\nStatus.propTypes = {\n  isPending: PropTypes.bool.isRequired,\n  statusCode: PropTypes.number,\n};\nStatus.defaultProps = {\n  statusCode: undefined,\n};\n\nconst Message = ({ statusCode, message }) => {\n  const { formatMessage } = useIntl();\n\n  if (statusCode >= 200 && statusCode < 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Typography textColor=\"neutral600\" ellipsis>\n          {formatMessage({\n            id: 'Settings.webhooks.trigger.success.label',\n            defaultMessage: 'Trigger succeeded',\n          })}\n        </Typography>\n      </Flex>\n    );\n  }\n\n  if (statusCode >= 300) {\n    return (\n      <Flex justifyContent=\"flex-end\">\n        <Flex maxWidth={pxToRem(250)} justifyContent=\"flex-end\" title={message}>\n          <Typography ellipsis textColor=\"neutral600\">\n            {message}\n          </Typography>\n        </Flex>\n      </Flex>\n    );\n  }\n\n  return null;\n};\nMessage.propTypes = {\n  statusCode: PropTypes.number,\n  message: PropTypes.string,\n};\nMessage.defaultProps = {\n  statusCode: undefined,\n  message: undefined,\n};\n\nconst CancelButton = ({ onCancel }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex justifyContent=\"flex-end\">\n      <button onClick={onCancel} type=\"button\">\n        <Flex gap={2} alignItems=\"center\">\n          <Typography textColor=\"neutral400\">\n            {formatMessage({ id: 'Settings.webhooks.trigger.cancel', defaultMessage: 'cancel' })}\n          </Typography>\n          <Icon as={Cross} color=\"neutral400\" />\n        </Flex>\n      </button>\n    </Flex>\n  );\n};\n\nCancelButton.propTypes = { onCancel: PropTypes.func.isRequired };\n\nconst TriggerContainer = ({ isPending, onCancel, response }) => {\n  const { statusCode, message } = response;\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={5} shadow=\"filterShadow\" hasRadius>\n      <Grid gap={4} style={{ alignItems: 'center' }}>\n        <GridItem col={3}>\n          <Typography>\n            {formatMessage({\n              id: 'Settings.webhooks.trigger.test',\n              defaultMessage: 'Test-trigger',\n            })}\n          </Typography>\n        </GridItem>\n        <GridItem col={3}>\n          <Status isPending={isPending} statusCode={statusCode} />\n        </GridItem>\n        <GridItem col={6}>\n          {!isPending ? (\n            <Message statusCode={statusCode} message={message} />\n          ) : (\n            <CancelButton onCancel={onCancel} />\n          )}\n        </GridItem>\n      </Grid>\n    </Box>\n  );\n};\n\nTriggerContainer.defaultProps = {\n  isPending: false,\n  onCancel() {},\n  response: {},\n};\n\nTriggerContainer.propTypes = {\n  isPending: PropTypes.bool,\n  onCancel: PropTypes.func,\n  response: PropTypes.object,\n};\n\nexport default TriggerContainer;\n","import * as yup from 'yup';\n\nconst NAME_REGEX = /(^$)|(^[A-Za-z][_0-9A-Za-z ]*$)/;\nconst URL_REGEX = /(^$)|((https?:\\/\\/.*)(d*)\\/?(.*))/;\n\nexport const makeWebhookValidationSchema = ({ formatMessage }) =>\n  yup.object().shape({\n    name: yup\n      .string()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.required',\n          defaultMessage: 'Name is required',\n        })\n      )\n      .matches(\n        NAME_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.name.regex',\n          defaultMessage:\n            'The name must start with a letter and only contain letters, numbers, spaces and underscores',\n        })\n      ),\n    url: yup\n      .string()\n      .required(\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.required',\n          defaultMessage: 'Url is required',\n        })\n      )\n      .matches(\n        URL_REGEX,\n        formatMessage({\n          id: 'Settings.webhooks.validation.url.regex',\n          defaultMessage: 'The value must be a valid Url',\n        })\n      ),\n    headers: yup.lazy((array) => {\n      let baseSchema = yup.array();\n\n      if (array.length === 1) {\n        const { key, value } = array[0];\n\n        if (!key && !value) {\n          return baseSchema;\n        }\n      }\n\n      return baseSchema.of(\n        yup.object().shape({\n          key: yup.string().required(\n            formatMessage({\n              id: 'Settings.webhooks.validation.key',\n              defaultMessage: 'Key is required',\n            })\n          ),\n          value: yup.string().required(\n            formatMessage({\n              id: 'Settings.webhooks.validation.value',\n              defaultMessage: 'Value is required',\n            })\n          ),\n        })\n      );\n    }),\n    events: yup.array(),\n  });\n","import React, { useState } from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  TextInput,\n} from '@strapi/design-system';\nimport { Form, Link } from '@strapi/helper-plugin';\nimport { ArrowLeft, Check, Play as Publish } from '@strapi/icons';\nimport { Field, FormikProvider, useFormik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { useEnterprise } from '../../../../../../../hooks/useEnterprise';\nimport { EventTableCE } from '../EventTable';\nimport HeadersInput from '../HeadersInput';\nimport TriggerContainer from '../TriggerContainer';\n\nimport { makeWebhookValidationSchema } from './utils/makeWebhookValidationSchema';\n\nconst WebhookForm = ({\n  handleSubmit,\n  triggerWebhook,\n  isCreating,\n  isTriggering,\n  triggerResponse,\n  data,\n}) => {\n  const { formatMessage } = useIntl();\n  const [showTriggerResponse, setShowTriggerResponse] = useState(false);\n  const EventTable = useEnterprise(\n    EventTableCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../../../ee/admin/src/pages/SettingsPage/pages/Webhooks/EditView/components/EventTable'\n        )\n      ).EventTableEE\n  );\n\n  /**\n   * Map the headers into a form that can be used within the formik form\n   * @param {Object} headers\n   * @returns {Array}\n   */\n  const mapHeaders = (headers) => {\n    if (!Object.keys(headers).length) {\n      return [{ key: '', value: '' }];\n    }\n\n    return Object.entries(headers).map(([key, value]) => ({ key, value }));\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: data?.name || '',\n      url: data?.url || '',\n      headers: mapHeaders(data?.headers || {}),\n      events: data?.events || [],\n    },\n    onSubmit(values, { resetForm, setSubmitting }) {\n      handleSubmit(values);\n\n      resetForm({ values });\n      setSubmitting(false);\n    },\n    validationSchema: makeWebhookValidationSchema({ formatMessage }),\n    validateOnChange: false,\n    validateOnBlur: false,\n  });\n\n  // block rendering until the EE component is fully loaded\n  if (!EventTable) {\n    return null;\n  }\n\n  return (\n    <FormikProvider value={formik}>\n      <Form onSubmit={formik.handleSubmit}>\n        <HeaderLayout\n          primaryAction={\n            <Flex gap={2}>\n              <Button\n                onClick={() => {\n                  triggerWebhook();\n                  setShowTriggerResponse(true);\n                }}\n                variant=\"tertiary\"\n                startIcon={<Publish />}\n                disabled={isCreating || isTriggering}\n                size=\"L\"\n              >\n                {formatMessage({\n                  id: 'Settings.webhooks.trigger',\n                  defaultMessage: 'Trigger',\n                })}\n              </Button>\n              <Button\n                startIcon={<Check />}\n                type=\"submit\"\n                size=\"L\"\n                disabled={!formik.dirty}\n                loading={formik.isSubmitting}\n              >\n                {formatMessage({\n                  id: 'global.save',\n                  defaultMessage: 'Save',\n                })}\n              </Button>\n            </Flex>\n          }\n          title={\n            isCreating\n              ? formatMessage({\n                  id: 'Settings.webhooks.create',\n                  defaultMessage: 'Create a webhook',\n                })\n              : data?.name\n          }\n          navigationAction={\n            <Link startIcon={<ArrowLeft />} to=\"/settings/webhooks\">\n              {formatMessage({\n                id: 'global.back',\n                defaultMessage: 'Back',\n              })}\n            </Link>\n          }\n        />\n        <ContentLayout>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n            {showTriggerResponse && (\n              <TriggerContainer\n                isPending={isTriggering}\n                response={triggerResponse}\n                onCancel={() => setShowTriggerResponse(false)}\n              />\n            )}\n            <Box background=\"neutral0\" padding={8} shadow=\"filterShadow\" hasRadius>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <Grid gap={6}>\n                  <GridItem col={6}>\n                    <Field\n                      as={TextInput}\n                      name=\"name\"\n                      error={formik?.errors?.name && formik.errors.name}\n                      label={formatMessage({\n                        id: 'global.name',\n                        defaultMessage: 'Name',\n                      })}\n                      required\n                    />\n                  </GridItem>\n                  <GridItem col={12}>\n                    <Field\n                      as={TextInput}\n                      name=\"url\"\n                      error={formik?.errors?.url && formik.errors.url}\n                      label={formatMessage({\n                        id: 'Settings.roles.form.input.url',\n                        defaultMessage: 'Url',\n                      })}\n                      required\n                    />\n                  </GridItem>\n                </Grid>\n                <HeadersInput />\n                <EventTable />\n              </Flex>\n            </Box>\n          </Flex>\n        </ContentLayout>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nWebhookForm.propTypes = {\n  data: PropTypes.object,\n  handleSubmit: PropTypes.func.isRequired,\n  triggerWebhook: PropTypes.func.isRequired,\n  isCreating: PropTypes.bool.isRequired,\n  isTriggering: PropTypes.bool.isRequired,\n  triggerResponse: PropTypes.object,\n};\n\nWebhookForm.defaultProps = {\n  data: undefined,\n  triggerResponse: undefined,\n};\n\nexport default WebhookForm;\n","import * as React from 'react';\n\nimport { Main } from '@strapi/design-system';\nimport {\n  LoadingIndicatorPage,\n  SettingsPageTitle,\n  useAPIErrorHandler,\n  useFetchClient,\n  useNotification,\n} from '@strapi/helper-plugin';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { useContentTypes } from '../../../../../hooks/useContentTypes';\n\nimport WebhookForm from './components/WebhookForm';\n\nconst cleanData = (data) => ({\n  ...data,\n  headers: data.headers.reduce((acc, { key, value }) => {\n    if (key !== '') {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {}),\n});\n\nconst EditView = () => {\n  const {\n    params: { id },\n  } = useRouteMatch('/settings/webhooks/:id');\n  const isCreating = id === 'create';\n\n  const { replace } = useHistory();\n  const toggleNotification = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const queryClient = useQueryClient();\n  const { isLoading: isLoadingForModels } = useContentTypes();\n  const { put, get, post } = useFetchClient();\n\n  const {\n    isLoading,\n    data: webhookData,\n    error: webhookError,\n  } = useQuery(\n    ['webhooks', id],\n    async () => {\n      const {\n        data: { data },\n      } = await get(`/admin/webhooks/${id}`);\n\n      return data;\n    },\n    {\n      enabled: !isCreating,\n    }\n  );\n\n  React.useEffect(() => {\n    if (webhookError) {\n      toggleNotification({\n        type: 'warning',\n        message: formatAPIError(webhookError),\n      });\n    }\n  }, [webhookError, toggleNotification, formatAPIError]);\n\n  const {\n    isLoading: isTriggering,\n    data: triggerResponse,\n    isIdle: isTriggerIdle,\n    mutate,\n  } = useMutation(() => post(`/admin/webhooks/${id}/trigger`));\n\n  const triggerWebhook = () =>\n    mutate(null, {\n      onError(error) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(error),\n        });\n      },\n    });\n\n  const createWebhookMutation = useMutation((body) => post('/admin/webhooks', body));\n\n  const updateWebhookMutation = useMutation(({ id, body }) => put(`/admin/webhooks/${id}`, body));\n\n  const handleSubmit = async (data) => {\n    if (isCreating) {\n      createWebhookMutation.mutate(cleanData(data), {\n        onSuccess({ data: result }) {\n          toggleNotification({\n            type: 'success',\n            message: { id: 'Settings.webhooks.created' },\n          });\n          replace(`/settings/webhooks/${result.data.id}`);\n        },\n        onError(error) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        },\n      });\n\n      return;\n    }\n    updateWebhookMutation.mutate(\n      { id, body: cleanData(data) },\n      {\n        onSuccess() {\n          queryClient.invalidateQueries(['webhooks', id]);\n          toggleNotification({\n            type: 'success',\n            message: { id: 'notification.form.success.fields' },\n          });\n        },\n        onError(error) {\n          toggleNotification({\n            type: 'warning',\n            message: formatAPIError(error),\n          });\n        },\n      }\n    );\n  };\n\n  if (isLoading || isLoadingForModels) {\n    return <LoadingIndicatorPage />;\n  }\n\n  return (\n    <Main>\n      <SettingsPageTitle name=\"Webhooks\" />\n      <WebhookForm\n        {...{\n          data: webhookData,\n          handleSubmit,\n          triggerWebhook,\n          isCreating,\n          isTriggering,\n          isTriggerIdle,\n          triggerResponse: triggerResponse?.data.data,\n        }}\n      />\n    </Main>\n  );\n};\n\nexport default EditView;\n"],"names":["Table","Thead","Tr","Th","Tbody","name","Td","value","React","Loader","EventTable","Publish","id"],"mappings":";;;;;;;;;;;;;;;AAwBO,MAAM,cAAc,CAAC,UAC1B,MAAM,OAAO,CAAC,KAAK,SAAS;AAC1B,QAAM,MAAM,KAAK,MAAM,GAAG,EAAE,CAAC;AAEzB,MAAA,CAAC,IAAI,GAAG,GAAG;AACT,QAAA,GAAG,IAAI;EACb;AACI,MAAA,GAAG,EAAE,KAAK,IAAI;AAEX,SAAA;AACT,GAAG,CAAE,CAAA;AAGP,MAAM,cAAc,OAAOA,QAAK;AAAA;AAAA,kBAEd,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA,aAI3C,CAAC,EAAE,MAAA,MAAY,MAAM,OAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,2BAKxB,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA,yBAChC,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAW3B,CAAC,EAAE,YAAY,MAAM,OAAO,CAAC,CAAC;AAAA;AAAA;AAI1D,MAAM,eAAe,CAAC,sBAAsB;AAC1C,QAAM,UAAU;AAAA,IACd,EAAE,IAAI,mCAAmC,gBAAgB,SAAS;AAAA,IAClE,EAAE,IAAI,mCAAmC,gBAAgB,SAAS;AAAA,IAClE,EAAE,IAAI,oBAAoB,gBAAgB,SAAS;AAAA,EAAA;AAGrD,MAAI,mBAAmB;AACrB,YAAQ,KAAK,EAAE,IAAI,qBAAqB,gBAAgB,WAAW;AACnE,YAAQ,KAAK,EAAE,IAAI,uBAAuB,gBAAgB,aAAa;AAAA,EACzE;AAEO,SAAA;AACT;AAEA,MAAM,cAAc,CAAC,sBAAsB;AACzC,QAAM,cAAc,CAAC,gBAAgB,gBAAgB,cAAc;AAEnE,MAAI,mBAAmB;AACT,gBAAA,KAAK,iBAAiB,iBAAiB;AAAA,EACrD;AAEO,SAAA;AAAA,IACL,OAAO;AAAA,IACP,OAAO,CAAC,gBAAgB,gBAAgB,cAAc;AAAA,EAAA;AAE1D;AAEA,MAAM,sBAAsB,MAAM;AAElC,MAAM,OAAO,CAAC,EAAE,eAAe;AACvB,QAAA,EAAE,kBAAkB;AAC1B,QAAM,EAAE,iBAAiB,UAAU,IAAI,gBAAgB;AAEvD,QAAM,oBAAoB,MAAM;AAAA,IAC9B,MAAM,gBAAgB,KAAK,CAAC,OAAO,GAAG,QAAQ,oBAAoB,IAAI;AAAA,IACtE,CAAC,eAAe;AAAA,EAAA;AAGlB,QAAM,QAAQ,cAAc;AAAA,IAC1B,IAAI;AAAA,IACJ,gBAAgB;AAAA,EAAA,CACjB;AAED,SACG,oBAAA,oBAAoB,UAApB,EAA6B,OAAO,EAAE,kBACrC,GAAA,UAAA,qBAAC,QAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,IAAC,oBAAA,YAAA,EAAW,eAAW,MAAE,UAAM,OAAA;AAAA,IAC9B,aACE,oBAAA,QAAA,EACE,UAAc,cAAA;AAAA,MACb,IAAI;AAAA,MACJ,gBAAgB;AAAA,IACjB,CAAA,GACH;AAAA,IAED,oBAAA,aAAA,EAAY,cAAY,OAAQ,SAAS,CAAA;AAAA,EAAA,EAC5C,CAAA,EACF,CAAA;AAEJ;AAEA,KAAK,YAAY;AAAA,EACf,UAAU,UAAU,UAAU,CAAC,UAAU,QAAQ,UAAU,IAAI,GAAG,UAAU,IAAI,CAAC,EAAE;AACrF;AAEA,MAAM,UAAU,CAAC,EAAE,aAAa,mBAAmB;AACjD,QAAM,EAAE,kBAAsB,IAAA,MAAM,WAAW,mBAAmB;AAE5D,QAAA,EAAE,kBAAkB;AACpB,QAAA,UAAU,WAAW,iBAAiB;AAG1C,SAAA,oBAACC,UACC,EAAA,UAAA,qBAACC,OACC,EAAA,UAAA;AAAA,IAAC,oBAAAC,OAAA,EACC,UAAC,oBAAA,gBAAA,EACE,UAAc,cAAA;AAAA,MACb,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB,GACH,EACF,CAAA;AAAA,IACC,QAAQ,IAAI,CAAC,WAAW;AACvB,UAAI,CAAC,qBAAqB,qBAAqB,EAAE,SAAS,OAAO,EAAE,GAAG;AAElE,eAAA;AAAA,UAACA;AAAAA,UAAA;AAAA,YAEC,OAAO,cAAc;AAAA,cACnB,IAAI;AAAA,cACJ,gBAAgB;AAAA,YAAA,CACjB;AAAA,YAED,UAAA,oBAAC,cAAW,SAAQ,SAAQ,WAAU,cACnC,UAAA,cAAc,MAAM,EACvB,CAAA;AAAA,UAAA;AAAA,UARK,OAAO;AAAA,QAAA;AAAA,MAWlB;AAEA,aACG,oBAAAA,OAAA,EACC,UAAC,oBAAA,YAAA,EAAW,SAAQ,SAAQ,WAAU,cACnC,UAAc,cAAA,MAAM,EACvB,CAAA,KAHO,OAAO,EAIhB;AAAA,IAAA,CAEH;AAAA,EAAA,EACH,CAAA,EACF,CAAA;AAEJ;AAEA,QAAQ,eAAe;AAAA,EACrB,YAAY;AACd;AAEA,QAAQ,YAAY;AAAA,EAClB,YAAY,UAAU;AACxB;AAEA,MAAM,OAAO,CAAC,EAAE,qBAAqB;AACnC,QAAM,EAAE,kBAAsB,IAAA,MAAM,WAAW,mBAAmB;AAE5D,QAAA,SAAS,kBAAkB,YAAY,iBAAiB;AAC9D,QAAM,EAAE,QAAQ,cAAc,aAAa,iBAAiB;AAE5D,QAAM,YAAY;AAClB,QAAM,aAAa,OAAO;AAC1B,QAAM,iBAAiB,CAAA;AAEjB,QAAA,iBAAiB,YAAY,UAAU;AAEvC,QAAA,eAAe,CAAC,EAAE,QAAQ,EAAE,MAAM,MAAA,QAAc;AAChD,QAAA,MAAM,IAAI,IAAI,UAAU;AAE5B,QAAI,OAAO;AACT,UAAI,IAAI,IAAI;AAAA,IAAA,OACP;AACL,UAAI,OAAO,IAAI;AAAA,IACjB;AACS,aAAA,EAAE,QAAQ,EAAE,MAAM,WAAW,OAAO,MAAM,KAAK,GAAG,EAAE,EAAG,CAAA;AAAA,EAAA;AAG5D,QAAA,kBAAkB,CAAC,EAAE,QAAQ,EAAE,MAAM,MAAA,QAAc;AACnD,QAAA,MAAM,IAAI,IAAI,UAAU;AAE5B,QAAI,OAAO;AACT,aAAO,IAAI,EAAE,QAAQ,CAAC,UAAU;AAC9B,YAAI,CAAC,eAAe,SAAS,KAAK,GAAG;AACnC,cAAI,IAAI,KAAK;AAAA,QACf;AAAA,MAAA,CACD;AAAA,IAAA,OACI;AACE,aAAA,IAAI,EAAE,QAAQ,CAAC,UAAU,IAAI,OAAO,KAAK,CAAC;AAAA,IACnD;AACS,aAAA,EAAE,QAAQ,EAAE,MAAM,WAAW,OAAO,MAAM,KAAK,GAAG,EAAE,EAAG,CAAA;AAAA,EAAA;AAIhE,SAAA,oBAACC,UACE,EAAA,UAAA,OAAO,QAAQ,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,KAAK,MAAM;AAE5C,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC;AAAA,QAEA,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,YAAY,eAAe,KAAK;AAAA,QAChC;AAAA,QACA;AAAA,MAAA;AAAA,MALK;AAAA,IAAA;AAAA,EAQV,CAAA,EACH,CAAA;AAEJ;AAEA,KAAK,eAAe;AAAA,EAClB,gBAAgB;AAClB;AAEA,KAAK,YAAY;AAAA,EACf,gBAAgB,UAAU;AAC5B;AAQA,MAAM,4BAA4B,CAAC,QACjC,IACG,QAAQ,MAAM,GAAG,EACjB,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,EAAE,YAAa,CAAA,EACxE,KAAK,GAAG;AAEb,MAAM,WAAW,CAAC,EAAE,gBAAgB,MAAM,QAAQ,YAAY,cAAc,sBAAsB;AAC1F,QAAA,EAAE,kBAAkB;AACpB,QAAA,oBAAoB,OAAO,OAAO,CAAC,UAAU,CAAC,eAAe,SAAS,KAAK,CAAC;AAE5E,QAAA,0BAA0B,WAAW,SAAS;AAC9C,QAAA,2BAA2B,WAAW,WAAW,kBAAkB;AAEnE,QAAA,cAAc,CAAC,EAAE,QAAQ,EAAE,MAAAC,MAAAA,QAAa;AAC5C,UAAM,aAAa,CAAC;AAEJ,oBAAA;AAAA,MACd,QAAQ,EAAE,MAAAA,OAAM,OAAO,WAAW;AAAA,IAAA,CACnC;AAAA,EAAA;AAGH,QAAM,gBAAgB;AAEtB,8BACGH,OACC,EAAA,UAAA;AAAA,IAAA,oBAACI,OACC,EAAA,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,eAAe,2BAA2B,CAAC;AAAA,QAC3C,cAAY,cAAc;AAAA,UACxB,IAAI;AAAA,UACJ,gBAAgB;AAAA,QAAA,CACjB;AAAA,QACD;AAAA,QACA,UAAU;AAAA,QACV,OAAO;AAAA,QAEN,oCAA0B,IAAI;AAAA,MAAA;AAAA,IAAA,GAEnC;AAAA,IAEC,OAAO,IAAI,CAAC,UAAU;AACrB,iCACGA,OACC,EAAA,UAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,UAAU,eAAe,SAAS,KAAK;AAAA,UACvC,cAAY;AAAA,UACZ,MAAM;AAAA,UACN,OAAO,WAAW,SAAS,KAAK;AAAA,UAChC,eAAe,CAAC,UAAU,aAAa,EAAE,QAAQ,EAAE,MAAM,OAAO,MAAM,GAAG;AAAA,QAAA;AAAA,MAAA,KANpE,KAQT;AAAA,IAAA,CAEH;AAAA,IACA,OAAO,SAAS,iBAAiB,oBAACA,SAAG,SAAS,gBAAgB,OAAO,QAAQ;AAAA,EAChF,EAAA,CAAA;AAEJ;AAEA,SAAS,eAAe;AAAA,EACtB,gBAAgB,CAAC;AAAA,EACjB,QAAQ,CAAC;AAAA,EACT,YAAY,CAAC;AAAA,EACb,eAAe;AAAA,EAAC;AAAA,EAChB,kBAAkB;AAAA,EAAC;AACrB;AAEA,SAAS,YAAY;AAAA,EACnB,gBAAgB,UAAU;AAAA,EAC1B,QAAQ,UAAU;AAAA,EAClB,YAAY,UAAU;AAAA,EACtB,cAAc,UAAU;AAAA,EACxB,iBAAiB,UAAU;AAAA,EAC3B,MAAM,UAAU,OAAO;AACzB;AAEA,MAAe,aAAA,EAAE,MAAM,SAAS,MAAM,SAAS;ACvUxC,SAAS,eAAe;AAE3B,SAAA,qBAAC,WAAW,MAAX,EACC,UAAA;AAAA,IAAC,oBAAA,WAAW,SAAX,EAAmB;AAAA,IACpB,oBAAC,WAAW,MAAX,EAAgB;AAAA,EACnB,EAAA,CAAA;AAEJ;ACNA,MAAM,eAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,MAAM,WAAW,CAAC,EAAE,MAAM,UAAU,OAAO,GAAG,YAAY;AAClD,QAAA;AAAA,IACJ,QAAQ,EAAE,QAAQ;AAAA,MAChB,iBAAiB;AACrB,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,YAAY;AAEnD,YAAU,MAAM;AACd;AAAA,MACE,aAAa;AAAA,QACX,CAAC,QAAQ,CAAC,SAAS,KAAK,CAAC,WAAW,OAAO,QAAQ,SAAS,OAAO,QAAQ,GAAG;AAAA,MAChF;AAAA,IAAA;AAAA,EACF,GACC,CAAC,SAAS,KAAK,CAAC;AAEb,QAAA,eAAe,CAACC,WAAU;AAC9B,aAAS,EAAE,QAAQ,EAAE,MAAM,OAAAA,UAAS;AAAA,EAAA;AAGhC,QAAA,qBAAqB,CAACA,WAAU;AACpC,eAAW,CAAC,SAAS,CAAC,GAAG,MAAMA,MAAK,CAAC;AAErC,iBAAaA,MAAK;AAAA,EAAA;AAIlB,SAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACE,GAAG;AAAA,MACJ,SAAS,MAAM,aAAa,EAAE;AAAA,MAC9B,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,aAAY;AAAA,MACZ;AAAA,MAEC,UAAA,QAAQ,IAAI,CAAC,QACZ,oBAAC,kBAAe,OAAO,KACpB,UAD8B,IAAA,GAAA,GAEjC,CACD;AAAA,IAAA;AAAA,EAAA;AAGP;AAEA,SAAS,eAAe;AAAA,EACtB,OAAO;AACT;AAEA,SAAS,YAAY;AAAA,EACnB,MAAM,UAAU,OAAO;AAAA,EACvB,UAAU,UAAU,KAAK;AAAA,EACzB,OAAO,UAAU;AACnB;AC5EA,MAAM,eAAe,MAAM;AACnB,QAAA,EAAE,kBAAkB;AAC1B,QAAM,EAAE,QAAQ,OAAO,IAAI,iBAAiB;AAE5C,8BACG,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,IAAA,oBAAC,cACE,UAAc,cAAA;AAAA,MACb,IAAI;AAAA,MACJ,gBAAgB;AAAA,IACjB,CAAA,GACH;AAAA,wBACC,KAAI,EAAA,SAAS,GAAG,YAAW,cAAa,WAAS,MAChD,UAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,kBAAkB;AAAA,QAClB,MAAK;AAAA,QACL,QAAQ,CAAC,EAAE,MAAM,OACf,MAAA,qBAAC,MAAK,EAAA,KAAK,GACR,UAAA;AAAA,UAAO,OAAA,QAAQ,IAAI,CAAC,QAAQ;AAAA;AAAA,YAE3B,qBAACC,eAAM,UAAN,EACC,UAAA;AAAA,cAAC,oBAAA,UAAA,EAAS,KAAK,GACb,UAAA;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,IAAI;AAAA,kBACJ,MAAM,WAAW,KAAK;AAAA,kBACtB,cAAY,OAAO,QAAQ,CAAC;AAAA,kBAC5B,OAAO,cAAc;AAAA,oBACnB,IAAI;AAAA,oBACJ,gBAAgB;AAAA,kBAAA,CACjB;AAAA,kBACD,OAAO,OAAO,UAAU,KAAK,GAAG,OAAO,OAAO,QAAQ,KAAK,EAAE;AAAA,gBAAA;AAAA,cAAA,GAEjE;AAAA,kCACC,UAAS,EAAA,KAAK,GACb,UAAC,qBAAA,MAAA,EAAK,YAAW,YACf,UAAA;AAAA,gBAAA,oBAAC,KAAI,EAAA,OAAO,EAAE,MAAM,KAClB,UAAA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,IAAI;AAAA,oBACJ,MAAM,WAAW,KAAK;AAAA,oBACtB,cAAY,OAAO,QAAQ,CAAC;AAAA,oBAC5B,OAAO,cAAc;AAAA,sBACnB,IAAI;AAAA,sBACJ,gBAAgB;AAAA,oBAAA,CACjB;AAAA,oBACD,OAAO,OAAO,UAAU,KAAK,GAAG,SAAS,OAAO,QAAQ,KAAK,EAAE;AAAA,kBAAA;AAAA,gBAAA,GAEnE;AAAA,gBACA;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACC,aAAa;AAAA,oBACb,OAAO,EAAE,WAAW,SAAS;AAAA,oBAC7B,YAAY,OAAO,UAAU,KAAK,GAAG,QAAQ,IAAI;AAAA,oBAEjD,UAAA;AAAA,sBAAC;AAAA,sBAAA;AAAA,wBACC,UAAU,OAAO,QAAQ,WAAW;AAAA,wBACpC,SAAS,MAAM,OAAO,KAAK;AAAA,wBAC3B,OAAO;AAAA,0BACL;AAAA,4BACE,IAAI;AAAA,4BACJ,gBAAgB;AAAA,0BAClB;AAAA,0BACA,EAAE,QAAQ,QAAQ,EAAE;AAAA,wBACtB;AAAA,sBAAA;AAAA,oBACF;AAAA,kBAAA;AAAA,gBACF;AAAA,cAAA,EAAA,CACF,EACF,CAAA;AAAA,YAAA,EAAA,GA7CmB,GAAG,KAAK,IAAI,OAAO,GAAG,EA8C3C;AAAA,WACD;AAAA,UACD,oBAAC,UAAS,EAAA,KAAK,IACb,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,SAAS,MAAM;AACb,qBAAK,EAAE,KAAK,IAAI,OAAO,GAAI,CAAA;AAAA,cAC7B;AAAA,cACA,+BAAY,MAAK,EAAA;AAAA,cAEhB,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UAAA,GAEL;AAAA,QAAA,GACF;AAAA,MAAA;AAAA,IAAA,GAGN;AAAA,EACF,EAAA,CAAA;AAEJ;AChGA,MAAM,OAAO,OAAO;AAAA,EAClB,CAAC,EAAE,OAAO,MAAA,MAAY;AAAA,WACb,KAAK,EAAE;AAAA,YACN,KAAK,EAAE;AAAA;AAAA;AAAA,YAGP,MAAM,OAAO,KAAK,CAAC;AAAA;AAAA;AAG/B;AAEA,MAAM,SAAS,CAAC,EAAE,WAAW,iBAAiB;AACtC,QAAA,EAAE,kBAAkB;AAE1B,MAAI,WAAW;AACb,WACG,qBAAA,MAAA,EAAK,KAAK,GAAG,YAAW,UACvB,UAAA;AAAA,MAAC,oBAAA,MAAA,EAAK,IAAIC,SAAQ,CAAA;AAAA,MAClB,oBAAC,cACE,UAAc,cAAA,EAAE,IAAI,qCAAqC,gBAAgB,UAAW,CAAA,GACvF;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEI,MAAA,cAAc,OAAO,aAAa,KAAK;AACzC,WACG,qBAAA,MAAA,EAAK,KAAK,GAAG,YAAW,UACvB,UAAA;AAAA,MAAA,oBAAC,MAAK,EAAA,IAAI,OAAO,OAAM,cAAa;AAAA,MACpC,oBAAC,cACE,UAAc,cAAA,EAAE,IAAI,qCAAqC,gBAAgB,UAAW,CAAA,GACvF;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEA,MAAI,cAAc,KAAK;AACrB,WACG,qBAAA,MAAA,EAAK,KAAK,GAAG,YAAW,UACvB,UAAA;AAAA,MAAA,oBAAC,MAAK,EAAA,IAAI,OAAO,OAAM,aAAY;AAAA,2BAClC,YACE,EAAA,UAAA;AAAA,QAAA,cAAc,EAAE,IAAI,kBAAkB,gBAAgB,SAAS;AAAA,QAAE;AAAA,QAAE;AAAA,MAAA,GACtE;AAAA,IACF,EAAA,CAAA;AAAA,EAEJ;AAEO,SAAA;AACT;AACA,OAAO,YAAY;AAAA,EACjB,WAAW,UAAU,KAAK;AAAA,EAC1B,YAAY,UAAU;AACxB;AACA,OAAO,eAAe;AAAA,EACpB,YAAY;AACd;AAEA,MAAM,UAAU,CAAC,EAAE,YAAY,cAAc;AACrC,QAAA,EAAE,kBAAkB;AAEtB,MAAA,cAAc,OAAO,aAAa,KAAK;AAEvC,WAAA,oBAAC,MAAK,EAAA,gBAAe,YACnB,UAAA,oBAAC,cAAW,WAAU,cAAa,UAAQ,MACxC,UAAc,cAAA;AAAA,MACb,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB,GACH,EACF,CAAA;AAAA,EAEJ;AAEA,MAAI,cAAc,KAAK;AAEnB,WAAA,oBAAC,QAAK,gBAAe,YACnB,8BAAC,MAAK,EAAA,UAAU,QAAQ,GAAG,GAAG,gBAAe,YAAW,OAAO,SAC7D,8BAAC,YAAW,EAAA,UAAQ,MAAC,WAAU,cAC5B,UACH,QAAA,CAAA,EACF,CAAA,EACF,CAAA;AAAA,EAEJ;AAEO,SAAA;AACT;AACA,QAAQ,YAAY;AAAA,EAClB,YAAY,UAAU;AAAA,EACtB,SAAS,UAAU;AACrB;AACA,QAAQ,eAAe;AAAA,EACrB,YAAY;AAAA,EACZ,SAAS;AACX;AAEA,MAAM,eAAe,CAAC,EAAE,eAAe;AAC/B,QAAA,EAAE,kBAAkB;AAE1B,SACG,oBAAA,MAAA,EAAK,gBAAe,YACnB,8BAAC,UAAO,EAAA,SAAS,UAAU,MAAK,UAC9B,UAAC,qBAAA,MAAA,EAAK,KAAK,GAAG,YAAW,UACvB,UAAA;AAAA,IAAC,oBAAA,YAAA,EAAW,WAAU,cACnB,UAAc,cAAA,EAAE,IAAI,oCAAoC,gBAAgB,SAAS,CAAC,EACrF,CAAA;AAAA,IACC,oBAAA,MAAA,EAAK,IAAI,OAAO,OAAM,cAAa;AAAA,EAAA,GACtC,GACF,EACF,CAAA;AAEJ;AAEA,aAAa,YAAY,EAAE,UAAU,UAAU,KAAK,WAAW;AAE/D,MAAM,mBAAmB,CAAC,EAAE,WAAW,UAAU,eAAe;AACxD,QAAA,EAAE,YAAY,QAAY,IAAA;AAC1B,QAAA,EAAE,kBAAkB;AAE1B,6BACG,KAAI,EAAA,YAAW,YAAW,SAAS,GAAG,QAAO,gBAAe,WAAS,MACpE,UAAA,qBAAC,QAAK,KAAK,GAAG,OAAO,EAAE,YAAY,SACjC,GAAA,UAAA;AAAA,IAAA,oBAAC,UAAS,EAAA,KAAK,GACb,UAAA,oBAAC,cACE,UAAc,cAAA;AAAA,MACb,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB,GACH,EACF,CAAA;AAAA,IACA,oBAAC,YAAS,KAAK,GACb,8BAAC,QAAO,EAAA,WAAsB,YAAwB,EACxD,CAAA;AAAA,IACC,oBAAA,UAAA,EAAS,KAAK,GACZ,WAAC,YACA,oBAAC,SAAQ,EAAA,YAAwB,QAAkB,CAAA,IAElD,oBAAA,cAAA,EAAa,SAAoB,CAAA,GAEtC;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AAEA,iBAAiB,eAAe;AAAA,EAC9B,WAAW;AAAA,EACX,WAAW;AAAA,EAAC;AAAA,EACZ,UAAU,CAAC;AACb;AAEA,iBAAiB,YAAY;AAAA,EAC3B,WAAW,UAAU;AAAA,EACrB,UAAU,UAAU;AAAA,EACpB,UAAU,UAAU;AACtB;ACnKA,MAAM,aAAa;AACnB,MAAM,YAAY;AAEL,MAAA,8BAA8B,CAAC,EAAE,cAAA,MAC5C,IAAI,SAAS,MAAM;AAAA,EACjB,MAAM,IACH,OAAA,EACA;AAAA,IACC,cAAc;AAAA,MACZ,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB;AAAA,EAAA,EAEF;AAAA,IACC;AAAA,IACA,cAAc;AAAA,MACZ,IAAI;AAAA,MACJ,gBACE;AAAA,IAAA,CACH;AAAA,EACH;AAAA,EACF,KAAK,IACF,OAAA,EACA;AAAA,IACC,cAAc;AAAA,MACZ,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB;AAAA,EAAA,EAEF;AAAA,IACC;AAAA,IACA,cAAc;AAAA,MACZ,IAAI;AAAA,MACJ,gBAAgB;AAAA,IAAA,CACjB;AAAA,EACH;AAAA,EACF,SAAS,IAAI,KAAK,CAAC,UAAU;AACvB,QAAA,aAAa,IAAI;AAEjB,QAAA,MAAM,WAAW,GAAG;AACtB,YAAM,EAAE,KAAK,MAAM,IAAI,MAAM,CAAC;AAE1B,UAAA,CAAC,OAAO,CAAC,OAAO;AACX,eAAA;AAAA,MACT;AAAA,IACF;AAEA,WAAO,WAAW;AAAA,MAChB,IAAI,OAAO,EAAE,MAAM;AAAA,QACjB,KAAK,IAAI,OAAA,EAAS;AAAA,UAChB,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAAA,CACjB;AAAA,QACH;AAAA,QACA,OAAO,IAAI,OAAA,EAAS;AAAA,UAClB,cAAc;AAAA,YACZ,IAAI;AAAA,YACJ,gBAAgB;AAAA,UAAA,CACjB;AAAA,QACH;AAAA,MAAA,CACD;AAAA,IAAA;AAAA,EACH,CACD;AAAA,EACD,QAAQ,IAAI,MAAM;AACpB,CAAC;AC1CH,MAAM,cAAc,CAAC;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACE,QAAA,EAAE,kBAAkB;AAC1B,QAAM,CAAC,qBAAqB,sBAAsB,IAAI,SAAS,KAAK;AACpE,QAAMC,cAAa;AAAA,IACjB;AAAA,IACA,aAEI,MAAM,OACJ,sBACF,GACA;AAAA,EAAA;AAQA,QAAA,aAAa,CAAC,YAAY;AAC9B,QAAI,CAAC,OAAO,KAAK,OAAO,EAAE,QAAQ;AAChC,aAAO,CAAC,EAAE,KAAK,IAAI,OAAO,GAAI,CAAA;AAAA,IAChC;AAEA,WAAO,OAAO,QAAQ,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,OAAO,EAAE,KAAK,QAAQ;AAAA,EAAA;AAGvE,QAAM,SAAS,UAAU;AAAA,IACvB,eAAe;AAAA,MACb,MAAM,MAAM,QAAQ;AAAA,MACpB,KAAK,MAAM,OAAO;AAAA,MAClB,SAAS,WAAW,MAAM,WAAW,CAAA,CAAE;AAAA,MACvC,QAAQ,MAAM,UAAU,CAAC;AAAA,IAC3B;AAAA,IACA,SAAS,QAAQ,EAAE,WAAW,iBAAiB;AAC7C,mBAAa,MAAM;AAET,gBAAA,EAAE,QAAQ;AACpB,oBAAc,KAAK;AAAA,IACrB;AAAA,IACA,kBAAkB,4BAA4B,EAAE,eAAe;AAAA,IAC/D,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,EAAA,CACjB;AAGD,MAAI,CAACA,aAAY;AACR,WAAA;AAAA,EACT;AAGE,SAAA,oBAAC,kBAAe,OAAO,QACrB,+BAAC,MAAK,EAAA,UAAU,OAAO,cACrB,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,eACE,qBAAC,MAAK,EAAA,KAAK,GACT,UAAA;AAAA,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,SAAS,MAAM;AACE;AACf,uCAAuB,IAAI;AAAA,cAC7B;AAAA,cACA,SAAQ;AAAA,cACR,+BAAYC,MAAQ,EAAA;AAAA,cACpB,UAAU,cAAc;AAAA,cACxB,MAAK;AAAA,cAEJ,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UACH;AAAA,UACA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,+BAAY,OAAM,EAAA;AAAA,cAClB,MAAK;AAAA,cACL,MAAK;AAAA,cACL,UAAU,CAAC,OAAO;AAAA,cAClB,SAAS,OAAO;AAAA,cAEf,UAAc,cAAA;AAAA,gBACb,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,YAAA;AAAA,UACH;AAAA,QAAA,GACF;AAAA,QAEF,OACE,aACI,cAAc;AAAA,UACZ,IAAI;AAAA,UACJ,gBAAgB;AAAA,QAAA,CACjB,IACD,MAAM;AAAA,QAEZ,sCACG,MAAK,EAAA,+BAAY,WAAU,CAAA,CAAA,GAAI,IAAG,sBAChC,UAAc,cAAA;AAAA,UACb,IAAI;AAAA,UACJ,gBAAgB;AAAA,QACjB,CAAA,GACH;AAAA,MAAA;AAAA,IAEJ;AAAA,IACA,oBAAC,iBACC,UAAC,qBAAA,MAAA,EAAK,WAAU,UAAS,YAAW,WAAU,KAAK,GAChD,UAAA;AAAA,MACC,uBAAA;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW;AAAA,UACX,UAAU;AAAA,UACV,UAAU,MAAM,uBAAuB,KAAK;AAAA,QAAA;AAAA,MAC9C;AAAA,0BAED,KAAI,EAAA,YAAW,YAAW,SAAS,GAAG,QAAO,gBAAe,WAAS,MACpE,+BAAC,MAAK,EAAA,WAAU,UAAS,YAAW,WAAU,KAAK,GACjD,UAAA;AAAA,QAAC,qBAAA,MAAA,EAAK,KAAK,GACT,UAAA;AAAA,UAAC,oBAAA,UAAA,EAAS,KAAK,GACb,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,IAAI;AAAA,cACJ,MAAK;AAAA,cACL,OAAO,QAAQ,QAAQ,QAAQ,OAAO,OAAO;AAAA,cAC7C,OAAO,cAAc;AAAA,gBACnB,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,cACD,UAAQ;AAAA,YAAA;AAAA,UAAA,GAEZ;AAAA,UACA,oBAAC,UAAS,EAAA,KAAK,IACb,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,IAAI;AAAA,cACJ,MAAK;AAAA,cACL,OAAO,QAAQ,QAAQ,OAAO,OAAO,OAAO;AAAA,cAC5C,OAAO,cAAc;AAAA,gBACnB,IAAI;AAAA,gBACJ,gBAAgB;AAAA,cAAA,CACjB;AAAA,cACD,UAAQ;AAAA,YAAA;AAAA,UAAA,GAEZ;AAAA,QAAA,GACF;AAAA,4BACC,cAAa,EAAA;AAAA,4BACbD,aAAW,EAAA;AAAA,MAAA,EAAA,CACd,EACF,CAAA;AAAA,IAAA,EAAA,CACF,EACF,CAAA;AAAA,EAAA,EACF,CAAA,EACF,CAAA;AAEJ;AAEA,YAAY,YAAY;AAAA,EACtB,MAAM,UAAU;AAAA,EAChB,cAAc,UAAU,KAAK;AAAA,EAC7B,gBAAgB,UAAU,KAAK;AAAA,EAC/B,YAAY,UAAU,KAAK;AAAA,EAC3B,cAAc,UAAU,KAAK;AAAA,EAC7B,iBAAiB,UAAU;AAC7B;AAEA,YAAY,eAAe;AAAA,EACzB,MAAM;AAAA,EACN,iBAAiB;AACnB;AChLA,MAAM,YAAY,CAAC,UAAU;AAAA,EAC3B,GAAG;AAAA,EACH,SAAS,KAAK,QAAQ,OAAO,CAAC,KAAK,EAAE,KAAK,YAAY;AACpD,QAAI,QAAQ,IAAI;AACd,UAAI,GAAG,IAAI;AAAA,IACb;AAEO,WAAA;AAAA,EACT,GAAG,EAAE;AACP;AAEA,MAAM,WAAW,MAAM;AACf,QAAA;AAAA,IACJ,QAAQ,EAAE,GAAG;AAAA,EAAA,IACX,cAAc,wBAAwB;AAC1C,QAAM,aAAa,OAAO;AAEpB,QAAA,EAAE,YAAY;AACpB,QAAM,qBAAqB;AACrB,QAAA,EAAE,mBAAmB;AAC3B,QAAM,cAAc;AACpB,QAAM,EAAE,WAAW,mBAAmB,IAAI,gBAAgB;AAC1D,QAAM,EAAE,KAAK,KAAK,SAAS,eAAe;AAEpC,QAAA;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,IACN,OAAO;AAAA,EAAA,IACL;AAAA,IACF,CAAC,YAAY,EAAE;AAAA,IACf,YAAY;AACJ,YAAA;AAAA,QACJ,MAAM,EAAE,KAAK;AAAA,MACX,IAAA,MAAM,IAAI,mBAAmB,EAAE,EAAE;AAE9B,aAAA;AAAA,IACT;AAAA,IACA;AAAA,MACE,SAAS,CAAC;AAAA,IACZ;AAAA,EAAA;AAGF,QAAM,UAAU,MAAM;AACpB,QAAI,cAAc;AACG,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,YAAY;AAAA,MAAA,CACrC;AAAA,IACH;AAAA,EACC,GAAA,CAAC,cAAc,oBAAoB,cAAc,CAAC;AAE/C,QAAA;AAAA,IACJ,WAAW;AAAA,IACX,MAAM;AAAA,IACN,QAAQ;AAAA,IACR;AAAA,EAAA,IACE,YAAY,MAAM,KAAK,mBAAmB,EAAE,UAAU,CAAC;AAErD,QAAA,iBAAiB,MACrB,OAAO,MAAM;AAAA,IACX,QAAQ,OAAO;AACM,yBAAA;AAAA,QACjB,MAAM;AAAA,QACN,SAAS,eAAe,KAAK;AAAA,MAAA,CAC9B;AAAA,IACH;AAAA,EAAA,CACD;AAEH,QAAM,wBAAwB,YAAY,CAAC,SAAS,KAAK,mBAAmB,IAAI,CAAC;AAEjF,QAAM,wBAAwB,YAAY,CAAC,EAAE,IAAAE,KAAI,KAAK,MAAM,IAAI,mBAAmBA,GAAE,IAAI,IAAI,CAAC;AAExF,QAAA,eAAe,OAAO,SAAS;AACnC,QAAI,YAAY;AACQ,4BAAA,OAAO,UAAU,IAAI,GAAG;AAAA,QAC5C,UAAU,EAAE,MAAM,UAAU;AACP,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,EAAE,IAAI,4BAA4B;AAAA,UAAA,CAC5C;AACD,kBAAQ,sBAAsB,OAAO,KAAK,EAAE,EAAE;AAAA,QAChD;AAAA,QACA,QAAQ,OAAO;AACM,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,eAAe,KAAK;AAAA,UAAA,CAC9B;AAAA,QACH;AAAA,MAAA,CACD;AAED;AAAA,IACF;AACsB,0BAAA;AAAA,MACpB,EAAE,IAAI,MAAM,UAAU,IAAI,EAAE;AAAA,MAC5B;AAAA,QACE,YAAY;AACV,sBAAY,kBAAkB,CAAC,YAAY,EAAE,CAAC;AAC3B,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,EAAE,IAAI,mCAAmC;AAAA,UAAA,CACnD;AAAA,QACH;AAAA,QACA,QAAQ,OAAO;AACM,6BAAA;AAAA,YACjB,MAAM;AAAA,YACN,SAAS,eAAe,KAAK;AAAA,UAAA,CAC9B;AAAA,QACH;AAAA,MACF;AAAA,IAAA;AAAA,EACF;AAGF,MAAI,aAAa,oBAAoB;AACnC,+BAAQ,sBAAqB,CAAA,CAAA;AAAA,EAC/B;AAEA,8BACG,MACC,EAAA,UAAA;AAAA,IAAC,oBAAA,mBAAA,EAAkB,MAAK,WAAW,CAAA;AAAA,IACnC;AAAA,MAAC;AAAA,MAAA;AAAA,QACE,GAAG;AAAA,UACF,MAAM;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,iBAAiB,iBAAiB,KAAK;AAAA,QACzC;AAAA,MAAA;AAAA,IACF;AAAA,EACF,EAAA,CAAA;AAEJ;"}