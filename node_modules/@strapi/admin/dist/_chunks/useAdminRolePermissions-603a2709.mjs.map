{"version":3,"file":"useAdminRolePermissions-603a2709.mjs","sources":["../../admin/src/pages/SettingsPage/pages/Roles/EditPage/hooks/usePermissionsDataManager.ts","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ConditionsButton/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ConditionsModal/ActionRow/utils/options.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ConditionsModal/ActionRow/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ConditionsModal/utils/createDefaultConditionsForm.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ConditionsModal/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/constants.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/HiddenAction/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/CollapseLabel/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/RowLabelWithCheckbox/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/utils/createArrayOfValues.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/utils/removeConditionKeyFromData.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/utils/getCheckboxState.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/CarretIcon/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/utils/activeStyle.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/Collapse/utils/generateCheckboxesActions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/Collapse/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/RequiredSign/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/utils/getAvailableActions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Curve/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/SubActionRow/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/utils/getRowLabelCheckboxeState.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/Header/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/utils/generateHeadersFromActions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapses/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/GlobalActions/utils/findDisplayedActions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/GlobalActions/utils/getRowLabelCheckboxesState.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/GlobalActions/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypes/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/SubCategory/utils/formatActions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/SubCategory/utils/getConditionsButtonState.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/SubCategory/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/Row/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/index.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/findMatchingPermissions.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/createDefaultCTFormFromLayout.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/createDefaultPluginsFormFromLayout.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/formatLayoutForSettingsAndPlugins.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/init.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/updateConditionsToFalse.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/updateValues.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/reducer.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/formatSettingsPermissionsToAPI.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/formatContentTypesPermissionToAPI.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/formatPermissionsToAPI.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/utils/tabLabels.js","../../admin/src/pages/SettingsPage/pages/Roles/EditPage/components/Permissions/index.js","../../admin/src/pages/SettingsPage/pages/Roles/hooks/useAdminRolePermissionLayout/index.js","../../admin/src/pages/SettingsPage/pages/Roles/hooks/useAdminRolePermissions.ts"],"sourcesContent":["import { createContext } from '@radix-ui/react-context';\n\n// Note: I had to guess most of these types based on the name and usage, but I actually don't\n// know if they are correct, because the usage is very generic. Feel free to correct them if\n// they create problems.\nexport interface PermissionsDataManagerContextValue {\n  availableConditions: unknown[];\n  modifiedData: object;\n  onChangeCollectionTypeLeftActionRowCheckbox: (\n    pathToData: string,\n    propertyName: string,\n    nam: string,\n    value: unknown\n  ) => void;\n  onChangeConditions: (conditions: object) => void;\n  onChangeSimpleCheckbox: (target: { name: string; value: unknown }) => void;\n  onChangeParentCheckbox: (target: { name: string; value: unknown }) => void;\n  onChangeCollectionTypeGlobalActionCheckbox: (\n    kind: string,\n    actionId: string,\n    value: unknown\n  ) => void;\n}\n\nconst [PermissionsDataManagerProvider, usePermissionsDataManagerContext] =\n  createContext<PermissionsDataManagerContextValue>('PermissionsDataManager');\n\nexport const usePermissionsDataManager = () =>\n  usePermissionsDataManagerContext('usePermissionsDataManager');\n\nexport { PermissionsDataManagerProvider };\n","import React from 'react';\n\nimport { Button } from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  ${({ hasConditions, disabled, theme }) =>\n    hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -3px;\n      left: -10px;\n      width: 6px;\n      height: 6px;\n      border-radius: ${20 / 16}rem;;\n      background: ${disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nconst ConditionsButton = ({ onClick, className, hasConditions, variant }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Wrapper hasConditions={hasConditions} className={className}>\n      <Button variant={variant} startIcon={<Cog />} onClick={onClick}>\n        {formatMessage({\n          id: 'global.settings',\n          defaultMessage: 'Settings',\n        })}\n      </Button>\n    </Wrapper>\n  );\n};\n\nConditionsButton.defaultProps = {\n  className: null,\n  hasConditions: false,\n  variant: 'tertiary',\n};\nConditionsButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  hasConditions: PropTypes.bool,\n  variant: PropTypes.string,\n};\n\n// This is a styled component advanced usage :\n// Used to make a ref to a non styled component.\n// https://styled-components.com/docs/advanced#caveat\nexport default styled(ConditionsButton)``;\n","import upperFirst from 'lodash/upperFirst';\n\nconst getSelectedValues = (rawValue) =>\n  Object.values(rawValue)\n    .map((x) =>\n      Object.entries(x)\n        .filter(([, value]) => value)\n        .map(([key]) => key)\n    )\n    .flat();\n\nconst getNestedOptions = (options) =>\n  options.reduce((acc, [label, children]) => {\n    acc.push({\n      label: upperFirst(label),\n      children: children.map((child) => ({\n        label: child.displayName,\n        value: child.id,\n      })),\n    });\n\n    return acc;\n  }, []);\n\nconst getNewStateFromChangedValues = (options, changedValues) =>\n  options\n    .map(([, values]) => values)\n    .flat()\n    .reduce((acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }), {});\n\nexport { getNestedOptions, getNewStateFromChangedValues, getSelectedValues };\n","import React from 'react';\n\nimport { Box, Flex, MultiSelectNested, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { getNestedOptions, getNewStateFromChangedValues, getSelectedValues } from './utils/options';\n\nconst ActionRow = ({\n  arrayOfOptionsGroupedByCategory,\n  isFormDisabled,\n  isGrey,\n  label,\n  name,\n  onChange,\n  value,\n}) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange = (val) => {\n    onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\n  };\n\n  return (\n    <Flex as=\"li\" background={isGrey ? 'neutral100' : 'neutral0'} paddingBottom={3} paddingTop={3}>\n      <Flex paddingLeft={6} style={{ width: 180 }}>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'Settings.permissions.conditions.can',\n            defaultMessage: 'Can',\n          })}\n          &nbsp;\n        </Typography>\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\n          {formatMessage({\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n            defaultMessage: label,\n          })}\n        </Typography>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          &nbsp;\n          {formatMessage({\n            id: 'Settings.permissions.conditions.when',\n            defaultMessage: 'When',\n          })}\n        </Typography>\n      </Flex>\n      <Box style={{ maxWidth: 430, width: '100%' }}>\n        <MultiSelectNested\n          id={name}\n          customizeContent={(values) => `${values.length} currently selected`}\n          onChange={handleChange}\n          value={getSelectedValues(value)}\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\n          disabled={isFormDisabled}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nActionRow.propTypes = {\n  arrayOfOptionsGroupedByCategory: PropTypes.array.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  isGrey: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ActionRow;\n","import get from 'lodash/get';\n\nconst createConditionsForm = (conditions, valueObject) => {\n  return conditions.reduce((acc, current) => {\n    acc[current.id] = get(valueObject, current.id, false);\n\n    return acc;\n  }, {});\n};\n\nconst createCategoryForm = (arrayOfOptions, valueObject) => {\n  return arrayOfOptions.reduce((acc, current) => {\n    const [categoryName, relatedConditions] = current;\n\n    const conditionsForm = createConditionsForm(relatedConditions, valueObject);\n\n    acc[categoryName] = conditionsForm;\n\n    return acc;\n  }, {});\n};\n\nconst createDefaultConditionsForm = (\n  actionsToDisplay,\n  modifiedData,\n  arrayOfOptionsGroupedByCategory\n) => {\n  return actionsToDisplay.reduce((acc, current) => {\n    const valueFromModifiedData = get(\n      modifiedData,\n      [...current.pathToConditionsObject, 'conditions'],\n      {}\n    );\n\n    const categoryDefaultForm = createCategoryForm(\n      arrayOfOptionsGroupedByCategory,\n      valueFromModifiedData\n    );\n\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\n\n    return acc;\n  }, {});\n};\n\nexport default createDefaultConditionsForm;\nexport { createCategoryForm, createConditionsForm };\n","import React, { useMemo, useState } from 'react';\n\nimport {\n  Button,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalLayout,\n  Typography,\n} from '@strapi/design-system';\nimport { Breadcrumbs, Crumb } from '@strapi/design-system/v2';\nimport produce from 'immer';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { usePermissionsDataManager } from '../../hooks/usePermissionsDataManager';\n\nimport ActionRow from './ActionRow';\nimport createDefaultConditionsForm from './utils/createDefaultConditionsForm';\n\nconst ConditionsModal = ({ actions, headerBreadCrumbs, isFormDisabled, onClosed, onToggle }) => {\n  const { formatMessage } = useIntl();\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\n\n  const arrayOfOptionsGroupedByCategory = useMemo(() => {\n    return Object.entries(groupBy(availableConditions, 'category'));\n  }, [availableConditions]);\n\n  const actionsToDisplay = actions.filter(\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\n      isDisplayed && (hasSomeActionsSelected || hasAllActionsSelected)\n  );\n\n  const initState = useMemo(() => {\n    return createDefaultConditionsForm(\n      actionsToDisplay,\n      modifiedData,\n      arrayOfOptionsGroupedByCategory\n    );\n  }, [actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory]);\n\n  const [state, setState] = useState(initState);\n\n  const handleChange = (name, values) => {\n    setState(\n      produce((draft) => {\n        if (!draft[name]) {\n          draft[name] = {};\n        }\n\n        if (!draft[name].default) {\n          draft[name].default = {};\n        }\n\n        draft[name].default = values;\n      })\n    );\n  };\n\n  const handleSubmit = () => {\n    const conditionsWithoutCategory = Object.entries(state).reduce((acc, current) => {\n      const [key, value] = current;\n\n      const merged = Object.values(value).reduce((acc1, current1) => {\n        return { ...acc1, ...current1 };\n      }, {});\n\n      acc[key] = merged;\n\n      return acc;\n    }, {});\n\n    onChangeConditions(conditionsWithoutCategory);\n    onToggle();\n  };\n\n  return (\n    <ModalLayout labelledBy=\"condition-modal-breadcrumbs\" onClose={onClosed}>\n      <ModalHeader>\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\n          {headerBreadCrumbs.map((label, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\n              {upperFirst(\n                formatMessage({\n                  id: label,\n                  defaultMessage: label,\n                })\n              )}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </ModalHeader>\n      <ModalBody>\n        {actionsToDisplay.length === 0 && (\n          <Typography>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.no-actions',\n              defaultMessage:\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\n            })}\n          </Typography>\n        )}\n        <ul>\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\n            const name = pathToConditionsObject.join('..');\n\n            return (\n              <ActionRow\n                key={actionId}\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\n                label={label}\n                isFormDisabled={isFormDisabled}\n                isGrey={index % 2 === 0}\n                name={name}\n                onChange={handleChange}\n                value={get(state, name, {})}\n              />\n            );\n          })}\n        </ul>\n      </ModalBody>\n      <ModalFooter\n        startActions={\n          <Button variant=\"tertiary\" onClick={onToggle}>\n            {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n          </Button>\n        }\n        endActions={\n          <Button onClick={handleSubmit}>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.apply',\n              defaultMessage: 'Apply',\n            })}\n          </Button>\n        }\n      />\n    </ModalLayout>\n  );\n};\n\nConditionsModal.propTypes = {\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      actionId: PropTypes.string.isRequired,\n      checkboxName: PropTypes.string,\n      hasSomeActionsSelected: PropTypes.bool.isRequired,\n      hasAllActionsSelected: PropTypes.bool,\n      isDisplayed: PropTypes.bool.isRequired,\n      label: PropTypes.string,\n    })\n  ).isRequired,\n  headerBreadCrumbs: PropTypes.arrayOf(PropTypes.string).isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  onClosed: PropTypes.func.isRequired,\n  onToggle: PropTypes.func.isRequired,\n};\n\nexport default ConditionsModal;\n","export const cellWidth = `${120 / 16}rem`;\nexport const firstRowWidth = `${200 / 16}rem`;\nexport const rowHeight = `${53 / 16}rem`;\n","import styled from 'styled-components';\n\nimport { cellWidth } from '../Permissions/utils/constants';\n\nconst HiddenAction = styled.div`\n  width: ${cellWidth};\n`;\n\nexport default HiddenAction;\n","import { Flex } from '@strapi/design-system';\nimport styled from 'styled-components';\n\nconst CollapseLabel = styled(Flex)`\n  padding-right: ${({ theme }) => theme.spaces[2]};\n  overflow: hidden;\n  flex: 1;\n  ${({ isCollapsable }) => isCollapsable && 'cursor: pointer;'}\n`;\n\nexport default CollapseLabel;\n","import React, { memo } from 'react';\n\nimport { BaseCheckbox, Box, Flex, Typography } from '@strapi/design-system';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport CollapseLabel from '../CollapseLabel';\nimport { firstRowWidth } from '../Permissions/utils/constants';\n\nconst RowLabelWithCheckbox = ({\n  children,\n  isCollapsable,\n  isActive,\n  isFormDisabled,\n  label,\n  onChange,\n  onClick,\n  checkboxName,\n  someChecked,\n  value,\n}) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex alignItems=\"center\" paddingLeft={6} style={{ width: firstRowWidth, flexShrink: 0 }}>\n      <Box paddingRight={2}>\n        <BaseCheckbox\n          name={checkboxName}\n          aria-label={formatMessage(\n            {\n              id: `Settings.permissions.select-all-by-permission`,\n              defaultMessage: 'Select all {label} permissions',\n            },\n            { label }\n          )}\n          disabled={isFormDisabled}\n          // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n          onValueChange={(value) =>\n            onChange({\n              target: {\n                name: checkboxName,\n                value,\n              },\n            })\n          }\n          indeterminate={someChecked}\n          value={value}\n        />\n      </Box>\n      <CollapseLabel\n        title={label}\n        alignItems=\"center\"\n        isCollapsable={isCollapsable}\n        {...(isCollapsable && {\n          onClick,\n          'aria-expanded': isActive,\n          onKeyDown: ({ key }) => (key === 'Enter' || key === ' ') && onClick(),\n          tabIndex: 0,\n          role: 'button',\n        })}\n      >\n        <Typography\n          fontWeight={isActive ? 'bold' : ''}\n          textColor={isActive ? 'primary600' : 'neutral800'}\n          ellipsis\n        >\n          {upperFirst(label)}\n        </Typography>\n        {children}\n      </CollapseLabel>\n    </Flex>\n  );\n};\n\nRowLabelWithCheckbox.defaultProps = {\n  children: null,\n  checkboxName: '',\n  onChange() {},\n  value: false,\n  someChecked: false,\n  isCollapsable: false,\n};\n\nRowLabelWithCheckbox.propTypes = {\n  checkboxName: PropTypes.string,\n  children: PropTypes.node,\n  label: PropTypes.string.isRequired,\n  isCollapsable: PropTypes.bool,\n  isFormDisabled: PropTypes.bool.isRequired,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func.isRequired,\n  someChecked: PropTypes.bool,\n  value: PropTypes.bool,\n  isActive: PropTypes.bool.isRequired,\n};\n\nexport default memo(RowLabelWithCheckbox);\n","import flattenDeep from 'lodash/flattenDeep';\nimport isObject from 'lodash/isObject';\n\nconst createArrayOfValues = (obj) => {\n  if (!isObject(obj)) {\n    return [];\n  }\n\n  return flattenDeep(\n    Object.values(obj).map((value) => {\n      if (isObject(value)) {\n        return createArrayOfValues(value);\n      }\n\n      return value;\n    })\n  );\n};\n\nexport default createArrayOfValues;\n","const removeConditionKeyFromData = (obj) => {\n  if (!obj) {\n    return null;\n  }\n\n  return Object.keys(obj).reduce((acc, current) => {\n    if (current !== 'conditions') {\n      acc[current] = obj[current];\n    }\n\n    return acc;\n  }, {});\n};\n\nexport default removeConditionKeyFromData;\n","import createArrayOfValues from './createArrayOfValues';\nimport removeConditionKeyFromData from './removeConditionKeyFromData';\n\nconst getCheckboxState = (dataObj) => {\n  const dataWithoutCondition = removeConditionKeyFromData(dataObj);\n\n  const arrayOfValues = createArrayOfValues(dataWithoutCondition);\n\n  if (!arrayOfValues.length) {\n    return { hasAllActionsSelected: false, hasSomeActionsSelected: false };\n  }\n\n  const hasAllActionsSelected = arrayOfValues.every((val) => val);\n  const hasSomeActionsSelected = arrayOfValues.some((val) => val) && !hasAllActionsSelected;\n\n  return { hasAllActionsSelected, hasSomeActionsSelected };\n};\n\nexport default getCheckboxState;\n","import { CarretDown } from '@strapi/icons';\nimport styled from 'styled-components';\n\nconst CarretIcon = styled(CarretDown)`\n  display: none;\n  width: ${10 / 16}rem;\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\n  margin-left: ${({ theme }) => theme.spaces[2]};\n`;\n\nexport default CarretIcon;\n","import { Typography } from '@strapi/design-system';\n\nimport CarretIcon from '../CollapsePropertyMatrix/CarretIcon';\n\nconst activeStyle = (theme) => `\n  ${Typography} {\n    color: ${theme.colors.primary600};\n    font-weight: ${theme.fontWeights.bold}\n  }\n  ${CarretIcon} {\n    display: block;\n    path {\n      fill: ${theme.colors.primary600}\n    };\n  }\n`;\n\nexport default activeStyle;\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { createArrayOfValues, getCheckboxState } from '../../../utils';\n\nconst generateCheckboxesActions = (availableActions, modifiedData, pathToData) => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const checkboxName = checkboxNameArray.join('..');\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const hasConditions = createArrayOfValues(conditionsValue).some((val) => val);\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        actionId,\n        checkboxName,\n        hasAllActionsSelected: value,\n        hasConditions,\n        hasSomeActionsSelected: value,\n        isDisplayed,\n        isParentCheckbox: false,\n        label,\n        pathToConditionsObject: baseCheckboxNameArray,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      actionId,\n      checkboxName,\n      hasAllActionsSelected,\n      hasConditions,\n      hasSomeActionsSelected,\n      isDisplayed,\n      isParentCheckbox: true,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n  });\n};\n\nexport default generateCheckboxesActions;\n","import React, { useMemo, useState } from 'react';\n\nimport { BaseCheckbox, Box, Flex } from '@strapi/design-system';\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { usePermissionsDataManager } from '../../../hooks/usePermissionsDataManager';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport HiddenAction from '../../HiddenAction';\nimport { cellWidth, rowHeight } from '../../Permissions/utils/constants';\nimport RowLabelWithCheckbox from '../../RowLabelWithCheckbox';\nimport { getCheckboxState } from '../../utils';\nimport activeStyle from '../utils/activeStyle';\n\nimport generateCheckboxesActions from './utils/generateCheckboxesActions';\n\nconst activeRowStyle = (theme, isActive) => `\n  ${Wrapper} {\n    background-color: ${theme.colors.primary100};\n    color: ${theme.colors.primary600};\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\n  }\n  ${Chevron} {\n    display: flex;\n  }\n  ${ConditionsButton} {\n    display: block;\n  }\n  &:hover {\n   ${activeStyle(theme)}\n  }\n\n  &:focus-within {\n    ${({ theme, isActive }) => activeRowStyle(theme, isActive)}\n  }\n  \n`;\n\nconst Wrapper = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  height: ${rowHeight};\n  background-color: ${({ isGrey, theme }) =>\n    isGrey ? theme.colors.neutral100 : theme.colors.neutral0};\n  border: 1px solid transparent;\n`;\n\nconst BoxWrapper = styled.div`\n  display: inline-flex;\n  min-width: 100%;\n\n  ${ConditionsButton} {\n    display: none;\n  }\n  ${({ isActive, theme }) => isActive && activeRowStyle(theme, isActive)}\n  &:hover {\n    ${({ theme, isActive }) => activeRowStyle(theme, isActive)}\n  }\n`;\n\nconst Cell = styled(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Chevron = styled(Box)`\n  display: none;\n  svg {\n    width: 11px;\n  }\n  * {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nconst TinyDot = styled.span`\n  position: absolute;\n  top: -6px;\n  left: 37px;\n  width: 6px;\n  height: 6px;\n  border-radius: 20px;\n  background: ${({ theme }) => theme.colors.primary600};\n`;\n\nconst AbsoluteBox = styled(Box)`\n  position: absolute;\n  right: 9px;\n  transform: translateY(10px);\n`;\n\nconst Collapse = ({\n  availableActions,\n  isActive,\n  isGrey,\n  isFormDisabled,\n  label,\n  onClickToggle,\n  pathToData,\n}) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n\n  const handleToggleModalIsOpen = () => {\n    setModalOpen((s) => !s);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = useMemo(() => {\n    return Object.keys(mainData).reduce((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  const doesConditionButtonHasConditions = checkboxesActions.some(\n    ({ hasConditions }) => hasConditions\n  );\n\n  return (\n    <BoxWrapper isActive={isActive}>\n      <Wrapper isGrey={isGrey}>\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={label}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n          isActive={isActive}\n        >\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({\n              actionId,\n              hasConditions,\n              hasAllActionsSelected,\n              hasSomeActionsSelected,\n              isDisplayed,\n              isParentCheckbox,\n              checkboxName,\n              label: permissionLabel,\n            }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              if (isParentCheckbox) {\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    {hasConditions && <TinyDot />}\n                    <BaseCheckbox\n                      disabled={isFormDisabled}\n                      name={checkboxName}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${permissionLabel} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onValueChange={(value) => {\n                        onChangeParentCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value,\n                          },\n                        });\n                      }}\n                      indeterminate={hasSomeActionsSelected}\n                      value={hasAllActionsSelected}\n                    />\n                  </Cell>\n                );\n              }\n\n              return (\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                  {hasConditions && <TinyDot />}\n                  <BaseCheckbox\n                    disabled={isFormDisabled}\n                    indeterminate={hasConditions}\n                    name={checkboxName}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onValueChange={(value) => {\n                      onChangeSimpleCheckbox({\n                        target: {\n                          name: checkboxName,\n                          value,\n                        },\n                      });\n                    }}\n                    value={hasAllActionsSelected}\n                  />\n                </Cell>\n              );\n            }\n          )}\n        </Flex>\n        {isModalOpen && (\n          <ConditionsModal\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\n            actions={checkboxesActions}\n            isFormDisabled={isFormDisabled}\n            onClosed={handleModalClose}\n            onToggle={handleToggleModalIsOpen}\n          />\n        )}\n      </Wrapper>\n      <AbsoluteBox>\n        <ConditionsButton\n          onClick={handleToggleModalIsOpen}\n          hasConditions={doesConditionButtonHasConditions}\n        />\n      </AbsoluteBox>\n    </BoxWrapper>\n  );\n};\n\nCollapse.propTypes = {\n  availableActions: PropTypes.array.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  isGrey: PropTypes.bool.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  onClickToggle: PropTypes.func.isRequired,\n  pathToData: PropTypes.string.isRequired,\n};\n\nexport default Collapse;\n","import React from 'react';\n\nimport styled from 'styled-components';\n\nconst Required = styled.span`\n  color: ${({ theme }) => theme.colors.danger700};\n  padding-left: ${({ theme }) => theme.spaces[1]}px;\n`;\n\nconst RequiredSign = () => <Required>*</Required>;\n\nexport default RequiredSign;\n","const getAvailableActions = (actions, targetSubject) => {\n  return actions.map((action) => {\n    const isDisplayed =\n      Array.isArray(action.subjects) && action.subjects.indexOf(targetSubject) !== -1;\n\n    return { ...action, isDisplayed };\n  });\n};\n\nexport default getAvailableActions;\n","import React, { memo } from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledBox = styled(Box)`\n  transform: translate(-4px, -12px);\n\n  &:before {\n    content: '';\n    width: ${4 / 16}rem;\n    height: ${12 / 16}rem;\n    background: ${({ theme }) => theme.colors.primary200};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, color }) => theme.colors[color]};\n  }\n`;\n\nconst Curve = (props) => (\n  <StyledBox>\n    <Svg\n      width=\"20\"\n      height=\"23\"\n      viewBox=\"0 0 20 23\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n        fill=\"#D9D8FF\"\n      />\n    </Svg>\n  </StyledBox>\n);\n\nCurve.defaultProps = {\n  fill: 'primary200',\n};\nCurve.propTypes = {\n  fill: PropTypes.string,\n};\n\nexport default memo(Curve);\n","import React, { memo, useMemo, useState } from 'react';\n\nimport { BaseCheckbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { usePermissionsDataManager } from '../../../../hooks/usePermissionsDataManager';\nimport CollapseLabel from '../../../CollapseLabel';\nimport Curve from '../../../Curve';\nimport HiddenAction from '../../../HiddenAction';\nimport { cellWidth, rowHeight } from '../../../Permissions/utils/constants';\nimport RequiredSign from '../../../RequiredSign';\nimport { getCheckboxState } from '../../../utils';\nimport { activeStyle } from '../../utils';\nimport CarretIcon from '../CarretIcon';\n\nconst Cell = styled(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst RowWrapper = styled(Flex)`\n  height: ${rowHeight};\n`;\n\nconst Wrapper = styled(Box)`\n  padding-left: ${31 / 16}rem;\n`;\n\nconst LeftBorderTimeline = styled(Box)`\n  border-left: ${({ isVisible, theme }) =>\n    isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\n`;\n\nconst RowStyle = styled(Flex)`\n  padding-left: ${({ theme }) => theme.spaces[4]};\n  width: ${({ level }) => 145 - level * 36}px;\n\n  ${({ isCollapsable, theme }) =>\n    isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: block;\n        color: ${theme.colors.neutral100};\n      }\n      &:hover {\n        ${activeStyle(theme)}\n      }\n  `}\n  ${({ isActive, theme }) => isActive && activeStyle(theme)};\n`;\n\nconst TopTimeline = styled.div`\n  padding-top: ${({ theme }) => theme.spaces[2]};\n  margin-top: ${({ theme }) => theme.spaces[2]};\n  width: ${4 / 16}rem;\n  background-color: ${({ theme }) => theme.colors.primary200};\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n`;\n\nconst SubActionRow = ({\n  childrenForm,\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = useState(null);\n\n  const handleClickToggleSubLevel = (name) => {\n    setRowToOpen((prev) => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Wrapper>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} isVisible={isVisible}>\n            <RowWrapper>\n              <Curve color=\"primary200\" />\n              <Flex style={{ flex: 1 }}>\n                <RowStyle level={recursiveLevel} isActive={isActive} isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    isCollapsable={isArrayType}\n                    {...(isArrayType && {\n                      onClick: () => handleClickToggleSubLevel(value),\n                      'aria-expanded': isActive,\n                      onKeyDown: ({ key }) =>\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\n                      tabIndex: 0,\n                      role: 'button',\n                    })}\n                    title={label}\n                  >\n                    <Typography ellipsis>{upperFirst(label)}</Typography>\n                    {required && <RequiredSign />}\n                    <CarretIcon $isActive={isActive} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\n                      if (!isActionRelatedToCurrentProperty) {\n                        return <HiddenAction key={actionId} />;\n                      }\n                      /*\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                       */\n                      const checkboxName = [\n                        ...pathToDataFromActionRow.split('..'),\n                        actionId,\n                        'properties',\n                        propertyName,\n                        ...parentName.split('..'),\n                        value,\n                      ];\n\n                      const checkboxValue = get(modifiedData, checkboxName, false);\n\n                      if (!subChildrenForm) {\n                        return (\n                          <Cell key={propertyLabel} justifyContent=\"center\" alignItems=\"center\">\n                            <BaseCheckbox\n                              disabled={isFormDisabled}\n                              name={checkboxName.join('..')}\n                              aria-label={formatMessage(\n                                {\n                                  id: `Settings.permissions.select-by-permission`,\n                                  defaultMessage: 'Select {label} permission',\n                                },\n                                { label: `${parentName} ${label} ${propertyLabel}` }\n                              )}\n                              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                              onValueChange={(value) => {\n                                onChangeSimpleCheckbox({\n                                  target: {\n                                    name: checkboxName.join('..'),\n                                    value,\n                                  },\n                                });\n                              }}\n                              value={checkboxValue}\n                            />\n                          </Cell>\n                        );\n                      }\n\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\n                        getCheckboxState(checkboxValue);\n\n                      return (\n                        <Cell key={propertyLabel} justifyContent=\"center\" alignItems=\"center\">\n                          <BaseCheckbox\n                            key={propertyLabel}\n                            disabled={isFormDisabled}\n                            name={checkboxName.join('..')}\n                            aria-label={formatMessage(\n                              {\n                                id: `Settings.permissions.select-by-permission`,\n                                defaultMessage: 'Select {label} permission',\n                              },\n                              { label: `${parentName} ${label} ${propertyLabel}` }\n                            )}\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                            onValueChange={(value) => {\n                              onChangeParentCheckbox({\n                                target: {\n                                  name: checkboxName.join('..'),\n                                  value,\n                                },\n                              });\n                            }}\n                            value={hasAllActionsSelected}\n                            indeterminate={hasSomeActionsSelected}\n                          />\n                        </Cell>\n                      );\n                    }\n                  )}\n                </Flex>\n              </Flex>\n            </RowWrapper>\n            {displayedRecursiveChildren && isActive && (\n              <Box paddingBottom={2}>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </Box>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nSubActionRow.propTypes = {\n  childrenForm: PropTypes.array.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  parentName: PropTypes.string.isRequired,\n  pathToDataFromActionRow: PropTypes.string.isRequired,\n  propertyActions: PropTypes.array.isRequired,\n  propertyName: PropTypes.string.isRequired,\n  recursiveLevel: PropTypes.number.isRequired,\n};\n\nexport default memo(SubActionRow);\n","import get from 'lodash/get';\n\nimport { getCheckboxState } from '../../../../utils';\n\n/**\n * Returns a filtered array of actionId\n * @param {array<object>} propertyActions\n * @returns {string} actionId\n */\nconst getActionIdsFromPropertyActions = (propertyActions) => {\n  const actionIds = propertyActions.reduce((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  return actionIds;\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n * @param {array} propertyActions\n * @param {object} modifiedData\n * @param {string} pathToContentType\n * @param {string} propertyToCheck\n * @param {string} targetKey\n * @returns {object}\n */\nconst getRowLabelCheckboxeState = (\n  propertyActions,\n  modifiedData,\n  pathToContentType,\n  propertyToCheck,\n  targetKey\n) => {\n  const actionIds = getActionIdsFromPropertyActions(propertyActions);\n\n  const data = actionIds.reduce((acc, current) => {\n    const pathToData = [\n      ...pathToContentType.split('..'),\n      current,\n      'properties',\n      propertyToCheck,\n      targetKey,\n    ];\n    const mainData = get(modifiedData, pathToData, false);\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nexport default getRowLabelCheckboxeState;\nexport { getActionIdsFromPropertyActions };\n","import React, { memo, useCallback, useMemo, useState } from 'react';\n\nimport { BaseCheckbox, Flex } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { usePermissionsDataManager } from '../../../../hooks/usePermissionsDataManager';\nimport HiddenAction from '../../../HiddenAction';\nimport { cellWidth, rowHeight } from '../../../Permissions/utils/constants';\nimport RequiredSign from '../../../RequiredSign';\nimport RowLabelWithCheckbox from '../../../RowLabelWithCheckbox';\nimport { getCheckboxState } from '../../../utils';\nimport { activeStyle } from '../../utils';\nimport CarretIcon from '../CarretIcon';\nimport SubActionRow from '../SubActionRow';\n\nimport getRowLabelCheckboxeState from './utils/getRowLabelCheckboxeState';\n\nconst Cell = styled(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Wrapper = styled(Flex)`\n  height: ${rowHeight};\n  flex: 1;\n\n  ${({ isCollapsable, theme }) =>\n    isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: block;\n        color: ${theme.colors.neutral100};\n      }\n      &:hover {\n        ${activeStyle(theme)}\n      }\n  `}\n  ${({ isActive, theme }) => isActive && activeStyle(theme)};\n`;\n\nconst ActionRow = ({\n  childrenForm,\n  label,\n  isFormDisabled,\n  name,\n  required,\n  pathToData,\n  propertyActions,\n  propertyName,\n  isOdd,\n}) => {\n  const { formatMessage } = useIntl();\n  const [rowToOpen, setRowToOpen] = useState(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen((prev) => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox = ({ target: { value } }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = useMemo(() => {\n    return getRowLabelCheckboxeState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper\n        alignItems=\"center\"\n        isCollapsable={isCollapsable}\n        isActive={isActive}\n        background={isOdd ? 'neutral100' : 'neutral0'}\n      >\n        <Flex>\n          <RowLabelWithCheckbox\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n            isActive={isActive}\n          >\n            {required && <RequiredSign />}\n            <CarretIcon $isActive={isActive} />\n          </RowLabelWithCheckbox>\n          <Flex>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    <BaseCheckbox\n                      disabled={isFormDisabled}\n                      name={checkboxName.join('..')}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${name} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onValueChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName.join('..'),\n                            value,\n                          },\n                        });\n                      }}\n                      value={checkboxValue}\n                    />\n                  </Cell>\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <Cell key={label} justifyContent=\"center\" alignItems=\"center\">\n                  <BaseCheckbox\n                    disabled={isFormDisabled}\n                    name={checkboxName.join('..')}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onValueChange={(value) => {\n                      onChangeParentCheckbox({\n                        target: {\n                          name: checkboxName.join('..'),\n                          value,\n                        },\n                      });\n                    }}\n                    aria-label={formatMessage(\n                      {\n                        id: `Settings.permissions.select-by-permission`,\n                        defaultMessage: 'Select {label} permission',\n                      },\n                      { label: `${name} ${label}` }\n                    )}\n                    value={hasAllActionsSelected}\n                    indeterminate={hasSomeActionsSelected}\n                  />\n                </Cell>\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\nActionRow.defaultProps = {\n  childrenForm: [],\n  required: false,\n};\n\nActionRow.propTypes = {\n  childrenForm: PropTypes.array,\n  label: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  propertyActions: PropTypes.array.isRequired,\n  propertyName: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  isOdd: PropTypes.bool.isRequired,\n};\n\nexport default memo(ActionRow);\n","import React from 'react';\n\nimport { Flex, Typography } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { cellWidth, firstRowWidth, rowHeight } from '../../../Permissions/utils/constants';\n\nconst HeaderLabel = styled(Flex)`\n  width: ${cellWidth};\n  flex-shrink: 0;\n`;\nconst PropertyLabelWrapper = styled(Flex)`\n  width: ${firstRowWidth};\n  height: ${rowHeight};\n  flex-shrink: 0;\n`;\n\nconst Header = ({ headers, label }) => {\n  const { formatMessage } = useIntl();\n  const translatedLabel = formatMessage(\n    {\n      id: 'Settings.roles.form.permission.property-label',\n      defaultMessage: '{label} permissions',\n    },\n    { label }\n  );\n\n  return (\n    <Flex>\n      <PropertyLabelWrapper alignItems=\"center\" paddingLeft={6}>\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\n          {translatedLabel}\n        </Typography>\n      </PropertyLabelWrapper>\n      {headers.map((header) => {\n        if (!header.isActionRelatedToCurrentProperty) {\n          return <HeaderLabel key={header.label} />;\n        }\n\n        return (\n          <HeaderLabel justifyContent=\"center\" key={header.label}>\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\n              {formatMessage({\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\n                defaultMessage: header.label,\n              })}\n            </Typography>\n          </HeaderLabel>\n        );\n      })}\n    </Flex>\n  );\n};\n\nHeader.propTypes = {\n  headers: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      isActionRelatedToCurrentProperty: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","const generateHeadersFromActions = (actions, propertyName) => {\n  return actions.map((action) => {\n    const isActionRelatedToCurrentProperty =\n      Array.isArray(action.applyToProperties) &&\n      action.applyToProperties.indexOf(propertyName) !== -1 &&\n      action.isDisplayed;\n\n    return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\n  });\n};\n\nexport default generateHeadersFromActions;\n","import React, { useMemo } from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport ActionRow from './ActionRow';\nimport Header from './Header';\nimport generateHeadersFromActions from './utils/generateHeadersFromActions';\n\nconst Wrapper = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  min-width: 0;\n`;\n\nconst CollapsePropertyMatrix = ({\n  availableActions,\n  childrenForm,\n  isFormDisabled,\n  label,\n  pathToData,\n  propertyName,\n}) => {\n  const propertyActions = useMemo(\n    () => generateHeadersFromActions(availableActions, propertyName),\n    [availableActions, propertyName]\n  );\n\n  return (\n    <Wrapper>\n      <Header label={label} headers={propertyActions} />\n      <Box>\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\n          <ActionRow\n            childrenForm={childrenForm}\n            key={value}\n            label={label}\n            isFormDisabled={isFormDisabled}\n            name={value}\n            required={required}\n            propertyActions={propertyActions}\n            pathToData={pathToData}\n            propertyName={propertyName}\n            isOdd={i % 2 === 0}\n          />\n        ))}\n      </Box>\n    </Wrapper>\n  );\n};\n\nCollapsePropertyMatrix.propTypes = {\n  childrenForm: PropTypes.array.isRequired,\n  availableActions: PropTypes.array.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  propertyName: PropTypes.string.isRequired,\n};\n\nexport default CollapsePropertyMatrix;\n","import React, { useCallback, useMemo } from 'react';\n\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Collapse from './Collapse';\nimport CollapsePropertyMatrix from './CollapsePropertyMatrix';\nimport { getAvailableActions } from './utils';\n\nconst Wrapper = styled.div`\n  flex-direction: column;\n  display: inline-flex;\n  min-width: 100%;\n  ${({ theme, isActive }) => isActive && `border: 1px solid ${theme.colors.primary600};`}\n`;\n\nconst ContentTypeCollapse = ({\n  allActions,\n  contentTypeName,\n  label,\n  index,\n  isActive,\n  isFormDisabled,\n  onClickToggleCollapse,\n  pathToData,\n  properties,\n}) => {\n  const handleClickToggleCollapse = useCallback(() => {\n    onClickToggleCollapse(contentTypeName);\n  }, [contentTypeName, onClickToggleCollapse]);\n\n  const availableActions = useMemo(() => {\n    return getAvailableActions(allActions, contentTypeName);\n  }, [allActions, contentTypeName]);\n\n  return (\n    <Wrapper isActive={isActive}>\n      <Collapse\n        availableActions={availableActions}\n        isActive={isActive}\n        isGrey={index % 2 === 0}\n        isFormDisabled={isFormDisabled}\n        label={label}\n        onClickToggle={handleClickToggleCollapse}\n        pathToData={pathToData}\n      />\n      {isActive &&\n        properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\n          return (\n            <CollapsePropertyMatrix\n              availableActions={availableActions}\n              childrenForm={childrenForm}\n              isFormDisabled={isFormDisabled}\n              label={propertyLabel}\n              pathToData={pathToData}\n              propertyName={value}\n              key={value}\n            />\n          );\n        })}\n    </Wrapper>\n  );\n};\n\nContentTypeCollapse.propTypes = {\n  allActions: PropTypes.array.isRequired,\n  contentTypeName: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  onClickToggleCollapse: PropTypes.func.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  properties: PropTypes.array.isRequired,\n};\n\nexport default ContentTypeCollapse;\n","import React, { memo, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport ContentTypeCollapse from '../ContentTypeCollapse';\n\nconst ContentTypeCollapses = ({ actions, isFormDisabled, pathToData, subjects }) => {\n  const [collapseToOpen, setCollapseToOpen] = useState(null);\n\n  const handleClickToggleCollapse = (collapseName) => {\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\n\n    setCollapseToOpen(nextCollapseToOpen);\n  };\n\n  return subjects.map(({ uid, label, properties }, index) => {\n    return (\n      <ContentTypeCollapse\n        allActions={actions}\n        key={uid}\n        contentTypeName={uid}\n        label={label}\n        isActive={collapseToOpen === uid}\n        isFormDisabled={isFormDisabled}\n        index={index}\n        onClickToggleCollapse={handleClickToggleCollapse}\n        pathToData={`${pathToData}..${uid}`}\n        properties={properties}\n      />\n    );\n  });\n};\n\nContentTypeCollapses.defaultProps = {\n  actions: [],\n  subjects: [],\n};\n\nContentTypeCollapses.propTypes = {\n  actions: PropTypes.array.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  subjects: PropTypes.arrayOf(\n    PropTypes.shape({\n      uid: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      properties: PropTypes.array.isRequired,\n    })\n  ),\n};\n\nexport default memo(ContentTypeCollapses);\n","const findDisplayedActions = (actions) =>\n  actions.filter(({ subjects }) => subjects && subjects.length);\n\nexport default findDisplayedActions;\n","import get from 'lodash/get';\n\nimport { getCheckboxState, removeConditionKeyFromData } from '../../utils';\n\nconst getActionsIds = (array) => array.map(({ actionId }) => actionId);\n\nconst getRelatedActionIdData = (actionIdArray, dataObj) => {\n  return actionIdArray.reduce((acc, actionId) => {\n    Object.keys(dataObj).forEach((ctUid) => {\n      const actionIdData = get(dataObj, [ctUid, actionId], {});\n\n      const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData) };\n\n      if (!acc[actionId]) {\n        acc[actionId] = actionIdState;\n      } else {\n        acc[actionId] = { ...acc[actionId], ...actionIdState };\n      }\n    });\n\n    return acc;\n  }, {});\n};\n\nconst getCheckboxesState = (properties, modifiedData) => {\n  const actionsIds = getActionsIds(properties);\n  const relatedActionsData = getRelatedActionIdData(actionsIds, modifiedData);\n\n  const checkboxesState = Object.keys(relatedActionsData).reduce((acc, current) => {\n    acc[current] = getCheckboxState(relatedActionsData[current]);\n\n    return acc;\n  }, {});\n\n  return checkboxesState;\n};\n\nexport default getCheckboxesState;\nexport { getActionsIds, getRelatedActionIdData };\n","import React, { memo, useMemo } from 'react';\n\nimport { BaseCheckbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { usePermissionsDataManager } from '../../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth } from '../Permissions/utils/constants';\n\nimport { findDisplayedActions, getCheckboxesState } from './utils';\n\nconst CenteredStack = styled(Flex)`\n  width: ${cellWidth};\n  flex-shrink: 0;\n`;\n\nconst GlobalActions = ({ actions, isFormDisabled, kind }) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\n\n  const displayedActions = useMemo(() => {\n    return findDisplayedActions(actions);\n  }, [actions]);\n\n  const checkboxesState = useMemo(() => {\n    return getCheckboxesState(displayedActions, modifiedData[kind]);\n  }, [modifiedData, displayedActions, kind]);\n\n  return (\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\n      <Flex gap={0}>\n        {displayedActions.map(({ label, actionId }) => {\n          return (\n            <CenteredStack\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={actionId}\n              gap={3}\n            >\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                  defaultMessage: label,\n                })}\n              </Typography>\n              <BaseCheckbox\n                disabled={isFormDisabled}\n                onValueChange={(value) => {\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, value);\n                }}\n                name={actionId}\n                aria-label={formatMessage(\n                  {\n                    id: `Settings.permissions.select-all-by-permission`,\n                    defaultMessage: 'Select all {label} permissions',\n                  },\n                  {\n                    label: formatMessage({\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                      defaultMessage: label,\n                    }),\n                  }\n                )}\n                value={get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)}\n                indeterminate={get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)}\n              />\n            </CenteredStack>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n\nGlobalActions.defaultProps = {\n  actions: [],\n};\n\nGlobalActions.propTypes = {\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      actionId: PropTypes.string.isRequired,\n      subjects: PropTypes.array.isRequired,\n    })\n  ),\n  isFormDisabled: PropTypes.bool.isRequired,\n  kind: PropTypes.string.isRequired,\n};\n\nexport default memo(GlobalActions);\n","import React, { memo } from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport sortBy from 'lodash/sortBy';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport ContentTypeCollapses from '../ContentTypeCollapses';\nimport GlobalActions from '../GlobalActions';\n\nconst StyledBox = styled(Box)`\n  overflow-x: auto;\n`;\n\nconst ContentTypes = ({ isFormDisabled, kind, layout: { actions, subjects } }) => {\n  const sortedSubjects = sortBy([...subjects], 'label');\n\n  return (\n    <StyledBox background=\"neutral0\">\n      <GlobalActions actions={actions} kind={kind} isFormDisabled={isFormDisabled} />\n      <ContentTypeCollapses\n        actions={actions}\n        isFormDisabled={isFormDisabled}\n        pathToData={kind}\n        subjects={sortedSubjects}\n      />\n    </StyledBox>\n  );\n};\n\nContentTypes.propTypes = {\n  isFormDisabled: PropTypes.bool.isRequired,\n  kind: PropTypes.string.isRequired,\n  layout: PropTypes.shape({\n    actions: PropTypes.array,\n    subjects: PropTypes.arrayOf(\n      PropTypes.shape({\n        uid: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        properties: PropTypes.array.isRequired,\n      })\n    ),\n  }).isRequired,\n};\n\nexport default memo(ContentTypes);\n","import get from 'lodash/get';\n\nimport { createArrayOfValues } from '../../../utils';\n\n/**\n * We need to format the actions to an array of object that matches the ConditionsModal action's props\n * @param {array<object>} actions\n * @config {string} displayName the displayName of the action\n * @config {string} action requied, the name of the action\n * @param {object} modifiedData\n * @param {array} pathToData\n */\nconst formatActions = (actions, modifiedData, pathToData) => {\n  return actions.map((action) => {\n    const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n    const checkboxValue = get(modifiedData, checkboxName, false);\n    const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n    const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\n\n    return {\n      ...action,\n      isDisplayed: checkboxValue,\n      checkboxName: checkboxName.join('..'),\n      hasSomeActionsSelected: checkboxValue,\n      value: checkboxValue,\n      hasConditions,\n      label: action.displayName,\n      actionId: action.action,\n      pathToConditionsObject: [...pathToData, action.action],\n    };\n  });\n};\nexport default formatActions;\n","import { createArrayOfValues } from '../../../utils';\n\nconst getConditionsButtonState = (valueObj) => {\n  const relatedData = Object.entries(valueObj).reduce((acc, current) => {\n    const [catName, { conditions }] = current;\n\n    acc[catName] = conditions;\n\n    return acc;\n  }, {});\n\n  const arrayOfValues = createArrayOfValues(relatedData);\n\n  return arrayOfValues.some((val) => val);\n};\n\nexport default getConditionsButtonState;\n","import React, { useMemo, useState } from 'react';\n\nimport { Box, Checkbox, Flex, Grid, GridItem, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport { usePermissionsDataManager } from '../../../hooks/usePermissionsDataManager';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport { getCheckboxState, removeConditionKeyFromData } from '../../utils';\n\nimport { formatActions, getConditionsButtonState } from './utils';\n\nconst Border = styled.div`\n  flex: 1;\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst CheckboxWrapper = styled.div`\n  position: relative;\n  word-break: keep-all;\n  ${({ hasConditions, disabled, theme }) =>\n    hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: ${-4 / 16}rem;\n      left: ${-8 / 16}rem;\n      width: ${6 / 16}rem;\n      height: ${6 / 16}rem;\n      border-radius: ${20 / 16}rem;\n      background: ${disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nconst SubCategory = ({ categoryName, isFormDisabled, subCategoryName, actions, pathToData }) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n  const dataWithoutCondition = useMemo(() => {\n    return Object.keys(mainData).reduce((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current]);\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  const handleToggleModalIsOpen = () => {\n    setModalOpen((s) => !s);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n  };\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = formatActions(actions, modifiedData, pathToData);\n  const doesButtonHasCondition = getConditionsButtonState(get(modifiedData, [...pathToData], {}));\n\n  return (\n    <>\n      <Box>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Box paddingRight={4}>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {subCategoryName}\n            </Typography>\n          </Box>\n          <Border />\n          <Box paddingLeft={4}>\n            <Checkbox\n              name={pathToData.join('..')}\n              disabled={isFormDisabled}\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n              onValueChange={(value) => {\n                onChangeParentCheckbox({\n                  target: {\n                    name: pathToData.join('..'),\n                    value,\n                  },\n                });\n              }}\n              indeterminate={hasSomeActionsSelected}\n              value={hasAllActionsSelected}\n            >\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n            </Checkbox>\n          </Box>\n        </Flex>\n        <Flex paddingTop={6} paddingBottom={6}>\n          <Grid gap={2} style={{ flex: 1 }}>\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <GridItem col={3} key={action}>\n                  <CheckboxWrapper disabled={isFormDisabled} hasConditions={hasConditions}>\n                    <Checkbox\n                      name={checkboxName}\n                      disabled={isFormDisabled}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onValueChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value,\n                          },\n                        });\n                      }}\n                      value={value}\n                    >\n                      {displayName}\n                    </Checkbox>\n                  </CheckboxWrapper>\n                </GridItem>\n              );\n            })}\n          </Grid>\n          <ConditionsButton\n            hasConditions={doesButtonHasCondition}\n            onClick={handleToggleModalIsOpen}\n          />\n        </Flex>\n      </Box>\n      {isModalOpen && (\n        <ConditionsModal\n          headerBreadCrumbs={[categoryName, subCategoryName]}\n          actions={formattedActions}\n          isFormDisabled={isFormDisabled}\n          onClosed={handleModalClose}\n          onToggle={handleToggleModalIsOpen}\n        />\n      )}\n    </>\n  );\n};\n\nSubCategory.propTypes = {\n  actions: PropTypes.array.isRequired,\n  categoryName: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  subCategoryName: PropTypes.string.isRequired,\n  pathToData: PropTypes.array.isRequired,\n};\n\nexport default SubCategory;\n","import React, { useMemo } from 'react';\n\nimport { Accordion, AccordionContent, AccordionToggle, Box } from '@strapi/design-system';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport SubCategory from '../SubCategory';\n\nconst PermissionRow = ({\n  childrenForm,\n  kind,\n  name,\n  isOpen,\n  isFormDisabled,\n  isWhite,\n  onOpenCategory,\n  pathToData,\n}) => {\n  const { formatMessage } = useIntl();\n  const handleClick = () => {\n    onOpenCategory(name);\n  };\n\n  const categoryName = useMemo(() => {\n    const split = name.split('::');\n\n    return split.pop();\n  }, [name]);\n\n  return (\n    <Accordion\n      expanded={isOpen}\n      onToggle={handleClick}\n      id={`accordion-${name}`}\n      variant={isWhite ? 'primary' : 'secondary'}\n    >\n      <AccordionToggle\n        title={upperFirst(categoryName)}\n        description={`${formatMessage(\n          { id: 'Settings.permissions.category' },\n          { category: categoryName }\n        )} ${kind === 'plugins' ? 'plugin' : kind}`}\n      />\n\n      <AccordionContent>\n        <Box padding={6}>\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\n            <SubCategory\n              key={subCategoryName}\n              actions={actions}\n              categoryName={categoryName}\n              isFormDisabled={isFormDisabled}\n              subCategoryName={subCategoryName}\n              pathToData={[...pathToData, subCategoryId]}\n            />\n          ))}\n        </Box>\n      </AccordionContent>\n    </Accordion>\n  );\n};\n\nPermissionRow.defaultProps = {};\n\nPermissionRow.propTypes = {\n  childrenForm: PropTypes.array.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  isWhite: PropTypes.bool.isRequired,\n  kind: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  onOpenCategory: PropTypes.func.isRequired,\n  pathToData: PropTypes.array.isRequired,\n};\n\nexport default PermissionRow;\n","import React, { useState } from 'react';\n\nimport { Box } from '@strapi/design-system';\nimport PropTypes from 'prop-types';\n\nimport PermissionRow from './Row';\n\nconst PluginsAndSettingsPermissions = ({ isFormDisabled, kind, layout }) => {\n  const [openedCategory, setOpenedCategory] = useState(null);\n\n  const handleOpenCategory = (categoryName) => {\n    setOpenedCategory(categoryName === openedCategory ? null : categoryName);\n  };\n\n  return (\n    <Box padding={6} background=\"neutral0\">\n      {layout.map(({ category, categoryId, childrenForm }, index) => {\n        return (\n          <PermissionRow\n            key={category}\n            childrenForm={childrenForm}\n            kind={kind}\n            isFormDisabled={isFormDisabled}\n            isOpen={openedCategory === category}\n            isWhite={index % 2 === 1}\n            name={category}\n            onOpenCategory={handleOpenCategory}\n            pathToData={[kind, categoryId]}\n          />\n        );\n      })}\n    </Box>\n  );\n};\n\nPluginsAndSettingsPermissions.propTypes = {\n  isFormDisabled: PropTypes.bool.isRequired,\n  kind: PropTypes.string.isRequired,\n  layout: PropTypes.arrayOf(\n    PropTypes.shape({\n      category: PropTypes.string.isRequired,\n      categoryId: PropTypes.string.isRequired,\n      childrenForm: PropTypes.arrayOf(\n        PropTypes.shape({\n          actions: PropTypes.array.isRequired,\n        })\n      ).isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default PluginsAndSettingsPermissions;\n","const findMatchingPermission = (permissions, action, subject) =>\n  permissions.find((perm) => perm.action === action && perm.subject === subject);\n\nexport default findMatchingPermission;\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\nimport set from 'lodash/set';\n\nimport findMatchingPermission from './findMatchingPermissions';\n/**\n * Creates the default condition form: { [conditionId]: false }\n * @param {object} conditions.id Id of the condition\n * @returns {object}\n */\nconst createDefaultConditionsForm = (conditions, initialConditions = []) =>\n  conditions.reduce((acc, current) => {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n\n    return acc;\n  }, {});\n\n/**\n * Create the default form a property (fields, locales) with all the values\n * set to false\n * @param {object} property.children ex: {children: [{value: 'foo',}]}\n * @param {array<string>} The found property values retrieved from the role associated permissions\n * @returns {object} ex: { foo: false }\n *\n */\nconst createDefaultPropertyForms = ({ children }, propertyValues, prefix = '') => {\n  return children.reduce((acc, current) => {\n    if (current.children) {\n      return {\n        ...acc,\n        [current.value]: createDefaultPropertyForms(\n          current,\n          propertyValues,\n          `${prefix}${current.value}.`\n        ),\n      };\n    }\n\n    const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\n\n    acc[current.value] = hasProperty;\n\n    return acc;\n  }, {});\n};\n\n/**\n * Creates the default form for all the properties found in a content type's layout\n * @param {array<string>} propertiesArray ex; ['fields', 'locales']\n * @param {object} ctLayout layout of the content type ex:\n * ctLayout = {\n *  properties: [{\n *    value: 'fields',\n *    children: [{value: 'name'}]\n *  }\n * }\n * @returns {object} In this case it will return { fields: { name: false } }\n */\nconst createDefaultPropertiesForm = (propertiesArray, ctLayout, matchingPermission) => {\n  return propertiesArray.reduce(\n    (acc, currentPropertyName) => {\n      const foundProperty = ctLayout.properties.find(({ value }) => value === currentPropertyName);\n\n      if (foundProperty) {\n        const matchingPermissionPropertyValues = get(\n          matchingPermission,\n          ['properties', foundProperty.value],\n          []\n        );\n        const propertyForm = createDefaultPropertyForms(\n          foundProperty,\n          matchingPermissionPropertyValues\n        );\n\n        acc.properties[currentPropertyName] = propertyForm;\n      }\n\n      return acc;\n    },\n    { properties: {} }\n  );\n};\n\n/**\n * Return an object of content types layout of an action's subject ex: { adress: {uid, label, properties } }\n * @param {array<object>} allLayouts All the content types' layout\n * @param {object} subjects\n */\nconst findLayouts = (allLayouts, subjects) => {\n  return subjects.reduce((acc, current) => {\n    const foundLayout = allLayouts.find(({ uid }) => uid === current) || null;\n\n    if (foundLayout) {\n      acc[current] = foundLayout;\n    }\n\n    return acc;\n  }, {});\n};\n\n/**\n * Creates the default for for a content type\n * @param {object} layout.subjects All the content types to display\n * @param {array<object>} actionArray An action has the following shape:\n * action = {label: 'string', actionId: 'string', subjects: [object], applyToProperties: ['string]}\n * @param {array<object>} conditionArray Ex: { id: 'string', category: 'string' }\n * @returns {object} Ex:\n * {\n *  ctUId: {\n *    [actionId]: {\n *      [propertyName]: { enabled: false, conditions: { [id]: false } }\n *    }\n *  }\n * }\n */\nconst createDefaultCTFormFromLayout = (\n  { subjects },\n  actionArray,\n  conditionArray,\n  initialPermissions = []\n) => {\n  return actionArray.reduce((defaultForm, current) => {\n    const actionSubjects = current.subjects;\n\n    const subjectLayouts = findLayouts(subjects, actionSubjects);\n\n    // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n    if (isEmpty(subjectLayouts)) {\n      return defaultForm;\n    }\n\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n    const contentTypesActions = Object.keys(subjectLayouts).reduce((acc, currentCTUID) => {\n      const { actionId, applyToProperties } = current;\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\n      const doesNothaveProperty = properties.every(\n        (property) => (applyToProperties || []).indexOf(property) === -1\n      );\n\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\n      const conditionsForm = createDefaultConditionsForm(\n        conditionArray,\n        get(matchingPermission, 'conditions', [])\n      );\n\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\n        set(acc, [currentCTUID, actionId], {\n          properties: {\n            enabled: matchingPermission !== undefined,\n          },\n          conditions: conditionsForm,\n        });\n\n        return acc;\n      }\n\n      const propertiesForm = createDefaultPropertiesForm(\n        applyToProperties,\n        subjectLayouts[currentCTUID],\n        matchingPermission\n      );\n\n      set(acc, [currentCTUID, actionId], { ...propertiesForm, conditions: conditionsForm });\n\n      return acc;\n    }, {});\n\n    return merge(defaultForm, contentTypesActions);\n  }, {});\n};\n\nexport default createDefaultCTFormFromLayout;\nexport {\n  createDefaultConditionsForm,\n  createDefaultPropertiesForm,\n  createDefaultPropertyForms,\n  findLayouts,\n};\n","import { createDefaultConditionsForm } from './createDefaultCTFormFromLayout';\nimport findMatchingPermission from './findMatchingPermissions';\n\nconst createSubCategoryForm = (actions, conditions, permissions) => {\n  return actions.reduce((acc, current) => {\n    const foundMatchingPermission = findMatchingPermission(permissions, current.action, null);\n\n    acc[current.action] = {\n      properties: {\n        enabled: foundMatchingPermission !== undefined,\n      },\n      conditions: createDefaultConditionsForm(\n        conditions,\n        foundMatchingPermission?.conditions ?? []\n      ),\n    };\n\n    return acc;\n  }, {});\n};\n\nconst createChildrenDefaultForm = (childrenForm, conditions, initialPermissions) => {\n  return childrenForm.reduce((acc, current) => {\n    acc[current.subCategoryId] = createSubCategoryForm(\n      current.actions,\n      conditions,\n      initialPermissions\n    );\n\n    return acc;\n  }, {});\n};\n\nconst createDefaultPluginsFormFromLayout = (pluginsLayout, conditions, initialPermissions = []) => {\n  return pluginsLayout.reduce((acc, { categoryId, childrenForm }) => {\n    const childrenDefaultForm = createChildrenDefaultForm(\n      childrenForm,\n      conditions,\n      initialPermissions\n    );\n    acc[categoryId] = childrenDefaultForm;\n\n    return acc;\n  }, {});\n};\n\nexport default createDefaultPluginsFormFromLayout;\nexport { createChildrenDefaultForm, createSubCategoryForm };\n","import groupBy from 'lodash/groupBy';\n\nconst replaceName = (name) => name.split(' ').join('-');\n\nconst formatLayout = (layout, groupByKey) => {\n  return Object.entries(groupBy(layout, groupByKey)).map(([itemName, item]) => ({\n    category: itemName,\n    categoryId: replaceName(itemName),\n    childrenForm: Object.entries(groupBy(item, 'subCategory')).map(\n      ([subCategoryName, actions]) => ({\n        subCategoryName,\n        subCategoryId: replaceName(subCategoryName),\n        actions,\n      })\n    ),\n  }));\n};\n\nexport default formatLayout;\n","import createDefaultCTFormFromLayout from './utils/createDefaultCTFormFromLayout';\nimport createDefaultPluginsFormFromLayout from './utils/createDefaultPluginsFormFromLayout';\nimport formatLayoutForSettingsAndPlugins from './utils/formatLayoutForSettingsAndPlugins';\n\nconst init = (layout, permissions) => {\n  const {\n    conditions,\n    sections: { collectionTypes, singleTypes, plugins, settings },\n  } = layout;\n\n  const layouts = {\n    collectionTypes,\n    singleTypes,\n    plugins: formatLayoutForSettingsAndPlugins(plugins, 'plugin'),\n    settings: formatLayoutForSettingsAndPlugins(settings, 'category'),\n  };\n  const defaultForm = {\n    collectionTypes: createDefaultCTFormFromLayout(\n      collectionTypes,\n      collectionTypes.actions || [],\n      conditions,\n      permissions\n    ),\n    singleTypes: createDefaultCTFormFromLayout(\n      singleTypes,\n      singleTypes.actions || [],\n      conditions,\n      permissions\n    ),\n    plugins: createDefaultPluginsFormFromLayout(layouts.plugins, conditions, permissions),\n    settings: createDefaultPluginsFormFromLayout(layouts.settings, conditions, permissions),\n  };\n\n  return {\n    initialData: defaultForm,\n    modifiedData: defaultForm,\n    layouts,\n  };\n};\n\nexport default init;\n","import has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\nimport { createArrayOfValues } from '../../utils';\n\n/**\n * Changes all the conditions leaf when the properties are all falsy\n * @param {object} obj the modifiedData state\n * @returns {object} the mutated modifiedData\n */\nconst updateConditionsToFalse = (obj) => {\n  return Object.keys(obj).reduce((acc, current) => {\n    const currentValue = obj[current];\n\n    if (isObject(currentValue) && !has(currentValue, 'conditions')) {\n      return { ...acc, [current]: updateConditionsToFalse(currentValue) };\n    }\n\n    if (isObject(currentValue) && has(currentValue, 'conditions')) {\n      const isActionEnabled = createArrayOfValues(omit(currentValue, 'conditions')).some(\n        (val) => val\n      );\n\n      if (!isActionEnabled) {\n        const updatedConditions = Object.keys(currentValue.conditions).reduce((acc1, current) => {\n          acc1[current] = false;\n\n          return acc1;\n        }, {});\n\n        return { ...acc, [current]: { ...currentValue, conditions: updatedConditions } };\n      }\n    }\n\n    acc[current] = currentValue;\n\n    return acc;\n  }, {});\n};\n\nexport default updateConditionsToFalse;\n","import isObject from 'lodash/isObject';\n\n/**\n * Sets all the none object values of an object to the given one\n * @param {object} obj\n * @param {boolean} valueToSet The value we want to set\n * It preserves the shape of the object, it only modifies the leafs\n * of an object.\n * This utility is very helpful when dealing with parent<>children checkboxes\n */\nconst updateValues = (obj, valueToSet, isFieldUpdate = false) => {\n  return Object.keys(obj).reduce((acc, current) => {\n    const currentValue = obj[current];\n\n    if (current === 'conditions' && !isFieldUpdate) {\n      acc[current] = currentValue;\n\n      return acc;\n    }\n\n    if (isObject(currentValue)) {\n      return { ...acc, [current]: updateValues(currentValue, valueToSet, current === 'fields') };\n    }\n\n    acc[current] = valueToSet;\n\n    return acc;\n  }, {});\n};\n\nexport default updateValues;\n","import produce from 'immer';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\n\nimport updateConditionsToFalse from './utils/updateConditionsToFalse';\nimport updateValues from './utils/updateValues';\n\nconst initialState = {\n  initialData: {},\n  modifiedData: {},\n  layouts: {},\n};\n\n/* eslint-disable consistent-return */\nconst reducer = (state, action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      // This action is called when a checkbox in the <GlobalActions />\n      // changes\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\n        const { collectionTypeKind, actionId, value } = action;\n        const pathToData = ['modifiedData', collectionTypeKind];\n\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\n          const collectionTypeActionData = get(\n            state,\n            [...pathToData, collectionType, actionId],\n            undefined\n          );\n\n          if (collectionTypeActionData) {\n            let updatedValues = updateValues(collectionTypeActionData, value);\n\n            // We need to remove the applied conditions\n            if (!value && updatedValues.conditions) {\n              const updatedConditions = updateValues(updatedValues.conditions, false);\n\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\n            }\n\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\n          }\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\n        const { pathToCollectionType, propertyName, rowName, value } = action;\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\n\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\n\n        Object.keys(objToUpdate).forEach((actionId) => {\n          // When a ct has multiple properties (ex: locales, field)\n          // We need to make sure that we add any new property to the modifiedData\n          // object.\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\n            const pathToDataToSet = [\n              ...pathToModifiedDataCollectionType,\n              actionId,\n              'properties',\n              propertyName,\n              rowName,\n            ];\n\n            if (!isObject(objValue)) {\n              set(nextModifiedDataState, pathToDataToSet, value);\n            } else {\n              const updatedValue = updateValues(objValue, value);\n\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\n            }\n          }\n        });\n\n        // When we uncheck a row, we need to check if we also need to disable the conditions\n        if (!value) {\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      case 'ON_CHANGE_CONDITIONS': {\n        Object.entries(action.conditions).forEach((array) => {\n          const [stringPathToData, conditionsToUpdate] = array;\n\n          set(\n            draftState,\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\n            conditionsToUpdate\n          );\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\n\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\n        if (!action.value) {\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      /*\n       * Here the idea is to retrieve a specific value of the modifiedObject\n       * then update all the boolean values of the retrieved one\n       * and update the drafState.\n       *\n       * For instance in order to enable create action for all the fields and locales\n       * of the restaurant content type we need to :\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\n       * 2. Toggle all the end boolean values to the desired one\n       * 3. Update the draftState\n       *\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\n       * reuse the action when we need to toggle change all the values that depends on this one.\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\n       *\n       * Given the following data:\n       *\n       * const data = {\n       *  restaurant: {\n       *   create: {\n       *     fields: { name: true },\n       *     locales: { en: false }\n       *   }\n       *  }\n       * }\n       *\n       * The value of the create checkbox for the restaurant will be ƒalse since not all its children have\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\n       *\n       * Similarly, we can reuse the logic for the components attributes\n       *\n       */\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\n        const { keys, value } = action;\n        const pathToValue = [...keys.split('..')];\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\n\n        const updatedValues = updateValues(oldValues, value);\n        set(nextModifiedDataState, pathToValue, updatedValues);\n\n        // When we uncheck a parent checkbox we need to remove the associated conditions\n        if (!value) {\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, ['modifiedData'], nextModifiedDataState);\n\n        break;\n      }\n      case 'RESET_FORM': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'SET_FORM_AFTER_SUBMIT': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport default reducer;\nexport { initialState };\n","/**\n * Returns an array of condition names when a condition is enabled\n * @param {object} conditions\n * @config {boolean}\n */\nconst createConditionsArray = (conditions) => {\n  return Object.entries(conditions)\n    .filter(([, conditionValue]) => {\n      return conditionValue;\n    })\n    .map(([conditionName]) => conditionName);\n};\n\nconst createPermission = (array) => {\n  const [actionName, { conditions }] = array;\n\n  return {\n    action: actionName,\n    subject: null,\n    conditions: createConditionsArray(conditions),\n    properties: {},\n  };\n};\n\nconst createPermissionsArrayFromCategory = (categoryPermissions) => {\n  return Object.values(categoryPermissions).reduce((acc, current) => {\n    const permissions = Object.entries(current).reduce((acc1, current1) => {\n      const [\n        ,\n        {\n          properties: { enabled },\n        },\n      ] = current1;\n\n      if (!enabled) {\n        return acc1;\n      }\n\n      const permission = createPermission(current1);\n\n      acc1.push(permission);\n\n      return acc1;\n    }, []);\n\n    return [...acc, ...permissions];\n  }, []);\n};\n\nconst formatSettingsPermissionsToAPI = (settingsPermissionsObject) => {\n  return Object.values(settingsPermissionsObject).reduce((acc, current) => {\n    const currentCategoryPermissions = createPermissionsArrayFromCategory(current);\n\n    return [...acc, ...currentCategoryPermissions];\n  }, []);\n};\n\nexport default formatSettingsPermissionsToAPI;\nexport { createConditionsArray, createPermission, createPermissionsArrayFromCategory };\n","import isObject from 'lodash/isObject';\n\nimport { createArrayOfValues } from '../../utils';\n\nimport { createConditionsArray } from './formatSettingsPermissionsToAPI';\n\n/**\n * Returns an array of property values\n * @param {object} propertyValue\n * @param {string} prefix\n * @returns {array<string>}\n */\nconst createPropertyArray = (propertyValue, prefix = '') => {\n  return Object.entries(propertyValue).reduce((acc, current) => {\n    const [name, value] = current;\n\n    if (isObject(value)) {\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\n    }\n\n    if (value && !isObject(value)) {\n      acc.push(`${prefix}${name}`);\n    }\n\n    return acc;\n  }, []);\n};\n\n/**\n *\n * @param {string} action\n * @param {string} subject\n * @param {object} param2\n * @config {object} conditions\n * @config {object} the name of the properties array we need to fill\n * @returns {object}\n */\nconst createPermissionWithProperties = (action, subject, { conditions, properties }) => {\n  return Object.entries(properties).reduce(\n    (acc, current) => {\n      const [propertyName, propertyValue] = current;\n\n      acc.properties[propertyName] = createPropertyArray(propertyValue);\n\n      return acc;\n    },\n    { action, subject, conditions: createConditionsArray(conditions), properties: {} }\n  );\n};\n\n/**\n *\n * @param {string} action The name of the action\n * @param {string} subject The name of the subject\n * @param {object} param2\n * @returns {object}\n */\nconst createPermissionWithoutProperties = (action, subject, { conditions }) => {\n  return {\n    action,\n    subject,\n    properties: {},\n    conditions: createConditionsArray(conditions),\n  };\n};\n\n/**\n *\n * @param {string} subject  The name of the subject\n * @param {object} actions The subject's actions\n * @returns {array<object>}\n */\nconst createSubjectPermissions = (subject, actions) => {\n  const permissions = Object.entries(actions).reduce((acc, current) => {\n    const [actionName, permissions] = current;\n    const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\n\n    if (!shouldCreatePermission) {\n      return acc;\n    }\n\n    if (!permissions?.properties?.enabled) {\n      const createdPermissionsArray = createPermissionWithProperties(\n        actionName,\n        subject,\n        permissions\n      );\n\n      return [...acc, createdPermissionsArray];\n    }\n\n    if (!permissions.properties.enabled) {\n      return acc;\n    }\n\n    const permission = createPermissionWithoutProperties(actionName, subject, permissions);\n\n    acc.push(permission);\n\n    return acc;\n  }, []);\n\n  return permissions;\n};\n\n/**\n *\n * @param {object} contentTypesPermissions\n * @returns {array<object>}\n */\nconst formatContentTypesPermissionToAPI = (contentTypesPermissions) => {\n  const permissions = Object.entries(contentTypesPermissions).reduce((allPermissions, current) => {\n    const [subject, currentSubjectActions] = current;\n\n    const permissions = createSubjectPermissions(subject, currentSubjectActions);\n\n    return [...allPermissions, ...permissions];\n  }, []);\n\n  return permissions;\n};\n\nexport default formatContentTypesPermissionToAPI;\nexport { createPermissionWithProperties, createPropertyArray };\n","import formatContentTypesPermissionToAPI from './formatContentTypesPermissionToAPI';\nimport formatSettingsPermissionsToAPI from './formatSettingsPermissionsToAPI';\n\nconst formatPermissionsToAPI = (modifiedData) => {\n  const pluginsPermissions = formatSettingsPermissionsToAPI(modifiedData.plugins);\n  const settingsPermissions = formatSettingsPermissionsToAPI(modifiedData.settings);\n  const collectionTypesPermissions = formatContentTypesPermissionToAPI(\n    modifiedData.collectionTypes\n  );\n\n  const singleTypesPermissions = formatContentTypesPermissionToAPI(modifiedData.singleTypes);\n\n  return [\n    ...pluginsPermissions,\n    ...settingsPermissions,\n    ...collectionTypesPermissions,\n    ...singleTypesPermissions,\n  ];\n};\n\nexport default formatPermissionsToAPI;\n","const TAB_LABELS = [\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\n    defaultMessage: 'Collection Types',\n    id: 'collectionTypes',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\n    id: 'singleTypes',\n    defaultMessage: 'Single Types',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\n    defaultMessage: 'Plugins',\n    id: 'plugins',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\n    defaultMessage: 'Settings',\n    id: 'settings',\n  },\n];\n\nexport default TAB_LABELS;\n","import React, { forwardRef, memo, useCallback, useImperativeHandle, useReducer } from 'react';\n\nimport { Tab, TabGroup, TabPanel, TabPanels, Tabs } from '@strapi/design-system';\nimport { difference } from '@strapi/helper-plugin';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\n\nimport { PermissionsDataManagerProvider } from '../../hooks/usePermissionsDataManager';\nimport ContentTypes from '../ContentTypes';\nimport PluginsAndSettings from '../PluginsAndSettings';\n\nimport init from './init';\nimport reducer, { initialState } from './reducer';\nimport formatPermissionsToAPI from './utils/formatPermissionsToAPI';\nimport TAB_LABELS from './utils/tabLabels';\n\nconst Permissions = forwardRef(({ layout, isFormDisabled, permissions }, ref) => {\n  const [{ initialData, layouts, modifiedData }, dispatch] = useReducer(reducer, initialState, () =>\n    init(layout, permissions)\n  );\n  const { formatMessage } = useIntl();\n\n  useImperativeHandle(ref, () => {\n    return {\n      getPermissions() {\n        const collectionTypesDiff = difference(\n          initialData.collectionTypes,\n          modifiedData.collectionTypes\n        );\n        const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\n\n        const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\n\n        let didUpdateConditions;\n\n        if (isEmpty(contentTypesDiff)) {\n          didUpdateConditions = false;\n        } else {\n          didUpdateConditions = Object.values(contentTypesDiff).some((permission) => {\n            return Object.values(permission).some((permissionValue) =>\n              has(permissionValue, 'conditions')\n            );\n          });\n        }\n\n        return { permissionsToSend: formatPermissionsToAPI(modifiedData), didUpdateConditions };\n      },\n      resetForm() {\n        dispatch({ type: 'RESET_FORM' });\n      },\n      setFormAfterSubmit() {\n        dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\n      },\n    };\n  });\n\n  const handleChangeCollectionTypeLeftActionRowCheckbox = (\n    pathToCollectionType,\n    propertyName,\n    rowName,\n    value\n  ) => {\n    dispatch({\n      type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\n      pathToCollectionType,\n      propertyName,\n      rowName,\n      value,\n    });\n  };\n\n  const handleChangeCollectionTypeGlobalActionCheckbox = (collectionTypeKind, actionId, value) => {\n    dispatch({\n      type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\n      collectionTypeKind,\n      actionId,\n      value,\n    });\n  };\n\n  const handleChangeConditions = (conditions) => {\n    dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\n  };\n\n  const handleChangeSimpleCheckbox = useCallback(({ target: { name, value } }) => {\n    dispatch({\n      type: 'ON_CHANGE_SIMPLE_CHECKBOX',\n      keys: name,\n      value,\n    });\n  }, []);\n\n  const handleChangeParentCheckbox = useCallback(({ target: { name, value } }) => {\n    dispatch({\n      type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\n      keys: name,\n      value,\n    });\n  }, []);\n\n  return (\n    <PermissionsDataManagerProvider\n      availableConditions={layout.conditions}\n      modifiedData={modifiedData}\n      onChangeConditions={handleChangeConditions}\n      onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\n      onChangeParentCheckbox={handleChangeParentCheckbox}\n      onChangeCollectionTypeLeftActionRowCheckbox={handleChangeCollectionTypeLeftActionRowCheckbox}\n      onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\n    >\n      <TabGroup\n        id=\"tabs\"\n        label={formatMessage({\n          id: 'Settings.permissions.users.tabs.label',\n          defaultMessage: 'Tabs Permissions',\n        })}\n      >\n        <Tabs>\n          {TAB_LABELS.map((tabLabel) => (\n            <Tab key={tabLabel.id}>\n              {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\n            </Tab>\n          ))}\n        </Tabs>\n        <TabPanels style={{ position: 'relative' }}>\n          <TabPanel>\n            <ContentTypes\n              layout={layouts.collectionTypes}\n              kind=\"collectionTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </TabPanel>\n          <TabPanel>\n            <ContentTypes\n              layout={layouts.singleTypes}\n              kind=\"singleTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </TabPanel>\n          <TabPanel>\n            <PluginsAndSettings\n              layout={layouts.plugins}\n              kind=\"plugins\"\n              isFormDisabled={isFormDisabled}\n            />\n          </TabPanel>\n          <TabPanel>\n            <PluginsAndSettings\n              layout={layouts.settings}\n              kind=\"settings\"\n              isFormDisabled={isFormDisabled}\n            />\n          </TabPanel>\n        </TabPanels>\n      </TabGroup>\n    </PermissionsDataManagerProvider>\n  );\n});\n\nPermissions.defaultProps = {\n  permissions: [],\n  layout: {\n    conditions: [],\n    sections: {\n      collectionTypes: {},\n      singleTypes: {\n        actions: [],\n      },\n      settings: [],\n      plugins: [],\n    },\n  },\n};\nPermissions.propTypes = {\n  layout: PropTypes.object,\n  isFormDisabled: PropTypes.bool.isRequired,\n  permissions: PropTypes.array,\n};\n\nexport default memo(Permissions);\n","import { useFetchClient } from '@strapi/helper-plugin';\nimport { useQuery } from 'react-query';\n\nexport const useAdminRolePermissionLayout = (id, queryOptions = {}) => {\n  const { get } = useFetchClient();\n\n  const { data, error, isError, isLoading } = useQuery(\n    ['permissions', id],\n    async () => {\n      const {\n        data: { data },\n      } = await get('/admin/permissions', {\n        // TODO: check with BE why we deviate from our usual admin API format here\n        params: { role: id },\n      });\n\n      return data;\n    },\n    queryOptions\n  );\n\n  return { data, error, isError, isLoading };\n};\n","import { useFetchClient } from '@strapi/helper-plugin';\nimport { Entity } from '@strapi/types';\nimport { useQuery } from 'react-query';\n\nimport { GetOwnPermissions } from '../../../../../../../shared/contracts/users';\n\nexport interface APIRolePermissionsQueryParams {\n  id: null | Entity.ID;\n}\n\nexport const useAdminRolePermissions = (\n  params: APIRolePermissionsQueryParams = { id: null },\n  queryOptions = {}\n) => {\n  const { id, ...queryParams } = params;\n\n  const { get } = useFetchClient();\n\n  const {\n    data: permissions,\n    error,\n    isError,\n    isLoading,\n    refetch,\n  } = useQuery(\n    ['roles', id, 'permissions', queryParams],\n    async () => {\n      const {\n        data: { data },\n      } = await get<GetOwnPermissions.Response>(`/admin/roles/${id}/permissions`, {\n        params: queryParams,\n      });\n\n      return data;\n    },\n    queryOptions\n  );\n\n  return { permissions, error, isError, isLoading, refetch };\n};\n"],"names":["Wrapper","ActionRow","createDefaultConditionsForm","value","ConditionsButton","theme","isActive","Cell","RowLabelWithCheckbox","hasAllActionsSelected","hasSomeActionsSelected","StyledBox","Curve","label","SubActionRow","childrenForm","GlobalActions","ContentTypeCollapses","formatLayoutForSettingsAndPlugins","current","permissions","ContentTypes","PluginsAndSettings","get","data"],"mappings":"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"}