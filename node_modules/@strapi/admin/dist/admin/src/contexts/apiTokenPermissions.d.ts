import * as React from 'react';
import { Entity } from '@strapi/types';
interface PseudoEvent {
    target: {
        value: string;
    };
}
interface ApiTokenPermissionsContextValue {
    selectedAction: string[] | null;
    routes: string[];
    selectedActions: string[];
    data: {
        allActionsIds: Entity.ID[];
        permissions: {
            apiId: string;
            label: string;
            controllers: {
                controller: string;
                actions: {
                    actionId: string;
                    action: string;
                };
            }[];
        }[];
    };
    onChange: ({ target: { value } }: PseudoEvent) => void;
    onChangeSelectAll: ({ target: { value } }: PseudoEvent) => void;
    setSelectedAction: ({ target: { value } }: PseudoEvent) => void;
}
interface ApiTokenPermissionsContextProviderProps extends ApiTokenPermissionsContextValue {
    children: React.ReactNode[];
}
declare const ApiTokenPermissionsProvider: ({ children, ...rest }: ApiTokenPermissionsContextProviderProps) => import("react/jsx-runtime").JSX.Element;
declare const useApiTokenPermissions: () => ApiTokenPermissionsContextValue;
export { ApiTokenPermissionsProvider, useApiTokenPermissions };
export type { ApiTokenPermissionsContextValue, ApiTokenPermissionsContextProviderProps };
