import { Middleware, Reducer } from '@reduxjs/toolkit';
/**
 * @description This is the main store configuration function, injected Reducers use our legacy app.addReducer API,
 * which we're trying to phase out. App Middlewares could potentially be improved...?
 */
declare const configureStoreImpl: (appMiddlewares?: Array<() => Middleware>, injectedReducers?: Record<string, Reducer>) => import("@reduxjs/toolkit/dist/configureStore").ToolkitStore<{
    readonly admin_app: import("../../reducer").State;
    readonly rbacProvider: import("../../components/RBACProvider").RBACState;
    readonly 'content-manager_app': unknown;
    readonly 'content-manager_listView': unknown;
    readonly 'content-manager_rbacManager': unknown;
    readonly 'content-manager_editViewLayoutManager': unknown;
    readonly 'content-manager_editViewCrudReducer': unknown;
}, import("redux").AnyAction, import("@reduxjs/toolkit").ThunkMiddleware<{
    readonly admin_app: import("../../reducer").State;
    readonly rbacProvider: import("../../components/RBACProvider").RBACState;
    readonly 'content-manager_app': unknown;
    readonly 'content-manager_listView': unknown;
    readonly 'content-manager_rbacManager': unknown;
    readonly 'content-manager_editViewLayoutManager': unknown;
    readonly 'content-manager_editViewCrudReducer': unknown;
}, import("redux").AnyAction>[]>;
type Store = ReturnType<typeof configureStoreImpl> & {
    asyncReducers: Record<string, Reducer>;
    injectReducer: (key: string, asyncReducer: Reducer) => void;
};
type RootState = ReturnType<Store['getState']>;
export { configureStoreImpl as configureStore };
export type { RootState, Store };
