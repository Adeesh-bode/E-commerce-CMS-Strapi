import * as React from 'react';
import { type MessageDescriptor } from 'react-intl';
import { type Element, Editor } from 'slate';
import { type RenderElementProps } from 'slate-react';
interface NonSelectorBlock {
    renderElement: (props: RenderElementProps) => React.JSX.Element;
    value: object;
    matchNode: (node: Element) => boolean;
    isInBlocksSelector: false;
    handleEnterKey?: (editor: Editor) => void;
    handleBackspaceKey?: (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => void;
}
type SelectorBlock = Omit<NonSelectorBlock, 'isInBlocksSelector'> & {
    isInBlocksSelector: true;
    icon: React.ComponentType;
    label: MessageDescriptor;
};
type NonSelectorBlockKey = 'list-item' | 'link';
declare const selectorBlockKeys: readonly ["paragraph", "heading-one", "heading-two", "heading-three", "heading-four", "heading-five", "heading-six", "list-ordered", "list-unordered", "image", "quote", "code"];
type SelectorBlockKey = (typeof selectorBlockKeys)[number];
declare const isSelectorBlockKey: (key: unknown) => key is "code" | "image" | "paragraph" | "quote" | "heading-one" | "heading-two" | "heading-three" | "heading-four" | "heading-five" | "heading-six" | "list-ordered" | "list-unordered";
type BlocksStore = {
    [K in SelectorBlockKey]: SelectorBlock;
} & {
    [K in NonSelectorBlockKey]: NonSelectorBlock;
};
/**
 * Manages a store of all the available blocks.
 */
declare function useBlocksStore(): BlocksStore;
export { useBlocksStore, selectorBlockKeys, isSelectorBlockKey };
export type { BlocksStore, SelectorBlockKey };
