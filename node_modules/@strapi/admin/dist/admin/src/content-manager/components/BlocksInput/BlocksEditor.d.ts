import * as React from 'react';
import { type Attribute } from '@strapi/types';
import { MessageDescriptor } from 'react-intl';
import { type Editor } from 'slate';
interface BlocksEditorContextValue {
    disabled: boolean;
}
declare const BlocksEditorProvider: {
    (props: BlocksEditorContextValue & {
        children: React.ReactNode;
    }): JSX.Element;
    displayName: string;
};
declare function useBlocksEditorContext(consumerName: string): BlocksEditorContextValue & {
    editor: Editor;
};
interface BlocksEditorProps {
    name: string;
    onChange: (event: {
        target: {
            name: string;
            value: Attribute.BlocksValue;
            type: 'blocks';
        };
    }) => void;
    disabled?: boolean;
    value?: Attribute.BlocksValue;
    placeholder?: MessageDescriptor;
    error?: string;
}
declare const BlocksEditor: React.ForwardRefExoticComponent<BlocksEditorProps & React.RefAttributes<{
    focus: () => void;
}>>;
export { BlocksEditor, BlocksEditorProvider, useBlocksEditorContext };
