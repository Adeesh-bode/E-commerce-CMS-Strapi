import { Attribute, Common } from '@strapi/types';
import type { Release, Pagination } from './releases';
import type { Entity } from '../types';
import type { errors } from '@strapi/utils';
type ReleaseActionEntry = Entity & {
    [key: string]: Attribute.Any;
} & {
    locale: string;
};
type ReleaseActionEntryData = {
    id: ReleaseActionEntry['id'];
    locale?: {
        name: string;
        code: string;
    };
    contentType: {
        mainFieldValue?: string;
        displayName: string;
    };
};
export interface ReleaseAction extends Entity {
    type: 'publish' | 'unpublish';
    entry: ReleaseActionEntry;
    contentType: Common.UID.ContentType;
    release: Release;
}
/**
 * POST /content-releases/:releaseId/actions - Create a release action
 */
export declare namespace CreateReleaseAction {
    interface Request {
        params: {
            releaseId: Release['id'];
        };
        body: {
            type: ReleaseAction['type'];
            entry: {
                id: ReleaseActionEntry['id'];
                contentType: Common.UID.ContentType;
            };
        };
    }
    interface Response {
        data: ReleaseAction;
        error?: errors.ApplicationError | errors.ValidationError | errors.NotFoundError;
    }
}
/**
 * GET /content-releases/:id/actions - Get all release actions
 */
export declare namespace GetReleaseActions {
    interface Request {
        params: {
            releaseId: Release['id'];
        };
        query?: Partial<Pick<Pagination, 'page' | 'pageSize'>>;
    }
    interface Response {
        data: Array<ReleaseAction & {
            entry: ReleaseActionEntryData;
        }>;
        meta: {
            pagination: Pagination;
        };
    }
}
export declare namespace DeleteReleaseAction {
    interface Request {
        params: {
            actionId: ReleaseAction['id'];
            releaseId: Release['id'];
        };
    }
    interface Response {
        data: ReleaseAction;
        error?: errors.ApplicationError | errors.NotFoundError;
    }
}
export declare namespace UpdateReleaseAction {
    interface Request {
        params: {
            actionId: ReleaseAction['id'];
            releaseId: ReleaseAction['id'];
        };
        body: {
            type: ReleaseAction['type'];
        };
    }
    interface Response {
        data: ReleaseAction;
        error?: errors.ApplicationError | errors.ValidationError | errors.NotFoundError;
    }
}
export {};
//# sourceMappingURL=release-actions.d.ts.map