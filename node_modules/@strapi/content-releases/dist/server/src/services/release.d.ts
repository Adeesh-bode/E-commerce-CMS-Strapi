import type { LoadedStrapi, EntityService } from '@strapi/types';
import { RELEASE_ACTION_MODEL_UID } from '../constants';
import type { GetReleases, CreateRelease, UpdateRelease, PublishRelease, GetRelease, Release, DeleteRelease, GetContentTypeEntryReleases } from '../../../shared/contracts/releases';
import type { CreateReleaseAction, GetReleaseActions, UpdateReleaseAction, DeleteReleaseAction } from '../../../shared/contracts/release-actions';
import type { UserInfo } from '../../../shared/types';
declare const createReleaseService: ({ strapi }: {
    strapi: LoadedStrapi;
}) => {
    create(releaseData: CreateRelease.Request['body'], { user }: {
        user: UserInfo;
    }): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string>>;
    findOne(id: GetRelease.Request['params']['id'], query?: {}): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string> | null>;
    findPage(query?: GetReleases.Request['query']): Promise<EntityService.PaginatedResult<"plugin::content-releases.release", {
        sort?: EntityService.Params.Sort.Any<"plugin::content-releases.release"> | undefined;
    } & {
        fields?: EntityService.Params.Fields.Any<"plugin::content-releases.release"> | undefined;
    } & {
        filters?: EntityService.Params.Filters.Any<"plugin::content-releases.release"> | undefined;
    } & {
        populate?: EntityService.Params.Populate.Any<"plugin::content-releases.release"> | undefined;
    } & ((import("@strapi/types/dist/types/utils").Without<EntityService.Params.Pagination.PageNotation, EntityService.Params.Pagination.OffsetNotation> & EntityService.Params.Pagination.OffsetNotation) | (import("@strapi/types/dist/types/utils").Without<EntityService.Params.Pagination.OffsetNotation, EntityService.Params.Pagination.PageNotation> & EntityService.Params.Pagination.PageNotation)) & {
        publicationState?: EntityService.Params.PublicationState.Kind | undefined;
    } & {
        _q?: string | undefined;
    }>>;
    findManyForContentTypeEntry(contentTypeUid: GetContentTypeEntryReleases.Request['query']['contentTypeUid'], entryId: GetContentTypeEntryReleases.Request['query']['entryId'], { hasEntryAttached, }?: {
        hasEntryAttached?: GetContentTypeEntryReleases.Request['query']['hasEntryAttached'];
    }): Promise<any[]>;
    update(id: number, releaseData: UpdateRelease.Request['body'], { user }: {
        user: UserInfo;
    }): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string>>;
    createAction(releaseId: CreateReleaseAction.Request['params']['releaseId'], action: Pick<CreateReleaseAction.Request['body'], 'type' | 'entry'>): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release-action", string>>;
    findActions(releaseId: GetReleaseActions.Request['params']['releaseId'], query?: GetReleaseActions.Request['query']): Promise<EntityService.PaginatedResult<"plugin::content-releases.release-action", {
        populate: {
            entry: true;
        };
        filters: {
            release: import("@strapi/types/dist/types/core/entity").ID;
        };
        page?: number | undefined;
        pageSize?: number | undefined;
    }>>;
    countActions(query: EntityService.Params.Pick<typeof RELEASE_ACTION_MODEL_UID, 'filters'>): Promise<number>;
    getAllContentTypeUids(releaseId: Release['id']): Promise<(`admin::${string}` | `strapi::${string}` | `api::${string}.${string}` | `plugin::${string}.${string}`)[]>;
    getContentTypesDataForActions(releaseId: Release['id']): Promise<Record<`admin::${string}` | `strapi::${string}` | `api::${string}.${string}` | `plugin::${string}.${string}`, {
        mainField: string;
        displayName: string;
    }>>;
    delete(releaseId: DeleteRelease.Request['params']['id']): Promise<Release>;
    publish(releaseId: PublishRelease.Request['params']['id']): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string> | null>;
    updateAction(actionId: UpdateReleaseAction.Request['params']['actionId'], releaseId: UpdateReleaseAction.Request['params']['releaseId'], update: UpdateReleaseAction.Request['body']): Promise<any>;
    deleteAction(actionId: DeleteReleaseAction.Request['params']['actionId'], releaseId: DeleteReleaseAction.Request['params']['releaseId']): Promise<any>;
};
export default createReleaseService;
//# sourceMappingURL=release.d.ts.map