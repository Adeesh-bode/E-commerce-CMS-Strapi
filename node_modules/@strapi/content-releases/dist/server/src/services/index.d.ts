export declare const services: {
    release: ({ strapi }: {
        strapi: Required<import("@strapi/types").Strapi>;
    }) => {
        create(releaseData: {
            name: string;
        }, { user }: {
            user: import("../../../shared/types").UserInfo;
        }): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string>>;
        findOne(id: import("@strapi/types/dist/types/core/entity").ID, query?: {}): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string> | null>;
        findPage(query?: Partial<Pick<import("../../../shared/contracts/releases").Pagination, "page" | "pageSize">> | undefined): Promise<import("@strapi/types/dist/modules/entity-service").PaginatedResult<"plugin::content-releases.release", {
            sort?: import("@strapi/types/dist/modules/entity-service/params/sort").Any<"plugin::content-releases.release"> | undefined;
        } & {
            fields?: import("@strapi/types/dist/modules/entity-service/params/fields").Any<"plugin::content-releases.release"> | undefined;
        } & {
            filters?: import("@strapi/types/dist/modules/entity-service/params/filters").Any<"plugin::content-releases.release"> | undefined;
        } & {
            populate?: import("@strapi/types/dist/modules/entity-service/params/populate").Any<"plugin::content-releases.release"> | undefined;
        } & ((import("@strapi/types/dist/types/utils").Without<import("@strapi/types/dist/modules/entity-service/params/pagination").PageNotation, import("@strapi/types/dist/modules/entity-service/params/pagination").OffsetNotation> & import("@strapi/types/dist/modules/entity-service/params/pagination").OffsetNotation) | (import("@strapi/types/dist/types/utils").Without<import("@strapi/types/dist/modules/entity-service/params/pagination").OffsetNotation, import("@strapi/types/dist/modules/entity-service/params/pagination").PageNotation> & import("@strapi/types/dist/modules/entity-service/params/pagination").PageNotation)) & {
            publicationState?: import("@strapi/types/dist/modules/entity-service/params/publication-state").Kind | undefined;
        } & {
            _q?: string | undefined;
        }>>;
        findManyForContentTypeEntry(contentTypeUid: import("@strapi/types/dist/types/core/common/uid").ContentType, entryId: import("@strapi/types/dist/types/core/entity").ID, { hasEntryAttached, }?: {
            hasEntryAttached?: boolean | undefined;
        }): Promise<any[]>;
        update(id: number, releaseData: {
            name: string;
        }, { user }: {
            user: import("../../../shared/types").UserInfo;
        }): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string>>;
        createAction(releaseId: import("@strapi/types/dist/types/core/entity").ID, action: Pick<{
            type: "publish" | "unpublish";
            entry: {
                id: import("@strapi/types/dist/types/core/entity").ID;
                contentType: import("@strapi/types/dist/types/core/common/uid").ContentType;
            };
        }, "type" | "entry">): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release-action", string>>;
        findActions(releaseId: import("@strapi/types/dist/types/core/entity").ID, query?: Partial<Pick<import("../../../shared/contracts/releases").Pagination, "page" | "pageSize">> | undefined): Promise<import("@strapi/types/dist/modules/entity-service").PaginatedResult<"plugin::content-releases.release-action", {
            populate: {
                entry: true;
            };
            filters: {
                release: import("@strapi/types/dist/types/core/entity").ID;
            };
            page?: number | undefined;
            pageSize?: number | undefined;
        }>>;
        countActions(query: {
            filters?: import("@strapi/types/dist/modules/entity-service/params/filters").Any<"plugin::content-releases.release-action"> | undefined;
        }): Promise<number>;
        getAllContentTypeUids(releaseId: import("@strapi/types/dist/types/core/entity").ID): Promise<(`admin::${string}` | `strapi::${string}` | `api::${string}.${string}` | `plugin::${string}.${string}`)[]>;
        getContentTypesDataForActions(releaseId: import("@strapi/types/dist/types/core/entity").ID): Promise<Record<`admin::${string}` | `strapi::${string}` | `api::${string}.${string}` | `plugin::${string}.${string}`, {
            mainField: string;
            displayName: string;
        }>>;
        delete(releaseId: import("@strapi/types/dist/types/core/entity").ID): Promise<import("../../../shared/contracts/releases").Release>;
        publish(releaseId: import("@strapi/types/dist/types/core/entity").ID): Promise<import("@strapi/types/dist/types/core/attributes").GetValues<"plugin::content-releases.release", string> | null>;
        updateAction(actionId: import("@strapi/types/dist/types/core/entity").ID, releaseId: import("@strapi/types/dist/types/core/entity").ID, update: {
            type: "publish" | "unpublish";
        }): Promise<any>;
        deleteAction(actionId: import("@strapi/types/dist/types/core/entity").ID, releaseId: import("@strapi/types/dist/types/core/entity").ID): Promise<any>;
    };
    'release-validation': ({ strapi }: {
        strapi: Required<import("@strapi/types").Strapi>;
    }) => {
        validateUniqueEntry(releaseId: import("@strapi/types/dist/types/core/entity").ID, releaseActionArgs: {
            type: "publish" | "unpublish";
            entry: {
                id: import("@strapi/types/dist/types/core/entity").ID;
                contentType: import("@strapi/types/dist/types/core/common/uid").ContentType;
            };
        }): Promise<void>;
        validateEntryContentType(contentTypeUid: import("@strapi/types/dist/types/core/common/uid").ContentType): void;
    };
};
//# sourceMappingURL=index.d.ts.map