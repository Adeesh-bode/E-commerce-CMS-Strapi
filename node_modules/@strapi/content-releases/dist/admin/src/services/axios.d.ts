import type { AxiosError, AxiosRequestConfig } from 'axios';
export interface QueryArguments<TSend> {
    url: string;
    method: 'PUT' | 'GET' | 'POST' | 'DELETE';
    data?: TSend;
    config?: AxiosRequestConfig<TSend>;
}
declare const axiosBaseQuery: <TData = any, TSend = any>({ url, method, data, config, }: QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>;
/**
 * This asserts the errors from redux-toolkit-query are
 * axios errors so we can pass them to our utility functions
 * to correctly render error messages.
 */
declare const isAxiosError: (err: unknown) => err is AxiosError<{
    error: any;
}, any>;
export { isAxiosError, axiosBaseQuery };
