import { CreateReleaseAction, DeleteReleaseAction } from '../../../shared/contracts/release-actions';
import type { GetReleaseActions, UpdateReleaseAction } from '../../../shared/contracts/release-actions';
import type { CreateRelease, DeleteRelease, GetContentTypeEntryReleases, GetReleases, GetRelease, PublishRelease } from '../../../shared/contracts/releases';
export interface GetReleasesQueryParams {
    page?: number;
    pageSize?: number;
    filters?: {
        releasedAt?: {
            $notNull?: boolean | 'true' | 'false';
        };
    };
}
export interface GetReleaseActionsQueryParams {
    page?: number;
    pageSize?: number;
}
type GetReleasesTabResponse = GetReleases.Response & {
    meta: {
        activeTab: 'pending' | 'done';
    };
};
declare const releaseApi: import("@reduxjs/toolkit/query/react").Api<(<TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>), {
    getReleasesForEntry: import("@reduxjs/toolkit/query/react").QueryDefinition<Partial<{
        contentTypeUid: import("@strapi/types/dist/types/core/common/uid").ContentType;
        entryId: import("@strapi/types/dist/types/core/entity").ID;
        hasEntryAttached?: boolean | undefined;
    }>, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", GetContentTypeEntryReleases.Response, "content-releases">;
    getReleases: import("@reduxjs/toolkit/query/react").QueryDefinition<void | GetReleasesQueryParams, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", GetReleasesTabResponse, "content-releases">;
    getRelease: import("@reduxjs/toolkit/query/react").QueryDefinition<{
        id: import("@strapi/types/dist/types/core/entity").ID;
    }, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", GetRelease.Response, "content-releases">;
    getReleaseActions: import("@reduxjs/toolkit/query/react").QueryDefinition<{
        releaseId: import("@strapi/types/dist/types/core/entity").ID;
    } & Partial<Pick<import("../../../shared/contracts/releases").Pagination, "page" | "pageSize">>, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", GetReleaseActions.Response, "content-releases">;
    createRelease: import("@reduxjs/toolkit/query/react").MutationDefinition<{
        name: string;
    }, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", CreateRelease.Response, "content-releases">;
    updateRelease: import("@reduxjs/toolkit/query/react").MutationDefinition<{
        id: import("@strapi/types/dist/types/core/entity").ID;
    } & {
        name: string;
    }, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", void, "content-releases">;
    createReleaseAction: import("@reduxjs/toolkit/query/react").MutationDefinition<CreateReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", CreateReleaseAction.Response, "content-releases">;
    updateReleaseAction: import("@reduxjs/toolkit/query/react").MutationDefinition<UpdateReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", UpdateReleaseAction.Response, "content-releases">;
    deleteReleaseAction: import("@reduxjs/toolkit/query/react").MutationDefinition<DeleteReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", DeleteReleaseAction.Response, "content-releases">;
    publishRelease: import("@reduxjs/toolkit/query/react").MutationDefinition<{
        id: import("@strapi/types/dist/types/core/entity").ID;
    }, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", PublishRelease.Response, "content-releases">;
    deleteRelease: import("@reduxjs/toolkit/query/react").MutationDefinition<{
        id: import("@strapi/types/dist/types/core/entity").ID;
    }, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
        data: TData;
        error?: undefined;
    } | {
        error: {
            status: number | undefined;
            code: string | undefined;
            response: {
                data: unknown;
            };
        };
        data?: undefined;
    }>, "Release" | "ReleaseAction", DeleteRelease.Response, "content-releases">;
}, "content-releases", "Release" | "ReleaseAction", typeof import("@reduxjs/toolkit/query/react").coreModuleName | typeof import("@reduxjs/toolkit/query/react").reactHooksModuleName>;
declare const useGetReleasesQuery: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseQuery<import("@reduxjs/toolkit/query/react").QueryDefinition<void | GetReleasesQueryParams, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", GetReleasesTabResponse, "content-releases">>, useGetReleasesForEntryQuery: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseQuery<import("@reduxjs/toolkit/query/react").QueryDefinition<Partial<{
    contentTypeUid: import("@strapi/types/dist/types/core/common/uid").ContentType;
    entryId: import("@strapi/types/dist/types/core/entity").ID;
    hasEntryAttached?: boolean | undefined;
}>, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", GetContentTypeEntryReleases.Response, "content-releases">>, useGetReleaseQuery: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseQuery<import("@reduxjs/toolkit/query/react").QueryDefinition<{
    id: import("@strapi/types/dist/types/core/entity").ID;
}, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", GetRelease.Response, "content-releases">>, useGetReleaseActionsQuery: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseQuery<import("@reduxjs/toolkit/query/react").QueryDefinition<{
    releaseId: import("@strapi/types/dist/types/core/entity").ID;
} & Partial<Pick<import("../../../shared/contracts/releases").Pagination, "page" | "pageSize">>, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", GetReleaseActions.Response, "content-releases">>, useCreateReleaseMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<{
    name: string;
}, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", CreateRelease.Response, "content-releases">>, useCreateReleaseActionMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<CreateReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", CreateReleaseAction.Response, "content-releases">>, useUpdateReleaseMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<{
    id: import("@strapi/types/dist/types/core/entity").ID;
} & {
    name: string;
}, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", void, "content-releases">>, useUpdateReleaseActionMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<UpdateReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", UpdateReleaseAction.Response, "content-releases">>, usePublishReleaseMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<{
    id: import("@strapi/types/dist/types/core/entity").ID;
}, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", PublishRelease.Response, "content-releases">>, useDeleteReleaseActionMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<DeleteReleaseAction.Request, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", DeleteReleaseAction.Response, "content-releases">>, useDeleteReleaseMutation: import("@reduxjs/toolkit/dist/query/react/buildHooks").UseMutation<import("@reduxjs/toolkit/query/react").MutationDefinition<{
    id: import("@strapi/types/dist/types/core/entity").ID;
}, <TData = any, TSend = any>({ url, method, data, config, }: import("./axios").QueryArguments<TSend>) => Promise<{
    data: TData;
    error?: undefined;
} | {
    error: {
        status: number | undefined;
        code: string | undefined;
        response: {
            data: unknown;
        };
    };
    data?: undefined;
}>, "Release" | "ReleaseAction", DeleteRelease.Response, "content-releases">>;
export { useGetReleasesQuery, useGetReleasesForEntryQuery, useGetReleaseQuery, useGetReleaseActionsQuery, useCreateReleaseMutation, useCreateReleaseActionMutation, useUpdateReleaseMutation, useUpdateReleaseActionMutation, usePublishReleaseMutation, useDeleteReleaseActionMutation, useDeleteReleaseMutation, releaseApi, };
